/* Generated by Cython 0.29.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "_GLIBCXX_USE_CXX11_ABI",
                "0"
            ],
            [
                "_FORCE_INLINES",
                "1"
            ]
        ],
        "depends": [
            "cupy/cuda/cupy_cuComplex.h",
            "cupy/cuda/cupy_cuda.h"
        ],
        "extra_link_args": [
            "-Wl,--disable-new-dtags,-rpath,/usr/local/cuda/lib64"
        ],
        "include_dirs": [
            "cupy/cuda",
            "/usr/local/cuda/include"
        ],
        "language": "c++",
        "libraries": [
            "cublas",
            "cuda",
            "cudart",
            "cufft",
            "curand",
            "cusparse",
            "nvrtc"
        ],
        "library_dirs": [
            "/usr/local/cuda/lib64"
        ],
        "name": "cupy.cuda.cublas",
        "sources": [
            "cupy/cuda/cublas.pyx"
        ]
    },
    "module_name": "cupy.cuda.cublas"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_2"
#define CYTHON_HEX_VERSION 0x001D02F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
        static PY_UINT64_T __pyx_dict_version = 0;\
        static PyObject *__pyx_dict_cached_value = NULL;\
        if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
            (VAR) = __pyx_dict_cached_value;\
        } else {\
            (VAR) = __pyx_dict_cached_value = (LOOKUP);\
            __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
        }\
    }
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cupy__cuda__cublas
#define __PYX_HAVE_API__cupy__cuda__cublas
/* Early includes */
#include <stdint.h>
#include "cupy_cuComplex.h"
#include "cupy_cuda.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "cupy/cuda/cublas.pyx",
  "cupy/cuda/runtime.pxd",
  "cupy/cuda/cublas.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes;

/* "driver.pxd":23
 *     ctypedef int CUjitInputType 'CUjitInputType'
 * 
 * cpdef enum:             # <<<<<<<<<<<<<<
 *     CU_JIT_INPUT_CUBIN = 0
 *     CU_JIT_INPUT_PTX = 1
 */
enum  {
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_CUBIN = 0,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_PTX = 1,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_FATBINARY = 2,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_OBJECT = 3,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_LIBRARY = 4
};
struct __pyx_opt_args_4cupy_4cuda_7runtime_mallocManaged;
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamAddCallback;
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamWaitEvent;

/* "runtime.pxd":26
 * ###############################################################################
 * 
 * cpdef enum:             # <<<<<<<<<<<<<<
 *     memcpyHostToHost = 0
 *     memcpyHostToDevice = 1
 */
enum  {
  __pyx_e_4cupy_4cuda_7runtime_memcpyHostToHost = 0,
  __pyx_e_4cupy_4cuda_7runtime_memcpyHostToDevice = 1,
  __pyx_e_4cupy_4cuda_7runtime_memcpyDeviceToHost = 2,
  __pyx_e_4cupy_4cuda_7runtime_memcpyDeviceToDevice = 3,
  __pyx_e_4cupy_4cuda_7runtime_memcpyDefault = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemoryTypeHost = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemoryTypeDevice = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAttachGlobal = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAttachHost = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAttachSingle = 4,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocDefault = 0,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocPortable = 1,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocMapped = 2,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocWriteCombined = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseSetReadMostly = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseUnsetReadMostly = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseSetPreferredLocation = 3,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseUnsetPreferredLocation = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseSetAccessedBy = 5,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseUnsetAccessedBy = 6,
  __pyx_e_4cupy_4cuda_7runtime_streamDefault = 0,
  __pyx_e_4cupy_4cuda_7runtime_streamNonBlocking = 1,
  __pyx_e_4cupy_4cuda_7runtime_eventDefault = 0,
  __pyx_e_4cupy_4cuda_7runtime_eventBlockingSync = 1,
  __pyx_e_4cupy_4cuda_7runtime_eventDisableTiming = 2,
  __pyx_e_4cupy_4cuda_7runtime_eventInterprocess = 4,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_32F = 0,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_64F = 1,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_16F = 2,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_8I = 3,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_32F = 4,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_64F = 5,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_16F = 6,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_8I = 7,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_8U = 8,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_8U = 9,
  __pyx_e_4cupy_4cuda_7runtime_errorMemoryAllocation = 2,
  __pyx_e_4cupy_4cuda_7runtime_errorInvalidValue = 11,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxThreadsPerBlock = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxBlockDimX = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxBlockDimY = 3,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxBlockDimZ = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxGridDimX = 5,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxGridDimY = 6,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxGridDimZ = 7,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSharedMemoryPerBlock = 8,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTotalConstantMemory = 9,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrWarpSize = 10,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxPitch = 11,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxRegistersPerBlock = 12,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrClockRate = 13,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTextureAlignment = 14,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrGpuOverlap = 15,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMultiProcessorCount = 16,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrKernelExecTimeout = 17,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrIntegrated = 18,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCanMapHostMemory = 19,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputeMode = 20,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DWidth = 21,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DWidth = 22,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DHeight = 23,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DWidth = 24,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DHeight = 25,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DDepth = 26,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLayeredWidth = 27,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLayeredHeight = 28,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLayeredLayers = 29,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrSurfaceAlignment = 30,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrConcurrentKernels = 31,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrEccEnabled = 32,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPciBusId = 33,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPciDeviceId = 34,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTccDriver = 35,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMemoryClockRate = 36,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrGlobalMemoryBusWidth = 37,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrL2CacheSize = 38,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxThreadsPerMultiProcessor = 39,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrAsyncEngineCount = 40,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrUnifiedAddressing = 41,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DLayeredWidth = 42,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DLayeredLayers = 43,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DGatherWidth = 45,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DGatherHeight = 46,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DWidthAlt = 47,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DHeightAlt = 48,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DDepthAlt = 49,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPciDomainId = 50,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTexturePitchAlignment = 51,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTextureCubemapWidth = 52,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface1DWidth = 55,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DWidth = 56,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DHeight = 57,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface3DWidth = 58,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface3DHeight = 59,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface3DDepth = 60,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface1DLayeredWidth = 61,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface1DLayeredLayers = 62,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DLayeredWidth = 63,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DLayeredHeight = 64,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DLayeredLayers = 65,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurfaceCubemapWidth = 66,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DLinearWidth = 69,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLinearWidth = 70,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLinearHeight = 71,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLinearPitch = 72,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DMipmappedWidth = 73,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DMipmappedHeight = 74,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputeCapabilityMajor = 75,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputeCapabilityMinor = 76,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DMipmappedWidth = 77,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrStreamPrioritiesSupported = 78,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrGlobalL1CacheSupported = 79,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrLocalL1CacheSupported = 80,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxRegistersPerMultiprocessor = 82,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrManagedMemory = 83,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrIsMultiGpuBoard = 84,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMultiGpuBoardGroupID = 85,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrHostNativeAtomicSupported = 86,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPageableMemoryAccess = 88,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrConcurrentManagedAccess = 89,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputePreemptionSupported = 90,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrReserved92 = 92,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrReserved93 = 93,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrReserved94 = 94,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCooperativeLaunch = 95,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCooperativeMultiDeviceLaunch = 96,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCanFlushRemoteWrites = 98,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrHostRegisterSupported = 99,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPageableMemoryAccessUsesHostPageTables = 0x64,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrDirectManagedMemAccessFromHost = 0x65
};

/* "runtime.pxd":209
 * 
 * cpdef intptr_t malloc(size_t size) except? 0
 * cpdef intptr_t mallocManaged(size_t size, unsigned int flags=*) except? 0             # <<<<<<<<<<<<<<
 * cpdef intptr_t hostAlloc(size_t size, unsigned int flags) except? 0
 * cpdef free(intptr_t ptr)
 */
struct __pyx_opt_args_4cupy_4cuda_7runtime_mallocManaged {
  int __pyx_n;
  unsigned int flags;
};

/* "runtime.pxd":238
 * cpdef streamDestroy(size_t stream)
 * cpdef streamSynchronize(size_t stream)
 * cpdef streamAddCallback(size_t stream, callback, intptr_t arg,             # <<<<<<<<<<<<<<
 *                         unsigned int flags=*)
 * cpdef streamQuery(size_t stream)
 */
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamAddCallback {
  int __pyx_n;
  unsigned int flags;
};

/* "runtime.pxd":241
 *                         unsigned int flags=*)
 * cpdef streamQuery(size_t stream)
 * cpdef streamWaitEvent(size_t stream, size_t event, unsigned int flags=*)             # <<<<<<<<<<<<<<
 * cpdef size_t eventCreate() except? 0
 * cpdef size_t eventCreateWithFlags(unsigned int flags) except? 0
 */
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamWaitEvent {
  int __pyx_n;
  unsigned int flags;
};

/* "cupy/cuda/cublas.pxd":29
 * ###############################################################################
 * 
 * cpdef enum:             # <<<<<<<<<<<<<<
 *     CUBLAS_OP_N = 0
 *     CUBLAS_OP_T = 1
 */
enum  {
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_OP_N = 0,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_OP_T = 1,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_OP_C = 2,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_POINTER_MODE_HOST = 0,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_POINTER_MODE_DEVICE = 1,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_SIDE_LEFT = 0,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_SIDE_RIGHT = 1,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_FILL_MODE_LOWER = 0,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_FILL_MODE_UPPER = 1,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_DIAG_NON_UNIT = 0,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_DIAG_UNIT = 1,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DEFAULT = -1L,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DEFAULT_TENSOR_OP = 99,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DFALT = -1L,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DFALT_TENSOR_OP = 99,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_DEFAULT_MATH = 0,
  __pyx_e_4cupy_4cuda_6cublas_CUBLAS_TENSOR_OP_MATH = 1
};

/* "runtime.pxd":8
 * ###############################################################################
 * 
 * cdef class PointerAttributes:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public int device
 */
struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes {
  PyObject_HEAD
  int device;
  size_t devicePointer;
  size_t hostPointer;
  int isManaged;
  int memoryType;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* FromPy.proto */
static __pyx_t_float_complex __Pyx_PyComplex_As___pyx_t_float_complex(PyObject*);

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'cupy.cuda' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cupy.cuda.driver' */

/* Module declarations from 'cupy.cuda.runtime' */
static PyTypeObject *__pyx_ptype_4cupy_4cuda_7runtime_PointerAttributes = 0;

/* Module declarations from 'cupy.cuda.stream' */
static size_t (*__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr)(void); /*proto*/

/* Module declarations from 'cupy.cuda.cublas' */
static PyObject *__pyx_v_4cupy_4cuda_6cublas_STATUS = 0;
static size_t __pyx_f_4cupy_4cuda_6cublas_create(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_destroy(size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_getVersion(size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_getPointerMode(size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_setPointerMode(size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_setStream(size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6cublas_getStream(size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_setMathMode(size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_getMathMode(size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_isamax(size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_isamin(size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static float __pyx_f_4cupy_4cuda_6cublas_sasum(size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_saxpy(size_t, int, float, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_daxpy(size_t, int, double, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sdot(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_ddot(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cdotu(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cdotc(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zdotu(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zdotc(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static float __pyx_f_4cupy_4cuda_6cublas_snrm2(size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sscal(size_t, int, float, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemv(size_t, int, int, int, float, size_t, int, size_t, int, float, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemv(size_t, int, int, int, double, size_t, int, size_t, int, double, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemv(size_t, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, __pyx_t_float_complex, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemv(size_t, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, __pyx_t_double_complex, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sger(size_t, int, int, float, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dger(size_t, int, int, double, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgeru(size_t, int, int, __pyx_t_float_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgerc(size_t, int, int, __pyx_t_float_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgeru(size_t, int, int, __pyx_t_double_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgerc(size_t, int, int, __pyx_t_double_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemm(size_t, int, int, int, int, int, float, size_t, int, size_t, int, float, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemm(size_t, int, int, int, int, int, double, size_t, int, size_t, int, double, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemm(size_t, int, int, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, __pyx_t_float_complex, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemm(size_t, int, int, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, __pyx_t_double_complex, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemmBatched(size_t, int, int, int, int, int, float, size_t, int, size_t, int, float, size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemmBatched(size_t, int, int, int, int, int, double, size_t, int, size_t, int, double, size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemmBatched(size_t, int, int, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, __pyx_t_float_complex, size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemmBatched(size_t, int, int, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, __pyx_t_double_complex, size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemmStridedBatched(size_t, int, int, int, int, int, float, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, float, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemmStridedBatched(size_t, int, int, int, int, int, double, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, double, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemmStridedBatched(size_t, int, int, int, int, int, __pyx_t_float_complex, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, __pyx_t_float_complex, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemmStridedBatched(size_t, int, int, int, int, int, __pyx_t_double_complex, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, __pyx_t_double_complex, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_strsm(size_t, int, int, int, int, int, int, float, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dtrsm(size_t, int, int, int, int, int, int, double, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_ctrsm(size_t, int, int, int, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_ztrsm(size_t, int, int, int, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgeam(size_t, int, int, int, int, float, size_t, int, float, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgeam(size_t, int, int, int, int, double, size_t, int, double, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sdgmm(size_t, int, int, int, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemmEx(size_t, int, int, int, int, int, float, size_t, int, int, size_t, int, int, float, size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgetrfBatched(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgetrfBatched(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgetrfBatched(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgetrfBatched(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgetriBatched(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgetriBatched(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgetriBatched(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgetriBatched(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_gemmEx(size_t, int, int, int, int, int, size_t, size_t, int, int, size_t, int, int, size_t, size_t, int, int, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_stpttr(size_t, int, int, size_t, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dtpttr(size_t, int, int, size_t, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_strttp(size_t, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dtrttp(size_t, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static cuComplex __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_t_float_complex); /*proto*/
static cuDoubleComplex __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_4cupy_4cuda_6cublas_check_status(int, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "cupy.cuda.cublas"
extern int __pyx_module_is_main_cupy__cuda__cublas;
int __pyx_module_is_main_cupy__cuda__cublas = 0;

/* Implementation of 'cupy.cuda.cublas' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_super;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_AP[] = "AP";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_lda[] = "lda";
static const char __pyx_k_ldb[] = "ldb";
static const char __pyx_k_ldc[] = "ldc";
static const char __pyx_k_algo[] = "algo";
static const char __pyx_k_beta[] = "beta";
static const char __pyx_k_diag[] = "diag";
static const char __pyx_k_incx[] = "incx";
static const char __pyx_k_incy[] = "incy";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_side[] = "side";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_uplo[] = "uplo";
static const char __pyx_k_Atype[] = "Atype";
static const char __pyx_k_Btype[] = "Btype";
static const char __pyx_k_Ctype[] = "Ctype";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_trans[] = "trans";
static const char __pyx_k_Aarray[] = "Aarray";
static const char __pyx_k_Barray[] = "Barray";
static const char __pyx_k_Carray[] = "Carray";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_transa[] = "transa";
static const char __pyx_k_transb[] = "transb";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_strideA[] = "strideA";
static const char __pyx_k_strideB[] = "strideB";
static const char __pyx_k_strideC[] = "strideC";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_batchSize[] = "batchSize";
static const char __pyx_k_infoArray[] = "infoArray";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_PivotArray[] = "PivotArray";
static const char __pyx_k_batchCount[] = "batchCount";
static const char __pyx_k_CUBLASError[] = "CUBLASError";
static const char __pyx_k_computeType[] = "computeType";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_cupy_cuda_cublas[] = "cupy.cuda.cublas";
static const char __pyx_k_CUBLASError___init[] = "CUBLASError.__init__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cupy_cuda_cublas_pyx[] = "cupy/cuda/cublas.pyx";
static const char __pyx_k_CUBLAS_STATUS_SUCCESS[] = "CUBLAS_STATUS_SUCCESS";
static const char __pyx_k_Thin_wrapper_of_CUBLAS[] = "Thin wrapper of CUBLAS.";
static const char __pyx_k_CUBLAS_STATUS_ALLOC_FAILED[] = "CUBLAS_STATUS_ALLOC_FAILED";
static const char __pyx_k_CUBLAS_STATUS_ARCH_MISMATCH[] = "CUBLAS_STATUS_ARCH_MISMATCH";
static const char __pyx_k_CUBLAS_STATUS_INVALID_VALUE[] = "CUBLAS_STATUS_INVALID_VALUE";
static const char __pyx_k_CUBLAS_STATUS_LICENSE_ERROR[] = "CUBLAS_STATUS_LICENSE_ERROR";
static const char __pyx_k_CUBLAS_STATUS_MAPPING_ERROR[] = "CUBLAS_STATUS_MAPPING_ERROR";
static const char __pyx_k_CUBLAS_STATUS_NOT_SUPPORTED[] = "CUBLAS_STATUS_NOT_SUPPORTED";
static const char __pyx_k_CUBLAS_STATUS_INTERNAL_ERROR[] = "CUBLAS_STATUS_INTERNAL_ERROR";
static const char __pyx_k_CUBLAS_STATUS_NOT_INITIALIZED[] = "CUBLAS_STATUS_NOT_INITIALIZED";
static const char __pyx_k_CUBLAS_STATUS_EXECUTION_FAILED[] = "CUBLAS_STATUS_EXECUTION_FAILED";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_AP;
static PyObject *__pyx_n_s_Aarray;
static PyObject *__pyx_n_s_Atype;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_Barray;
static PyObject *__pyx_n_s_Btype;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_CUBLASError;
static PyObject *__pyx_n_s_CUBLASError___init;
static PyObject *__pyx_n_u_CUBLAS_STATUS_ALLOC_FAILED;
static PyObject *__pyx_n_u_CUBLAS_STATUS_ARCH_MISMATCH;
static PyObject *__pyx_n_u_CUBLAS_STATUS_EXECUTION_FAILED;
static PyObject *__pyx_n_u_CUBLAS_STATUS_INTERNAL_ERROR;
static PyObject *__pyx_n_u_CUBLAS_STATUS_INVALID_VALUE;
static PyObject *__pyx_n_u_CUBLAS_STATUS_LICENSE_ERROR;
static PyObject *__pyx_n_u_CUBLAS_STATUS_MAPPING_ERROR;
static PyObject *__pyx_n_u_CUBLAS_STATUS_NOT_INITIALIZED;
static PyObject *__pyx_n_u_CUBLAS_STATUS_NOT_SUPPORTED;
static PyObject *__pyx_n_u_CUBLAS_STATUS_SUCCESS;
static PyObject *__pyx_n_s_Carray;
static PyObject *__pyx_n_s_Ctype;
static PyObject *__pyx_n_s_PivotArray;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_algo;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_batchCount;
static PyObject *__pyx_n_s_batchSize;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_computeType;
static PyObject *__pyx_n_s_cupy_cuda_cublas;
static PyObject *__pyx_kp_s_cupy_cuda_cublas_pyx;
static PyObject *__pyx_n_s_diag;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_handle;
static PyObject *__pyx_n_s_incx;
static PyObject *__pyx_n_s_incy;
static PyObject *__pyx_n_s_infoArray;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_lda;
static PyObject *__pyx_n_s_ldb;
static PyObject *__pyx_n_s_ldc;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_side;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_n_s_strideA;
static PyObject *__pyx_n_s_strideB;
static PyObject *__pyx_n_s_strideC;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_trans;
static PyObject *__pyx_n_s_transa;
static PyObject *__pyx_n_s_transb;
static PyObject *__pyx_n_s_uplo;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_11CUBLASError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_check_status(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_status); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_2create(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_4destroy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_6getVersion(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_8getPointerMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_10setPointerMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_mode); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_12setStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, size_t __pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_14getStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_16setMathMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_mode); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_18getMathMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_20isamax(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_22isamin(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_24sasum(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_26saxpy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_28daxpy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_30sdot(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_32ddot(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_34cdotu(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_36cdotc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_38zdotu(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_40zdotc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_42snrm2(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_44sscal(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_46sgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, float __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_48dgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, double __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_50cgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_52zgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_54sger(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_56dger(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_58cgeru(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_60cgerc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_62zgeru(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_64zgerc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_66sgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_68dgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, double __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_70cgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_72zgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_74sgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_76dgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, double __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_78cgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_80zgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_82sgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_84dgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, double __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_86cgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_88zgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_90strsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_92dtrsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_94ctrsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_96ztrsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_98sgeam(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, float __pyx_v_beta, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_C, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_100dgeam(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, double __pyx_v_beta, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_C, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_102sdgmm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_mode, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_C, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_104sgemmEx(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_Atype, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_Btype, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_Ctype, int __pyx_v_ldc); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_106sgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_108dgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_110cgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_112zgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_114sgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_116dgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_118cgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_120zgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_122gemmEx(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_Atype, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_Btype, int __pyx_v_ldb, size_t __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_Ctype, int __pyx_v_ldc, int __pyx_v_computeType, int __pyx_v_algo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_124stpttr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_AP, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_126dtpttr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_AP, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_128strttp(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_AP); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6cublas_130dtrttp(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_AP); /* proto */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_16;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_codeobj__3;
/* Late includes */

/* "cupy/cuda/cublas.pyx":266
 * ###############################################################################
 * 
 * cdef cuComplex get_cu_complex(float complex a):             # <<<<<<<<<<<<<<
 *     cdef cuComplex ret
 *     ret.x = a.real
 */

static cuComplex __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_t_float_complex __pyx_v_a) {
  cuComplex __pyx_v_ret;
  cuComplex __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  __Pyx_RefNannySetupContext("get_cu_complex", 0);

  /* "cupy/cuda/cublas.pyx":268
 * cdef cuComplex get_cu_complex(float complex a):
 *     cdef cuComplex ret
 *     ret.x = a.real             # <<<<<<<<<<<<<<
 *     ret.y = a.imag
 *     return ret
 */
  __pyx_t_1 = __Pyx_CREAL(__pyx_v_a);
  __pyx_v_ret.x = __pyx_t_1;

  /* "cupy/cuda/cublas.pyx":269
 *     cdef cuComplex ret
 *     ret.x = a.real
 *     ret.y = a.imag             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_t_1 = __Pyx_CIMAG(__pyx_v_a);
  __pyx_v_ret.y = __pyx_t_1;

  /* "cupy/cuda/cublas.pyx":270
 *     ret.x = a.real
 *     ret.y = a.imag
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":266
 * ###############################################################################
 * 
 * cdef cuComplex get_cu_complex(float complex a):             # <<<<<<<<<<<<<<
 *     cdef cuComplex ret
 *     ret.x = a.real
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":273
 * 
 * 
 * cdef cuDoubleComplex get_cu_double_complex(double complex a):             # <<<<<<<<<<<<<<
 *     cdef cuDoubleComplex ret
 *     ret.x = a.real
 */

static cuDoubleComplex __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_t_double_complex __pyx_v_a) {
  cuDoubleComplex __pyx_v_ret;
  cuDoubleComplex __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("get_cu_double_complex", 0);

  /* "cupy/cuda/cublas.pyx":275
 * cdef cuDoubleComplex get_cu_double_complex(double complex a):
 *     cdef cuDoubleComplex ret
 *     ret.x = a.real             # <<<<<<<<<<<<<<
 *     ret.y = a.imag
 *     return ret
 */
  __pyx_t_1 = __Pyx_CREAL(__pyx_v_a);
  __pyx_v_ret.x = __pyx_t_1;

  /* "cupy/cuda/cublas.pyx":276
 *     cdef cuDoubleComplex ret
 *     ret.x = a.real
 *     ret.y = a.imag             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_t_1 = __Pyx_CIMAG(__pyx_v_a);
  __pyx_v_ret.y = __pyx_t_1;

  /* "cupy/cuda/cublas.pyx":277
 *     ret.x = a.real
 *     ret.y = a.imag
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":273
 * 
 * 
 * cdef cuDoubleComplex get_cu_double_complex(double complex a):             # <<<<<<<<<<<<<<
 *     cdef cuDoubleComplex ret
 *     ret.x = a.real
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":300
 * class CUBLASError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUBLASError, self).__init__(STATUS[status])
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_11CUBLASError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_11CUBLASError___init__[] = "CUBLASError.__init__(self, status)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6cublas_11CUBLASError_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_11CUBLASError_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_11CUBLASError___init__};
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_11CUBLASError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_status = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_status,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_status)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 300, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 300, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_status = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 300, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.CUBLASError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_11CUBLASError___init__(__pyx_self, __pyx_v_self, __pyx_v_status);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_11CUBLASError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/cublas.pyx":301
 * 
 *     def __init__(self, status):
 *         self.status = status             # <<<<<<<<<<<<<<
 *         super(CUBLASError, self).__init__(STATUS[status])
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_status, __pyx_v_status) < 0) __PYX_ERR(0, 301, __pyx_L1_error)

  /* "cupy/cuda/cublas.pyx":302
 *     def __init__(self, status):
 *         self.status = status
 *         super(CUBLASError, self).__init__(STATUS[status])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CUBLASError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_v_4cupy_4cuda_6cublas_STATUS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 302, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_4cupy_4cuda_6cublas_STATUS, __pyx_v_status); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":300
 * class CUBLASError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUBLASError, self).__init__(STATUS[status])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.cublas.CUBLASError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":306
 * 
 * @cython.profile(False)
 * cpdef inline check_status(int status):             # <<<<<<<<<<<<<<
 *     if status != 0:
 *         raise CUBLASError(status)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_1check_status(PyObject *__pyx_self, PyObject *__pyx_arg_status); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_4cupy_4cuda_6cublas_check_status(int __pyx_v_status, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("check_status", 0);

  /* "cupy/cuda/cublas.pyx":307
 * @cython.profile(False)
 * cpdef inline check_status(int status):
 *     if status != 0:             # <<<<<<<<<<<<<<
 *         raise CUBLASError(status)
 * 
 */
  __pyx_t_1 = ((__pyx_v_status != 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cupy/cuda/cublas.pyx":308
 * cpdef inline check_status(int status):
 *     if status != 0:
 *         raise CUBLASError(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CUBLASError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 308, __pyx_L1_error)

    /* "cupy/cuda/cublas.pyx":307
 * @cython.profile(False)
 * cpdef inline check_status(int status):
 *     if status != 0:             # <<<<<<<<<<<<<<
 *         raise CUBLASError(status)
 * 
 */
  }

  /* "cupy/cuda/cublas.pyx":306
 * 
 * @cython.profile(False)
 * cpdef inline check_status(int status):             # <<<<<<<<<<<<<<
 *     if status != 0:
 *         raise CUBLASError(status)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.cublas.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_1check_status(PyObject *__pyx_self, PyObject *__pyx_arg_status); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_check_status[] = "check_status(int status)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_1check_status(PyObject *__pyx_self, PyObject *__pyx_arg_status) {
  int __pyx_v_status;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_status (wrapper)", 0);
  assert(__pyx_arg_status); {
    __pyx_v_status = __Pyx_PyInt_As_int(__pyx_arg_status); if (unlikely((__pyx_v_status == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_check_status(__pyx_self, ((int)__pyx_v_status));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_check_status(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("check_status", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":315
 * ###############################################################################
 * 
 * cpdef size_t create() except? 0:             # <<<<<<<<<<<<<<
 *     cdef Handle handle
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_3create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6cublas_create(CYTHON_UNUSED int __pyx_skip_dispatch) {
  cublasHandle_t __pyx_v_handle;
  int __pyx_v_status;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("create", 0);

  /* "cupy/cuda/cublas.pyx":317
 * cpdef size_t create() except? 0:
 *     cdef Handle handle
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCreate(&handle)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":318
 *     cdef Handle handle
 *     with nogil:
 *         status = cublasCreate(&handle)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return <size_t>handle
 */
        __pyx_v_status = cublasCreate((&__pyx_v_handle));
      }

      /* "cupy/cuda/cublas.pyx":317
 * cpdef size_t create() except? 0:
 *     cdef Handle handle
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCreate(&handle)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":319
 *     with nogil:
 *         status = cublasCreate(&handle)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return <size_t>handle
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":320
 *         status = cublasCreate(&handle)
 *     check_status(status)
 *     return <size_t>handle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((size_t)__pyx_v_handle);
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":315
 * ###############################################################################
 * 
 * cpdef size_t create() except? 0:             # <<<<<<<<<<<<<<
 *     cdef Handle handle
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_3create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_2create[] = "create() -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_3create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_2create(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_2create(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_create(0); if (unlikely(__pyx_t_1 == ((size_t)0) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":323
 * 
 * 
 * cpdef destroy(size_t handle):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDestroy(<Handle>handle)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_5destroy(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_destroy(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("destroy", 0);

  /* "cupy/cuda/cublas.pyx":324
 * 
 * cpdef destroy(size_t handle):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDestroy(<Handle>handle)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":325
 * cpdef destroy(size_t handle):
 *     with nogil:
 *         status = cublasDestroy(<Handle>handle)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cublasDestroy(((cublasHandle_t)__pyx_v_handle));
      }

      /* "cupy/cuda/cublas.pyx":324
 * 
 * cpdef destroy(size_t handle):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDestroy(<Handle>handle)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":326
 *     with nogil:
 *         status = cublasDestroy(<Handle>handle)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":323
 * 
 * 
 * cpdef destroy(size_t handle):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDestroy(<Handle>handle)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_5destroy(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_4destroy[] = "destroy(size_t handle)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_5destroy(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_4destroy(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_4destroy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("destroy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_destroy(__pyx_v_handle, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":329
 * 
 * 
 * cpdef int getVersion(size_t handle) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int version
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_7getVersion(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_getVersion(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_version;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getVersion", 0);

  /* "cupy/cuda/cublas.pyx":331
 * cpdef int getVersion(size_t handle) except? -1:
 *     cdef int version
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetVersion(<Handle>handle, &version)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":332
 *     cdef int version
 *     with nogil:
 *         status = cublasGetVersion(<Handle>handle, &version)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return version
 */
        __pyx_v_status = cublasGetVersion(((cublasHandle_t)__pyx_v_handle), (&__pyx_v_version));
      }

      /* "cupy/cuda/cublas.pyx":331
 * cpdef int getVersion(size_t handle) except? -1:
 *     cdef int version
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetVersion(<Handle>handle, &version)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":333
 *     with nogil:
 *         status = cublasGetVersion(<Handle>handle, &version)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return version
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":334
 *         status = cublasGetVersion(<Handle>handle, &version)
 *     check_status(status)
 *     return version             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_version;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":329
 * 
 * 
 * cpdef int getVersion(size_t handle) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int version
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.getVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_7getVersion(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_6getVersion[] = "getVersion(size_t handle) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_7getVersion(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVersion (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.getVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_6getVersion(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_6getVersion(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getVersion", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_getVersion(__pyx_v_handle, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.getVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":337
 * 
 * 
 * cpdef int getPointerMode(size_t handle) except? -1:             # <<<<<<<<<<<<<<
 *     cdef PointerMode mode
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_9getPointerMode(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_getPointerMode(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cublasPointerMode_t __pyx_v_mode;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPointerMode", 0);

  /* "cupy/cuda/cublas.pyx":339
 * cpdef int getPointerMode(size_t handle) except? -1:
 *     cdef PointerMode mode
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetPointerMode(<Handle>handle, &mode)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":340
 *     cdef PointerMode mode
 *     with nogil:
 *         status = cublasGetPointerMode(<Handle>handle, &mode)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return mode
 */
        __pyx_v_status = cublasGetPointerMode(((cublasHandle_t)__pyx_v_handle), (&__pyx_v_mode));
      }

      /* "cupy/cuda/cublas.pyx":339
 * cpdef int getPointerMode(size_t handle) except? -1:
 *     cdef PointerMode mode
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetPointerMode(<Handle>handle, &mode)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":341
 *     with nogil:
 *         status = cublasGetPointerMode(<Handle>handle, &mode)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return mode
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":342
 *         status = cublasGetPointerMode(<Handle>handle, &mode)
 *     check_status(status)
 *     return mode             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_mode;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":337
 * 
 * 
 * cpdef int getPointerMode(size_t handle) except? -1:             # <<<<<<<<<<<<<<
 *     cdef PointerMode mode
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.getPointerMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_9getPointerMode(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_8getPointerMode[] = "getPointerMode(size_t handle) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_9getPointerMode(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPointerMode (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.getPointerMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_8getPointerMode(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_8getPointerMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getPointerMode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_getPointerMode(__pyx_v_handle, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.getPointerMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":345
 * 
 * 
 * cpdef setPointerMode(size_t handle, int mode):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSetPointerMode(<Handle>handle, <PointerMode>mode)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_11setPointerMode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_setPointerMode(size_t __pyx_v_handle, int __pyx_v_mode, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setPointerMode", 0);

  /* "cupy/cuda/cublas.pyx":346
 * 
 * cpdef setPointerMode(size_t handle, int mode):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSetPointerMode(<Handle>handle, <PointerMode>mode)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":347
 * cpdef setPointerMode(size_t handle, int mode):
 *     with nogil:
 *         status = cublasSetPointerMode(<Handle>handle, <PointerMode>mode)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cublasSetPointerMode(((cublasHandle_t)__pyx_v_handle), ((cublasPointerMode_t)__pyx_v_mode));
      }

      /* "cupy/cuda/cublas.pyx":346
 * 
 * cpdef setPointerMode(size_t handle, int mode):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSetPointerMode(<Handle>handle, <PointerMode>mode)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":348
 *     with nogil:
 *         status = cublasSetPointerMode(<Handle>handle, <PointerMode>mode)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":345
 * 
 * 
 * cpdef setPointerMode(size_t handle, int mode):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSetPointerMode(<Handle>handle, <PointerMode>mode)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.setPointerMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_11setPointerMode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_10setPointerMode[] = "setPointerMode(size_t handle, int mode)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_11setPointerMode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_mode;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPointerMode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_mode,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setPointerMode", 1, 2, 2, 1); __PYX_ERR(0, 345, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPointerMode") < 0)) __PYX_ERR(0, 345, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    __pyx_v_mode = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mode == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPointerMode", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.setPointerMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_10setPointerMode(__pyx_self, __pyx_v_handle, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_10setPointerMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setPointerMode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setPointerMode(__pyx_v_handle, __pyx_v_mode, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.setPointerMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":355
 * ###############################################################################
 * 
 * cpdef setStream(size_t handle, size_t stream):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSetStream(<Handle>handle, <driver.Stream>stream)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_13setStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_setStream(size_t __pyx_v_handle, size_t __pyx_v_stream, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setStream", 0);

  /* "cupy/cuda/cublas.pyx":356
 * 
 * cpdef setStream(size_t handle, size_t stream):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSetStream(<Handle>handle, <driver.Stream>stream)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":357
 * cpdef setStream(size_t handle, size_t stream):
 *     with nogil:
 *         status = cublasSetStream(<Handle>handle, <driver.Stream>stream)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cublasSetStream(((cublasHandle_t)__pyx_v_handle), ((struct CUstream_st*)__pyx_v_stream));
      }

      /* "cupy/cuda/cublas.pyx":356
 * 
 * cpdef setStream(size_t handle, size_t stream):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSetStream(<Handle>handle, <driver.Stream>stream)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":358
 *     with nogil:
 *         status = cublasSetStream(<Handle>handle, <driver.Stream>stream)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":355
 * ###############################################################################
 * 
 * cpdef setStream(size_t handle, size_t stream):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSetStream(<Handle>handle, <driver.Stream>stream)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.setStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_13setStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_12setStream[] = "setStream(size_t handle, size_t stream)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_13setStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  size_t __pyx_v_stream;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setStream (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_stream,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setStream", 1, 2, 2, 1); __PYX_ERR(0, 355, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setStream") < 0)) __PYX_ERR(0, 355, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
    __pyx_v_stream = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_stream == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setStream", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 355, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.setStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_12setStream(__pyx_self, __pyx_v_handle, __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_12setStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, size_t __pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setStream", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_v_stream, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.setStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":361
 * 
 * 
 * cpdef size_t getStream(size_t handle) except? 0:             # <<<<<<<<<<<<<<
 *     cdef driver.Stream stream
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_15getStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6cublas_getStream(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct CUstream_st* __pyx_v_stream;
  int __pyx_v_status;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getStream", 0);

  /* "cupy/cuda/cublas.pyx":363
 * cpdef size_t getStream(size_t handle) except? 0:
 *     cdef driver.Stream stream
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetStream(<Handle>handle, &stream)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":364
 *     cdef driver.Stream stream
 *     with nogil:
 *         status = cublasGetStream(<Handle>handle, &stream)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return <size_t>stream
 */
        __pyx_v_status = cublasGetStream(((cublasHandle_t)__pyx_v_handle), (&__pyx_v_stream));
      }

      /* "cupy/cuda/cublas.pyx":363
 * cpdef size_t getStream(size_t handle) except? 0:
 *     cdef driver.Stream stream
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetStream(<Handle>handle, &stream)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":365
 *     with nogil:
 *         status = cublasGetStream(<Handle>handle, &stream)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return <size_t>stream
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":366
 *         status = cublasGetStream(<Handle>handle, &stream)
 *     check_status(status)
 *     return <size_t>stream             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((size_t)__pyx_v_stream);
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":361
 * 
 * 
 * cpdef size_t getStream(size_t handle) except? 0:             # <<<<<<<<<<<<<<
 *     cdef driver.Stream stream
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.getStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_15getStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_14getStream[] = "getStream(size_t handle) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_15getStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStream (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.getStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_14getStream(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_14getStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getStream", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_getStream(__pyx_v_handle, 0); if (unlikely(__pyx_t_1 == ((size_t)0) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.getStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":373
 * ###############################################################################
 * 
 * cpdef setMathMode(size_t handle, int mode):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSetMathMode(<Handle>handle, <Math>mode)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_17setMathMode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_setMathMode(size_t __pyx_v_handle, int __pyx_v_mode, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setMathMode", 0);

  /* "cupy/cuda/cublas.pyx":374
 * 
 * cpdef setMathMode(size_t handle, int mode):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSetMathMode(<Handle>handle, <Math>mode)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":375
 * cpdef setMathMode(size_t handle, int mode):
 *     with nogil:
 *         status = cublasSetMathMode(<Handle>handle, <Math>mode)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cublasSetMathMode(((cublasHandle_t)__pyx_v_handle), ((cublasMath_t)__pyx_v_mode));
      }

      /* "cupy/cuda/cublas.pyx":374
 * 
 * cpdef setMathMode(size_t handle, int mode):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSetMathMode(<Handle>handle, <Math>mode)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":376
 *     with nogil:
 *         status = cublasSetMathMode(<Handle>handle, <Math>mode)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":373
 * ###############################################################################
 * 
 * cpdef setMathMode(size_t handle, int mode):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSetMathMode(<Handle>handle, <Math>mode)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.setMathMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_17setMathMode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_16setMathMode[] = "setMathMode(size_t handle, int mode)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_17setMathMode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_mode;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMathMode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_mode,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMathMode", 1, 2, 2, 1); __PYX_ERR(0, 373, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMathMode") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
    __pyx_v_mode = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mode == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMathMode", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.setMathMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_16setMathMode(__pyx_self, __pyx_v_handle, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_16setMathMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setMathMode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setMathMode(__pyx_v_handle, __pyx_v_mode, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.setMathMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":379
 * 
 * 
 * cpdef int getMathMode(size_t handle) except? -1:             # <<<<<<<<<<<<<<
 *     cdef Math mode
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_19getMathMode(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_getMathMode(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cublasMath_t __pyx_v_mode;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getMathMode", 0);

  /* "cupy/cuda/cublas.pyx":381
 * cpdef int getMathMode(size_t handle) except? -1:
 *     cdef Math mode
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetMathMode(<Handle>handle, &mode)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":382
 *     cdef Math mode
 *     with nogil:
 *         status = cublasGetMathMode(<Handle>handle, &mode)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return <int>mode
 */
        __pyx_v_status = cublasGetMathMode(((cublasHandle_t)__pyx_v_handle), (&__pyx_v_mode));
      }

      /* "cupy/cuda/cublas.pyx":381
 * cpdef int getMathMode(size_t handle) except? -1:
 *     cdef Math mode
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGetMathMode(<Handle>handle, &mode)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":383
 *     with nogil:
 *         status = cublasGetMathMode(<Handle>handle, &mode)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return <int>mode
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":384
 *         status = cublasGetMathMode(<Handle>handle, &mode)
 *     check_status(status)
 *     return <int>mode             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((int)__pyx_v_mode);
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":379
 * 
 * 
 * cpdef int getMathMode(size_t handle) except? -1:             # <<<<<<<<<<<<<<
 *     cdef Math mode
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.getMathMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_19getMathMode(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_18getMathMode[] = "getMathMode(size_t handle) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_19getMathMode(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMathMode (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 379, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.getMathMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_18getMathMode(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_18getMathMode(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getMathMode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_getMathMode(__pyx_v_handle, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 379, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.getMathMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":391
 * ###############################################################################
 * 
 * cpdef int isamax(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_21isamax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_isamax(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_result;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isamax", 0);

  /* "cupy/cuda/cublas.pyx":393
 * cpdef int isamax(size_t handle, int n, size_t x, int incx) except? 0:
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasIsamax(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":394
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasIsamax(
 *             <Handle>handle, n, <float*>x, incx, &result)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":395
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasIsamax(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 */
        __pyx_v_status = cublasIsamax(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((float *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":394
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasIsamax(
 *             <Handle>handle, n, <float*>x, incx, &result)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":397
 *         status = cublasIsamax(
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":398
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":391
 * ###############################################################################
 * 
 * cpdef int isamax(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.isamax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_21isamax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_20isamax[] = "isamax(size_t handle, int n, size_t x, int incx) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_21isamax(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isamax (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isamax", 1, 4, 4, 1); __PYX_ERR(0, 391, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isamax", 1, 4, 4, 2); __PYX_ERR(0, 391, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isamax", 1, 4, 4, 3); __PYX_ERR(0, 391, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isamax") < 0)) __PYX_ERR(0, 391, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isamax", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 391, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.isamax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_20isamax(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_20isamax(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isamax", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_isamax(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, 0); if (unlikely(__pyx_t_1 == ((int)0) && PyErr_Occurred())) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.isamax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":401
 * 
 * 
 * cpdef int isamin(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_23isamin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_6cublas_isamin(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_result;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isamin", 0);

  /* "cupy/cuda/cublas.pyx":403
 * cpdef int isamin(size_t handle, int n, size_t x, int incx) except? 0:
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasIsamin(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":404
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasIsamin(
 *             <Handle>handle, n, <float*>x, incx, &result)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":405
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasIsamin(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 */
        __pyx_v_status = cublasIsamin(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((float *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":404
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasIsamin(
 *             <Handle>handle, n, <float*>x, incx, &result)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":407
 *         status = cublasIsamin(
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":408
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":401
 * 
 * 
 * cpdef int isamin(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef int result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.isamin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_23isamin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_22isamin[] = "isamin(size_t handle, int n, size_t x, int incx) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_23isamin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isamin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isamin", 1, 4, 4, 1); __PYX_ERR(0, 401, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isamin", 1, 4, 4, 2); __PYX_ERR(0, 401, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isamin", 1, 4, 4, 3); __PYX_ERR(0, 401, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isamin") < 0)) __PYX_ERR(0, 401, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 401, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 401, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 401, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 401, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isamin", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 401, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.isamin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_22isamin(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_22isamin(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isamin", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_isamin(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, 0); if (unlikely(__pyx_t_1 == ((int)0) && PyErr_Occurred())) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.isamin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":411
 * 
 * 
 * cpdef float sasum(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_25sasum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static float __pyx_f_4cupy_4cuda_6cublas_sasum(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, CYTHON_UNUSED int __pyx_skip_dispatch) {
  float __pyx_v_result;
  int __pyx_v_status;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sasum", 0);

  /* "cupy/cuda/cublas.pyx":413
 * cpdef float sasum(size_t handle, int n, size_t x, int incx) except? 0:
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSasum(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":414
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSasum(
 *             <Handle>handle, n, <float*>x, incx, &result)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":415
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSasum(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 */
        __pyx_v_status = cublasSasum(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((float *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":414
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSasum(
 *             <Handle>handle, n, <float*>x, incx, &result)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":417
 *         status = cublasSasum(
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":418
 *             <Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":411
 * 
 * 
 * cpdef float sasum(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sasum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0.0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_25sasum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_24sasum[] = "sasum(size_t handle, int n, size_t x, int incx) -> float";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_25sasum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sasum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sasum", 1, 4, 4, 1); __PYX_ERR(0, 411, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sasum", 1, 4, 4, 2); __PYX_ERR(0, 411, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sasum", 1, 4, 4, 3); __PYX_ERR(0, 411, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sasum") < 0)) __PYX_ERR(0, 411, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sasum", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 411, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sasum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_24sasum(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_24sasum(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sasum", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sasum(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, 0); if (unlikely(__pyx_t_1 == ((float)0.0) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.sasum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":421
 * 
 * 
 * cpdef saxpy(size_t handle, int n, float alpha, size_t x, int incx, size_t y,             # <<<<<<<<<<<<<<
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_27saxpy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_saxpy(size_t __pyx_v_handle, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("saxpy", 0);

  /* "cupy/cuda/cublas.pyx":423
 * cpdef saxpy(size_t handle, int n, float alpha, size_t x, int incx, size_t y,
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSaxpy(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":424
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSaxpy(
 *             <Handle>handle, n, &alpha, <float*>x, incx, <float*>y, incy)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":425
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSaxpy(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, &alpha, <float*>x, incx, <float*>y, incy)
 *     check_status(status)
 */
        __pyx_v_status = cublasSaxpy(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, (&__pyx_v_alpha), ((float *)__pyx_v_x), __pyx_v_incx, ((float *)__pyx_v_y), __pyx_v_incy);
      }

      /* "cupy/cuda/cublas.pyx":424
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSaxpy(
 *             <Handle>handle, n, &alpha, <float*>x, incx, <float*>y, incy)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":427
 *         status = cublasSaxpy(
 *             <Handle>handle, n, &alpha, <float*>x, incx, <float*>y, incy)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":421
 * 
 * 
 * cpdef saxpy(size_t handle, int n, float alpha, size_t x, int incx, size_t y,             # <<<<<<<<<<<<<<
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.saxpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_27saxpy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_26saxpy[] = "saxpy(size_t handle, int n, float alpha, size_t x, int incx, size_t y, int incy)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_27saxpy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  float __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("saxpy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("saxpy", 1, 7, 7, 1); __PYX_ERR(0, 421, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("saxpy", 1, 7, 7, 2); __PYX_ERR(0, 421, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("saxpy", 1, 7, 7, 3); __PYX_ERR(0, 421, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("saxpy", 1, 7, 7, 4); __PYX_ERR(0, 421, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("saxpy", 1, 7, 7, 5); __PYX_ERR(0, 421, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("saxpy", 1, 7, 7, 6); __PYX_ERR(0, 421, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "saxpy") < 0)) __PYX_ERR(0, 421, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("saxpy", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 421, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.saxpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_26saxpy(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_26saxpy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("saxpy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_saxpy(__pyx_v_handle, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.saxpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":430
 * 
 * 
 * cpdef daxpy(size_t handle, int n, double alpha, size_t x, int incx, size_t y,             # <<<<<<<<<<<<<<
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_29daxpy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_daxpy(size_t __pyx_v_handle, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("daxpy", 0);

  /* "cupy/cuda/cublas.pyx":432
 * cpdef daxpy(size_t handle, int n, double alpha, size_t x, int incx, size_t y,
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDaxpy(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":433
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDaxpy(
 *             <Handle>handle, n, &alpha, <double*>x, incx, <double*>y, incy)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":434
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDaxpy(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, &alpha, <double*>x, incx, <double*>y, incy)
 *     check_status(status)
 */
        __pyx_v_status = cublasDaxpy(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, (&__pyx_v_alpha), ((double *)__pyx_v_x), __pyx_v_incx, ((double *)__pyx_v_y), __pyx_v_incy);
      }

      /* "cupy/cuda/cublas.pyx":433
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDaxpy(
 *             <Handle>handle, n, &alpha, <double*>x, incx, <double*>y, incy)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":436
 *         status = cublasDaxpy(
 *             <Handle>handle, n, &alpha, <double*>x, incx, <double*>y, incy)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":430
 * 
 * 
 * cpdef daxpy(size_t handle, int n, double alpha, size_t x, int incx, size_t y,             # <<<<<<<<<<<<<<
 *             int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.daxpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_29daxpy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_28daxpy[] = "daxpy(size_t handle, int n, double alpha, size_t x, int incx, size_t y, int incy)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_29daxpy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  double __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("daxpy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("daxpy", 1, 7, 7, 1); __PYX_ERR(0, 430, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("daxpy", 1, 7, 7, 2); __PYX_ERR(0, 430, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("daxpy", 1, 7, 7, 3); __PYX_ERR(0, 430, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("daxpy", 1, 7, 7, 4); __PYX_ERR(0, 430, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("daxpy", 1, 7, 7, 5); __PYX_ERR(0, 430, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("daxpy", 1, 7, 7, 6); __PYX_ERR(0, 430, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "daxpy") < 0)) __PYX_ERR(0, 430, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("daxpy", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 430, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.daxpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_28daxpy(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_28daxpy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("daxpy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_daxpy(__pyx_v_handle, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.daxpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":439
 * 
 * 
 * cpdef sdot(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_31sdot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sdot(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sdot", 0);

  /* "cupy/cuda/cublas.pyx":441
 * cpdef sdot(size_t handle, int n, size_t x, int incx, size_t y, int incy,
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSdot(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":442
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSdot(
 *             <Handle>handle, n, <float*>x, incx, <float*>y, incy,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":443
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSdot(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <float*>x, incx, <float*>y, incy,
 *             <float*>result)
 */
        __pyx_v_status = cublasSdot(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((float *)__pyx_v_x), __pyx_v_incx, ((float *)__pyx_v_y), __pyx_v_incy, ((float *)__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":442
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSdot(
 *             <Handle>handle, n, <float*>x, incx, <float*>y, incy,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":446
 *             <Handle>handle, n, <float*>x, incx, <float*>y, incy,
 *             <float*>result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":439
 * 
 * 
 * cpdef sdot(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_31sdot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_30sdot[] = "sdot(size_t handle, int n, size_t x, int incx, size_t y, int incy, size_t result)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_31sdot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sdot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_result,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdot", 1, 7, 7, 1); __PYX_ERR(0, 439, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdot", 1, 7, 7, 2); __PYX_ERR(0, 439, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdot", 1, 7, 7, 3); __PYX_ERR(0, 439, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdot", 1, 7, 7, 4); __PYX_ERR(0, 439, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdot", 1, 7, 7, 5); __PYX_ERR(0, 439, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdot", 1, 7, 7, 6); __PYX_ERR(0, 439, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sdot") < 0)) __PYX_ERR(0, 439, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_result = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_result == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sdot", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 439, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_30sdot(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_30sdot(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sdot", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sdot(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":449
 * 
 * 
 * cpdef ddot(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_33ddot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_ddot(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ddot", 0);

  /* "cupy/cuda/cublas.pyx":451
 * cpdef ddot(size_t handle, int n, size_t x, int incx, size_t y, int incy,
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDdot(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":452
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDdot(
 *             <Handle>handle, n, <double*>x, incx, <double*>y, incy,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":453
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDdot(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <double*>x, incx, <double*>y, incy,
 *             <double*>result)
 */
        __pyx_v_status = cublasDdot(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((double *)__pyx_v_x), __pyx_v_incx, ((double *)__pyx_v_y), __pyx_v_incy, ((double *)__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":452
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDdot(
 *             <Handle>handle, n, <double*>x, incx, <double*>y, incy,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":456
 *             <Handle>handle, n, <double*>x, incx, <double*>y, incy,
 *             <double*>result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":449
 * 
 * 
 * cpdef ddot(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *            size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.ddot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_33ddot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_32ddot[] = "ddot(size_t handle, int n, size_t x, int incx, size_t y, int incy, size_t result)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_33ddot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ddot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_result,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ddot", 1, 7, 7, 1); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ddot", 1, 7, 7, 2); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ddot", 1, 7, 7, 3); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ddot", 1, 7, 7, 4); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ddot", 1, 7, 7, 5); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ddot", 1, 7, 7, 6); __PYX_ERR(0, 449, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ddot") < 0)) __PYX_ERR(0, 449, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
    __pyx_v_result = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_result == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 450, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ddot", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 449, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.ddot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_32ddot(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_32ddot(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ddot", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_ddot(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.ddot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":459
 * 
 * 
 * cpdef cdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_35cdotu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cdotu(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cdotu", 0);

  /* "cupy/cuda/cublas.pyx":461
 * cpdef cdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy,
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCdotu(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":462
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCdotu(
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":463
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCdotu(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 *             <cuComplex*>result)
 */
        __pyx_v_status = cublasCdotu(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuComplex *)__pyx_v_x), __pyx_v_incx, ((cuComplex *)__pyx_v_y), __pyx_v_incy, ((cuComplex *)__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":462
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCdotu(
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":466
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 *             <cuComplex*>result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":459
 * 
 * 
 * cpdef cdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cdotu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_35cdotu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_34cdotu[] = "cdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy, size_t result)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_35cdotu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cdotu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_result,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotu", 1, 7, 7, 1); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotu", 1, 7, 7, 2); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotu", 1, 7, 7, 3); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotu", 1, 7, 7, 4); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotu", 1, 7, 7, 5); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotu", 1, 7, 7, 6); __PYX_ERR(0, 459, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cdotu") < 0)) __PYX_ERR(0, 459, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
    __pyx_v_result = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_result == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cdotu", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 459, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cdotu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_34cdotu(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_34cdotu(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cdotu", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cdotu(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cdotu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":469
 * 
 * 
 * cpdef cdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_37cdotc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cdotc(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cdotc", 0);

  /* "cupy/cuda/cublas.pyx":471
 * cpdef cdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy,
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCdotc(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":472
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCdotc(
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":473
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCdotc(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 *             <cuComplex*>result)
 */
        __pyx_v_status = cublasCdotc(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuComplex *)__pyx_v_x), __pyx_v_incx, ((cuComplex *)__pyx_v_y), __pyx_v_incy, ((cuComplex *)__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":472
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCdotc(
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":476
 *             <Handle>handle, n, <cuComplex*>x, incx, <cuComplex*>y, incy,
 *             <cuComplex*>result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":469
 * 
 * 
 * cpdef cdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cdotc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_37cdotc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_36cdotc[] = "cdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy, size_t result)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_37cdotc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cdotc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_result,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotc", 1, 7, 7, 1); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotc", 1, 7, 7, 2); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotc", 1, 7, 7, 3); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotc", 1, 7, 7, 4); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotc", 1, 7, 7, 5); __PYX_ERR(0, 469, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cdotc", 1, 7, 7, 6); __PYX_ERR(0, 469, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cdotc") < 0)) __PYX_ERR(0, 469, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L3_error)
    __pyx_v_result = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_result == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 470, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cdotc", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 469, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cdotc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_36cdotc(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_36cdotc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cdotc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cdotc(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cdotc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":479
 * 
 * 
 * cpdef zdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_39zdotu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zdotu(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zdotu", 0);

  /* "cupy/cuda/cublas.pyx":481
 * cpdef zdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy,
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZdotu(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":482
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZdotu(
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":483
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZdotu(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 *             <cuDoubleComplex*>y, incy, <cuDoubleComplex*>result)
 */
        __pyx_v_status = cublasZdotu(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuDoubleComplex *)__pyx_v_x), __pyx_v_incx, ((cuDoubleComplex *)__pyx_v_y), __pyx_v_incy, ((cuDoubleComplex *)__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":482
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZdotu(
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":486
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 *             <cuDoubleComplex*>y, incy, <cuDoubleComplex*>result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":479
 * 
 * 
 * cpdef zdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zdotu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_39zdotu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_38zdotu[] = "zdotu(size_t handle, int n, size_t x, int incx, size_t y, int incy, size_t result)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_39zdotu(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zdotu (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_result,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotu", 1, 7, 7, 1); __PYX_ERR(0, 479, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotu", 1, 7, 7, 2); __PYX_ERR(0, 479, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotu", 1, 7, 7, 3); __PYX_ERR(0, 479, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotu", 1, 7, 7, 4); __PYX_ERR(0, 479, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotu", 1, 7, 7, 5); __PYX_ERR(0, 479, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotu", 1, 7, 7, 6); __PYX_ERR(0, 479, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zdotu") < 0)) __PYX_ERR(0, 479, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L3_error)
    __pyx_v_result = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_result == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zdotu", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 479, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zdotu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_38zdotu(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_38zdotu(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zdotu", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zdotu(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zdotu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":489
 * 
 * 
 * cpdef zdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_41zdotc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zdotc(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zdotc", 0);

  /* "cupy/cuda/cublas.pyx":491
 * cpdef zdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy,
 *             size_t result):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZdotc(
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":492
 *             size_t result):
 *     with nogil:
 *         status = cublasZdotc(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 *             <cuDoubleComplex*>y, incy, <cuDoubleComplex*>result)
 */
        __pyx_v_status = cublasZdotc(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuDoubleComplex *)__pyx_v_x), __pyx_v_incx, ((cuDoubleComplex *)__pyx_v_y), __pyx_v_incy, ((cuDoubleComplex *)__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":491
 * cpdef zdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy,
 *             size_t result):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZdotc(
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":495
 *             <Handle>handle, n, <cuDoubleComplex*>x, incx,
 *             <cuDoubleComplex*>y, incy, <cuDoubleComplex*>result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":489
 * 
 * 
 * cpdef zdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy,             # <<<<<<<<<<<<<<
 *             size_t result):
 *     with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zdotc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_41zdotc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_40zdotc[] = "zdotc(size_t handle, int n, size_t x, int incx, size_t y, int incy, size_t result)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_41zdotc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zdotc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_result,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotc", 1, 7, 7, 1); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotc", 1, 7, 7, 2); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotc", 1, 7, 7, 3); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotc", 1, 7, 7, 4); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotc", 1, 7, 7, 5); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zdotc", 1, 7, 7, 6); __PYX_ERR(0, 489, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zdotc") < 0)) __PYX_ERR(0, 489, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L3_error)
    __pyx_v_result = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_result == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zdotc", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 489, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zdotc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_40zdotc(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_40zdotc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zdotc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zdotc(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_result, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zdotc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":498
 * 
 * 
 * cpdef float snrm2(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_43snrm2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static float __pyx_f_4cupy_4cuda_6cublas_snrm2(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx, CYTHON_UNUSED int __pyx_skip_dispatch) {
  float __pyx_v_result;
  int __pyx_v_status;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("snrm2", 0);

  /* "cupy/cuda/cublas.pyx":500
 * cpdef float snrm2(size_t handle, int n, size_t x, int incx) except? 0:
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSnrm2(<Handle>handle, n, <float*>x, incx, &result)
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":501
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSnrm2(<Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":502
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSnrm2(<Handle>handle, n, <float*>x, incx, &result)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return result
 */
        __pyx_v_status = cublasSnrm2(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((float *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_result));
      }

      /* "cupy/cuda/cublas.pyx":501
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSnrm2(<Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":503
 *     with nogil:
 *         status = cublasSnrm2(<Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":504
 *         status = cublasSnrm2(<Handle>handle, n, <float*>x, incx, &result)
 *     check_status(status)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "cupy/cuda/cublas.pyx":498
 * 
 * 
 * cpdef float snrm2(size_t handle, int n, size_t x, int incx) except? 0:             # <<<<<<<<<<<<<<
 *     cdef float result
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.snrm2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0.0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_43snrm2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_42snrm2[] = "snrm2(size_t handle, int n, size_t x, int incx) -> float";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_43snrm2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("snrm2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_x,&__pyx_n_s_incx,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("snrm2", 1, 4, 4, 1); __PYX_ERR(0, 498, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("snrm2", 1, 4, 4, 2); __PYX_ERR(0, 498, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("snrm2", 1, 4, 4, 3); __PYX_ERR(0, 498, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "snrm2") < 0)) __PYX_ERR(0, 498, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("snrm2", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 498, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.snrm2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_42snrm2(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_42snrm2(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_x, int __pyx_v_incx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("snrm2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_snrm2(__pyx_v_handle, __pyx_v_n, __pyx_v_x, __pyx_v_incx, 0); if (unlikely(__pyx_t_1 == ((float)0.0) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cublas.snrm2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":507
 * 
 * 
 * cpdef sscal(size_t handle, int n, float alpha, size_t x, int incx):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_45sscal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sscal(size_t __pyx_v_handle, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sscal", 0);

  /* "cupy/cuda/cublas.pyx":508
 * 
 * cpdef sscal(size_t handle, int n, float alpha, size_t x, int incx):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSscal(<Handle>handle, n, &alpha, <float*>x, incx)
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":509
 * cpdef sscal(size_t handle, int n, float alpha, size_t x, int incx):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSscal(<Handle>handle, n, &alpha, <float*>x, incx)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":510
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSscal(<Handle>handle, n, &alpha, <float*>x, incx)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cublasSscal(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, (&__pyx_v_alpha), ((float *)__pyx_v_x), __pyx_v_incx);
      }

      /* "cupy/cuda/cublas.pyx":509
 * cpdef sscal(size_t handle, int n, float alpha, size_t x, int incx):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSscal(<Handle>handle, n, &alpha, <float*>x, incx)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":511
 *     with nogil:
 *         status = cublasSscal(<Handle>handle, n, &alpha, <float*>x, incx)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":507
 * 
 * 
 * cpdef sscal(size_t handle, int n, float alpha, size_t x, int incx):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sscal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_45sscal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_44sscal[] = "sscal(size_t handle, int n, float alpha, size_t x, int incx)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_45sscal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  float __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sscal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sscal", 1, 5, 5, 1); __PYX_ERR(0, 507, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sscal", 1, 5, 5, 2); __PYX_ERR(0, 507, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sscal", 1, 5, 5, 3); __PYX_ERR(0, 507, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sscal", 1, 5, 5, 4); __PYX_ERR(0, 507, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sscal") < 0)) __PYX_ERR(0, 507, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sscal", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 507, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sscal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_44sscal(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_44sscal(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sscal", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sscal(__pyx_v_handle, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sscal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":518
 * ###############################################################################
 * 
 * cpdef sgemv(size_t handle, int trans, int m, int n, float alpha, size_t A,             # <<<<<<<<<<<<<<
 *             int lda, size_t x, int incx, float beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_47sgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemv(size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, float __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemv", 0);

  /* "cupy/cuda/cublas.pyx":520
 * cpdef sgemv(size_t handle, int trans, int m, int n, float alpha, size_t A,
 *             int lda, size_t x, int incx, float beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgemv(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":521
 *             int lda, size_t x, int incx, float beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemv(
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":522
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgemv(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 *             <float*>A, lda, <float*>x, incx, &beta, <float*>y, incy)
 */
        __pyx_v_status = cublasSgemv(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_beta), ((float *)__pyx_v_y), __pyx_v_incy);
      }

      /* "cupy/cuda/cublas.pyx":521
 *             int lda, size_t x, int incx, float beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemv(
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":525
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 *             <float*>A, lda, <float*>x, incx, &beta, <float*>y, incy)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":518
 * ###############################################################################
 * 
 * cpdef sgemv(size_t handle, int trans, int m, int n, float alpha, size_t A,             # <<<<<<<<<<<<<<
 *             int lda, size_t x, int incx, float beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_47sgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_46sgemv[] = "sgemv(size_t handle, int trans, int m, int n, float alpha, size_t A, int lda, size_t x, int incx, float beta, size_t y, int incy)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_47sgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  float __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  float __pyx_v_beta;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgemv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_beta,&__pyx_n_s_y,&__pyx_n_s_incy,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 1); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 2); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 3); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 4); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 5); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 6); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 7); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 8); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 9); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 10); __PYX_ERR(0, 518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, 11); __PYX_ERR(0, 518, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgemv") < 0)) __PYX_ERR(0, 518, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 519, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgemv", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 518, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_46sgemv(__pyx_self, __pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_46sgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, float __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemv", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgemv(__pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":528
 * 
 * 
 * cpdef dgemv(size_t handle, int trans, int m, int n, double alpha, size_t A,             # <<<<<<<<<<<<<<
 *             int lda, size_t x, int incx, double beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_49dgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemv(size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, double __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemv", 0);

  /* "cupy/cuda/cublas.pyx":530
 * cpdef dgemv(size_t handle, int trans, int m, int n, double alpha, size_t A,
 *             int lda, size_t x, int incx, double beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDgemv(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":531
 *             int lda, size_t x, int incx, double beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemv(
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":532
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDgemv(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 *             <double*>A, lda, <double*>x, incx, &beta, <double*>y, incy)
 */
        __pyx_v_status = cublasDgemv(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_beta), ((double *)__pyx_v_y), __pyx_v_incy);
      }

      /* "cupy/cuda/cublas.pyx":531
 *             int lda, size_t x, int incx, double beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemv(
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":535
 *             <Handle>handle, <Operation>trans, m, n, &alpha,
 *             <double*>A, lda, <double*>x, incx, &beta, <double*>y, incy)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":528
 * 
 * 
 * cpdef dgemv(size_t handle, int trans, int m, int n, double alpha, size_t A,             # <<<<<<<<<<<<<<
 *             int lda, size_t x, int incx, double beta, size_t y, int incy):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_49dgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_48dgemv[] = "dgemv(size_t handle, int trans, int m, int n, double alpha, size_t A, int lda, size_t x, int incx, double beta, size_t y, int incy)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_49dgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  double __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  double __pyx_v_beta;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgemv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_beta,&__pyx_n_s_y,&__pyx_n_s_incy,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 1); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 2); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 3); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 4); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 5); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 6); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 7); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 8); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 9); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 10); __PYX_ERR(0, 528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, 11); __PYX_ERR(0, 528, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgemv") < 0)) __PYX_ERR(0, 528, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgemv", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 528, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_48dgemv(__pyx_self, __pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_48dgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, double __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemv", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dgemv(__pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":538
 * 
 * 
 * cpdef cgemv(size_t handle, int trans, int m, int n, float complex alpha,             # <<<<<<<<<<<<<<
 *             size_t A, int lda, size_t x, int incx, float complex beta,
 *             size_t y, int incy):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_51cgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemv(size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuComplex __pyx_v_a;
  cuComplex __pyx_v_b;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemv", 0);

  /* "cupy/cuda/cublas.pyx":541
 *             size_t A, int lda, size_t x, int incx, float complex beta,
 *             size_t y, int incy):
 *     cdef cuComplex a = get_cu_complex(alpha)             # <<<<<<<<<<<<<<
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":542
 *             size_t y, int incy):
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     cdef cuComplex b = get_cu_complex(beta)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_b = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_beta);

  /* "cupy/cuda/cublas.pyx":543
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgemv(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":544
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemv(
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuComplex*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":545
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgemv(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuComplex*>A, lda,
 *             <cuComplex*>x, incx, &b, <cuComplex*>y, incy)
 */
        __pyx_v_status = cublasCgemv(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuComplex *)__pyx_v_A), __pyx_v_lda, ((cuComplex *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_b), ((cuComplex *)__pyx_v_y), __pyx_v_incy);
      }

      /* "cupy/cuda/cublas.pyx":544
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemv(
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuComplex*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":548
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuComplex*>A, lda,
 *             <cuComplex*>x, incx, &b, <cuComplex*>y, incy)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":538
 * 
 * 
 * cpdef cgemv(size_t handle, int trans, int m, int n, float complex alpha,             # <<<<<<<<<<<<<<
 *             size_t A, int lda, size_t x, int incx, float complex beta,
 *             size_t y, int incy):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_51cgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_50cgemv[] = "cgemv(size_t handle, int trans, int m, int n, float complex alpha, size_t A, int lda, size_t x, int incx, float complex beta, size_t y, int incy)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_51cgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_float_complex __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  __pyx_t_float_complex __pyx_v_beta;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgemv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_beta,&__pyx_n_s_y,&__pyx_n_s_incy,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 1); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 2); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 3); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 4); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 5); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 6); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 7); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 8); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 9); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 10); __PYX_ERR(0, 538, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, 11); __PYX_ERR(0, 538, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgemv") < 0)) __PYX_ERR(0, 538, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_float_complex(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_float_complex(values[9]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 540, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgemv", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 538, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_50cgemv(__pyx_self, __pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_50cgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemv", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgemv(__pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":551
 * 
 * 
 * cpdef zgemv(size_t handle, int trans, int m, int n, double complex alpha,             # <<<<<<<<<<<<<<
 *             size_t A, int lda, size_t x, int incx, double complex beta,
 *             size_t y, int incy):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_53zgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemv(size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuDoubleComplex __pyx_v_a;
  cuDoubleComplex __pyx_v_b;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemv", 0);

  /* "cupy/cuda/cublas.pyx":554
 *             size_t A, int lda, size_t x, int incx, double complex beta,
 *             size_t y, int incy):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)             # <<<<<<<<<<<<<<
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":555
 *             size_t y, int incy):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_b = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_beta);

  /* "cupy/cuda/cublas.pyx":556
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgemv(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":557
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemv(
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuDoubleComplex*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":558
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgemv(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuDoubleComplex*>A,
 *             lda, <cuDoubleComplex*>x, incx, &b, <cuDoubleComplex*>y, incy)
 */
        __pyx_v_status = cublasZgemv(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda, ((cuDoubleComplex *)__pyx_v_x), __pyx_v_incx, (&__pyx_v_b), ((cuDoubleComplex *)__pyx_v_y), __pyx_v_incy);
      }

      /* "cupy/cuda/cublas.pyx":557
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemv(
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuDoubleComplex*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":561
 *             <Handle>handle, <Operation>trans, m, n, &a, <cuDoubleComplex*>A,
 *             lda, <cuDoubleComplex*>x, incx, &b, <cuDoubleComplex*>y, incy)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":551
 * 
 * 
 * cpdef zgemv(size_t handle, int trans, int m, int n, double complex alpha,             # <<<<<<<<<<<<<<
 *             size_t A, int lda, size_t x, int incx, double complex beta,
 *             size_t y, int incy):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_53zgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_52zgemv[] = "zgemv(size_t handle, int trans, int m, int n, double complex alpha, size_t A, int lda, size_t x, int incx, double complex beta, size_t y, int incy)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_53zgemv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_double_complex __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  __pyx_t_double_complex __pyx_v_beta;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgemv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_beta,&__pyx_n_s_y,&__pyx_n_s_incy,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 1); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 2); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 3); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 4); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 5); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 6); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 7); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 8); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 9); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 10); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, 11); __PYX_ERR(0, 551, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgemv") < 0)) __PYX_ERR(0, 551, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_double_complex(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_double_complex(values[9]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 552, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgemv", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 551, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_52zgemv(__pyx_self, __pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_52zgemv(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_y, int __pyx_v_incy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemv", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgemv(__pyx_v_handle, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_beta, __pyx_v_y, __pyx_v_incy, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":564
 * 
 * 
 * cpdef sger(size_t handle, int m, int n, float alpha, size_t x, int incx,             # <<<<<<<<<<<<<<
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_55sger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sger(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sger", 0);

  /* "cupy/cuda/cublas.pyx":566
 * cpdef sger(size_t handle, int m, int n, float alpha, size_t x, int incx,
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSger(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":567
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSger(
 *             <Handle>handle, m, n, &alpha, <float*>x, incx, <float*>y, incy,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":568
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSger(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, &alpha, <float*>x, incx, <float*>y, incy,
 *             <float*>A, lda)
 */
        __pyx_v_status = cublasSger(((cublasHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((float *)__pyx_v_x), __pyx_v_incx, ((float *)__pyx_v_y), __pyx_v_incy, ((float *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":567
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSger(
 *             <Handle>handle, m, n, &alpha, <float*>x, incx, <float*>y, incy,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":571
 *             <Handle>handle, m, n, &alpha, <float*>x, incx, <float*>y, incy,
 *             <float*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":564
 * 
 * 
 * cpdef sger(size_t handle, int m, int n, float alpha, size_t x, int incx,             # <<<<<<<<<<<<<<
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_55sger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_54sger[] = "sger(size_t handle, int m, int n, float alpha, size_t x, int incx, size_t y, int incy, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_55sger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  float __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sger (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 1); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 2); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 3); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 4); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 5); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 6); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 7); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 8); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, 9); __PYX_ERR(0, 564, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sger") < 0)) __PYX_ERR(0, 564, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 565, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sger", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 564, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_54sger(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_54sger(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sger", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sger(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":574
 * 
 * 
 * cpdef dger(size_t handle, int m, int n, double alpha, size_t x, int incx,             # <<<<<<<<<<<<<<
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_57dger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dger(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dger", 0);

  /* "cupy/cuda/cublas.pyx":576
 * cpdef dger(size_t handle, int m, int n, double alpha, size_t x, int incx,
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDger(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":577
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDger(
 *             <Handle>handle, m, n, &alpha, <double*>x, incx, <double*>y, incy,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":578
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDger(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, &alpha, <double*>x, incx, <double*>y, incy,
 *             <double*>A, lda)
 */
        __pyx_v_status = cublasDger(((cublasHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((double *)__pyx_v_x), __pyx_v_incx, ((double *)__pyx_v_y), __pyx_v_incy, ((double *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":577
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDger(
 *             <Handle>handle, m, n, &alpha, <double*>x, incx, <double*>y, incy,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":581
 *             <Handle>handle, m, n, &alpha, <double*>x, incx, <double*>y, incy,
 *             <double*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":574
 * 
 * 
 * cpdef dger(size_t handle, int m, int n, double alpha, size_t x, int incx,             # <<<<<<<<<<<<<<
 *            size_t y, int incy, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_57dger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_56dger[] = "dger(size_t handle, int m, int n, double alpha, size_t x, int incx, size_t y, int incy, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_57dger(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  double __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dger (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 1); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 2); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 3); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 4); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 5); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 6); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 7); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 8); __PYX_ERR(0, 574, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, 9); __PYX_ERR(0, 574, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dger") < 0)) __PYX_ERR(0, 574, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dger", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 574, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_56dger(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_56dger(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dger", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dger(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":584
 * 
 * 
 * cpdef cgeru(size_t handle, int m, int n, float complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_59cgeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgeru(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuComplex __pyx_v_a;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgeru", 0);

  /* "cupy/cuda/cublas.pyx":586
 * cpdef cgeru(size_t handle, int m, int n, float complex alpha, size_t x,
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":587
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgeru(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":588
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgeru(
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":589
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgeru(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 *             <cuComplex*>y, incy, <cuComplex*>A, lda)
 */
        __pyx_v_status = cublasCgeru(((cublasHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuComplex *)__pyx_v_x), __pyx_v_incx, ((cuComplex *)__pyx_v_y), __pyx_v_incy, ((cuComplex *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":588
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgeru(
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":592
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 *             <cuComplex*>y, incy, <cuComplex*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":584
 * 
 * 
 * cpdef cgeru(size_t handle, int m, int n, float complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_59cgeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_58cgeru[] = "cgeru(size_t handle, int m, int n, float complex alpha, size_t x, int incx, size_t y, int incy, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_59cgeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_float_complex __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgeru (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 1); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 2); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 3); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 4); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 5); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 6); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 7); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 8); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, 9); __PYX_ERR(0, 584, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgeru") < 0)) __PYX_ERR(0, 584, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_float_complex(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgeru", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 584, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_58cgeru(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_58cgeru(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgeru", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgeru(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":595
 * 
 * 
 * cpdef cgerc(size_t handle, int m, int n, float complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_61cgerc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgerc(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuComplex __pyx_v_a;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgerc", 0);

  /* "cupy/cuda/cublas.pyx":597
 * cpdef cgerc(size_t handle, int m, int n, float complex alpha, size_t x,
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":598
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgerc(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":599
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgerc(
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":600
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgerc(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 *             <cuComplex*>y, incy, <cuComplex*>A, lda)
 */
        __pyx_v_status = cublasCgerc(((cublasHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuComplex *)__pyx_v_x), __pyx_v_incx, ((cuComplex *)__pyx_v_y), __pyx_v_incy, ((cuComplex *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":599
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgerc(
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":603
 *             <Handle>handle, m, n, &a, <cuComplex*>x, incx,
 *             <cuComplex*>y, incy, <cuComplex*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":595
 * 
 * 
 * cpdef cgerc(size_t handle, int m, int n, float complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuComplex a = get_cu_complex(alpha)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgerc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_61cgerc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_60cgerc[] = "cgerc(size_t handle, int m, int n, float complex alpha, size_t x, int incx, size_t y, int incy, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_61cgerc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_float_complex __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgerc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 1); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 2); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 3); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 4); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 5); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 6); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 7); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 8); __PYX_ERR(0, 595, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, 9); __PYX_ERR(0, 595, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgerc") < 0)) __PYX_ERR(0, 595, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_float_complex(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgerc", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 595, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgerc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_60cgerc(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_60cgerc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgerc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgerc(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgerc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":606
 * 
 * 
 * cpdef zgeru(size_t handle, int m, int n, double complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_63zgeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgeru(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuDoubleComplex __pyx_v_a;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgeru", 0);

  /* "cupy/cuda/cublas.pyx":608
 * cpdef zgeru(size_t handle, int m, int n, double complex alpha, size_t x,
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":609
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgeru(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":610
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgeru(
 *             <Handle>handle, m, n, &a,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":611
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgeru(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, &a,
 *             <cuDoubleComplex*>x, incx, <cuDoubleComplex*>y, incy,
 */
        __pyx_v_status = cublasZgeru(((cublasHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuDoubleComplex *)__pyx_v_x), __pyx_v_incx, ((cuDoubleComplex *)__pyx_v_y), __pyx_v_incy, ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":610
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgeru(
 *             <Handle>handle, m, n, &a,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":615
 *             <cuDoubleComplex*>x, incx, <cuDoubleComplex*>y, incy,
 *             <cuDoubleComplex*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":606
 * 
 * 
 * cpdef zgeru(size_t handle, int m, int n, double complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_63zgeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_62zgeru[] = "zgeru(size_t handle, int m, int n, double complex alpha, size_t x, int incx, size_t y, int incy, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_63zgeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_double_complex __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgeru (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 1); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 2); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 3); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 4); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 5); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 6); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 7); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 8); __PYX_ERR(0, 606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, 9); __PYX_ERR(0, 606, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgeru") < 0)) __PYX_ERR(0, 606, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_double_complex(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgeru", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 606, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_62zgeru(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_62zgeru(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgeru", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgeru(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":618
 * 
 * 
 * cpdef zgerc(size_t handle, int m, int n, double complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_65zgerc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgerc(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuDoubleComplex __pyx_v_a;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgerc", 0);

  /* "cupy/cuda/cublas.pyx":620
 * cpdef zgerc(size_t handle, int m, int n, double complex alpha, size_t x,
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":621
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgerc(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":622
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgerc(
 *             <Handle>handle, m, n, &a,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":623
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgerc(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, &a,
 *             <cuDoubleComplex*>x, incx, <cuDoubleComplex*>y, incy,
 */
        __pyx_v_status = cublasZgerc(((cublasHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuDoubleComplex *)__pyx_v_x), __pyx_v_incx, ((cuDoubleComplex *)__pyx_v_y), __pyx_v_incy, ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":622
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgerc(
 *             <Handle>handle, m, n, &a,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":627
 *             <cuDoubleComplex*>x, incx, <cuDoubleComplex*>y, incy,
 *             <cuDoubleComplex*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":618
 * 
 * 
 * cpdef zgerc(size_t handle, int m, int n, double complex alpha, size_t x,             # <<<<<<<<<<<<<<
 *             int incx, size_t y, int incy, size_t A, int lda):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgerc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_65zgerc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_64zgerc[] = "zgerc(size_t handle, int m, int n, double complex alpha, size_t x, int incx, size_t y, int incy, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_65zgerc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_double_complex __pyx_v_alpha;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_y;
  int __pyx_v_incy;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgerc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_y,&__pyx_n_s_incy,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 1); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 2); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 3); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 4); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 5); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 6); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 7); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 8); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, 9); __PYX_ERR(0, 618, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgerc") < 0)) __PYX_ERR(0, 618, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_double_complex(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_y == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_incy = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_incy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgerc", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 618, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgerc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_64zgerc(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_64zgerc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_y, int __pyx_v_incy, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgerc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgerc(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_x, __pyx_v_incx, __pyx_v_y, __pyx_v_incy, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgerc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":634
 * ###############################################################################
 * 
 * cpdef sgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, float alpha, size_t A, int lda,
 *             size_t B, int ldb, float beta, size_t C, int ldc):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_67sgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemm(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemm", 0);

  /* "cupy/cuda/cublas.pyx":637
 *             int m, int n, int k, float alpha, size_t A, int lda,
 *             size_t B, int ldb, float beta, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgemm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":638
 *             size_t B, int ldb, float beta, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":639
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgemm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha, <float*>A, lda, <float*>B, ldb, &beta, <float*>C, ldc)
 */
        __pyx_v_status = cublasSgemm(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_alpha), ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_B), __pyx_v_ldb, (&__pyx_v_beta), ((float *)__pyx_v_C), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":638
 *             size_t B, int ldb, float beta, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":642
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha, <float*>A, lda, <float*>B, ldb, &beta, <float*>C, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":634
 * ###############################################################################
 * 
 * cpdef sgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, float alpha, size_t A, int lda,
 *             size_t B, int ldb, float beta, size_t C, int ldc):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_67sgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_66sgemm[] = "sgemm(size_t handle, int transa, int transb, int m, int n, int k, float alpha, size_t A, int lda, size_t B, int ldb, float beta, size_t C, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_67sgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  float __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  float __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgemm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 1); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 2); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 3); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 4); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 5); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 6); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 7); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 8); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 9); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 10); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 11); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 12); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, 13); __PYX_ERR(0, 634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgemm") < 0)) __PYX_ERR(0, 634, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[11]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgemm", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_66sgemm(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_66sgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgemm(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":645
 * 
 * 
 * cpdef dgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, double alpha, size_t A, int lda,
 *             size_t B, int ldb, double beta, size_t C, int ldc):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_69dgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemm(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, double __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemm", 0);

  /* "cupy/cuda/cublas.pyx":648
 *             int m, int n, int k, double alpha, size_t A, int lda,
 *             size_t B, int ldb, double beta, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDgemm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":649
 *             size_t B, int ldb, double beta, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":650
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDgemm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha, <double*>A, lda, <double*>B, ldb, &beta, <double*>C, ldc)
 */
        __pyx_v_status = cublasDgemm(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_alpha), ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_B), __pyx_v_ldb, (&__pyx_v_beta), ((double *)__pyx_v_C), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":649
 *             size_t B, int ldb, double beta, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":653
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha, <double*>A, lda, <double*>B, ldb, &beta, <double*>C, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":645
 * 
 * 
 * cpdef dgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, double alpha, size_t A, int lda,
 *             size_t B, int ldb, double beta, size_t C, int ldc):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_69dgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_68dgemm[] = "dgemm(size_t handle, int transa, int transb, int m, int n, int k, double alpha, size_t A, int lda, size_t B, int ldb, double beta, size_t C, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_69dgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  double __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  double __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgemm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 1); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 2); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 3); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 4); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 5); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 6); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 7); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 8); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 9); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 10); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 11); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 12); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, 13); __PYX_ERR(0, 645, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgemm") < 0)) __PYX_ERR(0, 645, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgemm", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 645, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_68dgemm(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_68dgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, double __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dgemm(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":656
 * 
 * 
 * cpdef cgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, float complex alpha, size_t A, int lda,
 *             size_t B, int ldb, float complex beta, size_t C, int ldc):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_71cgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemm(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuComplex __pyx_v_a;
  cuComplex __pyx_v_b;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemm", 0);

  /* "cupy/cuda/cublas.pyx":659
 *             int m, int n, int k, float complex alpha, size_t A, int lda,
 *             size_t B, int ldb, float complex beta, size_t C, int ldc):
 *     cdef cuComplex a = get_cu_complex(alpha)             # <<<<<<<<<<<<<<
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":660
 *             size_t B, int ldb, float complex beta, size_t C, int ldc):
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     cdef cuComplex b = get_cu_complex(beta)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_b = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_beta);

  /* "cupy/cuda/cublas.pyx":661
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgemm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":662
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":663
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgemm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &a, <cuComplex*>A, lda, <cuComplex*>B, ldb,
 */
        __pyx_v_status = cublasCgemm(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_a), ((cuComplex *)__pyx_v_A), __pyx_v_lda, ((cuComplex *)__pyx_v_B), __pyx_v_ldb, (&__pyx_v_b), ((cuComplex *)__pyx_v_C), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":662
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":667
 *             &a, <cuComplex*>A, lda, <cuComplex*>B, ldb,
 *             &b, <cuComplex*>C, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":656
 * 
 * 
 * cpdef cgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, float complex alpha, size_t A, int lda,
 *             size_t B, int ldb, float complex beta, size_t C, int ldc):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_71cgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_70cgemm[] = "cgemm(size_t handle, int transa, int transb, int m, int n, int k, float complex alpha, size_t A, int lda, size_t B, int ldb, float complex beta, size_t C, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_71cgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  __pyx_t_float_complex __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  __pyx_t_float_complex __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgemm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 1); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 2); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 3); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 4); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 5); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 6); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 7); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 8); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 9); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 10); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 11); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 12); __PYX_ERR(0, 656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, 13); __PYX_ERR(0, 656, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgemm") < 0)) __PYX_ERR(0, 656, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_float_complex(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_float_complex(values[11]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgemm", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 656, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_70cgemm(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_70cgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgemm(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":670
 * 
 * 
 * cpdef zgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, double complex alpha, size_t A, int lda,
 *             size_t B, int ldb, double complex beta, size_t C, int ldc):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_73zgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemm(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuDoubleComplex __pyx_v_a;
  cuDoubleComplex __pyx_v_b;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemm", 0);

  /* "cupy/cuda/cublas.pyx":673
 *             int m, int n, int k, double complex alpha, size_t A, int lda,
 *             size_t B, int ldb, double complex beta, size_t C, int ldc):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)             # <<<<<<<<<<<<<<
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":674
 *             size_t B, int ldb, double complex beta, size_t C, int ldc):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_b = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_beta);

  /* "cupy/cuda/cublas.pyx":675
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgemm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":676
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":677
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgemm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &a, <cuDoubleComplex*>A, lda,
 */
        __pyx_v_status = cublasZgemm(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_a), ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda, ((cuDoubleComplex *)__pyx_v_B), __pyx_v_ldb, (&__pyx_v_b), ((cuDoubleComplex *)__pyx_v_C), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":676
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemm(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":682
 *             <cuDoubleComplex*>B, ldb, &b,
 *             <cuDoubleComplex*>C, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":670
 * 
 * 
 * cpdef zgemm(size_t handle, int transa, int transb,             # <<<<<<<<<<<<<<
 *             int m, int n, int k, double complex alpha, size_t A, int lda,
 *             size_t B, int ldb, double complex beta, size_t C, int ldc):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_73zgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_72zgemm[] = "zgemm(size_t handle, int transa, int transb, int m, int n, int k, double complex alpha, size_t A, int lda, size_t B, int ldb, double complex beta, size_t C, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_73zgemm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  __pyx_t_double_complex __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  __pyx_t_double_complex __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgemm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 1); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 2); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 3); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 4); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 5); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 6); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 7); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 8); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 9); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 10); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 11); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 12); __PYX_ERR(0, 670, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, 13); __PYX_ERR(0, 670, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgemm") < 0)) __PYX_ERR(0, 670, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_double_complex(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_double_complex(values[11]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgemm", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 670, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_72zgemm(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_72zgemm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgemm(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":685
 * 
 * 
 * cpdef sgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_75sgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemmBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemmBatched", 0);

  /* "cupy/cuda/cublas.pyx":689
 *         float alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 *         float beta, size_t Carray, int ldc, int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgemmBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":690
 *         float beta, size_t Carray, int ldc, int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":691
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgemmBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha, <const float**>Aarray, lda, <const float**>Barray, ldb,
 */
        __pyx_v_status = cublasSgemmBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_alpha), ((float const **)__pyx_v_Aarray), __pyx_v_lda, ((float const **)__pyx_v_Barray), __pyx_v_ldb, (&__pyx_v_beta), ((float **)__pyx_v_Carray), __pyx_v_ldc, __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":690
 *         float beta, size_t Carray, int ldc, int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":695
 *             &alpha, <const float**>Aarray, lda, <const float**>Barray, ldb,
 *             &beta, <float**>Carray, ldc, batchCount)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":685
 * 
 * 
 * cpdef sgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_75sgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_74sgemmBatched[] = "sgemmBatched(size_t handle, int transa, int transb, int m, int n, int k, float alpha, size_t Aarray, int lda, size_t Barray, int ldb, float beta, size_t Carray, int ldc, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_75sgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  float __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  float __pyx_v_beta;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgemmBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_batchCount,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 1); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 2); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 3); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 4); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 5); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 6); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 7); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 8); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 9); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 10); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 11); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 12); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 13); __PYX_ERR(0, 685, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, 14); __PYX_ERR(0, 685, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgemmBatched") < 0)) __PYX_ERR(0, 685, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 686, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[11]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[14]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgemmBatched", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 685, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_74sgemmBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_74sgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemmBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgemmBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":698
 * 
 * 
 * cpdef dgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_77dgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemmBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, double __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemmBatched", 0);

  /* "cupy/cuda/cublas.pyx":702
 *         double alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 *         double beta, size_t Carray, int ldc, int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDgemmBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":703
 *         double beta, size_t Carray, int ldc, int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":704
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDgemmBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha, <const double**>Aarray, lda, <const double**>Barray, ldb,
 */
        __pyx_v_status = cublasDgemmBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_alpha), ((double const **)__pyx_v_Aarray), __pyx_v_lda, ((double const **)__pyx_v_Barray), __pyx_v_ldb, (&__pyx_v_beta), ((double **)__pyx_v_Carray), __pyx_v_ldc, __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":703
 *         double beta, size_t Carray, int ldc, int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":708
 *             &alpha, <const double**>Aarray, lda, <const double**>Barray, ldb,
 *             &beta, <double**>Carray, ldc, batchCount)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":698
 * 
 * 
 * cpdef dgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_77dgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_76dgemmBatched[] = "dgemmBatched(size_t handle, int transa, int transb, int m, int n, int k, double alpha, size_t Aarray, int lda, size_t Barray, int ldb, double beta, size_t Carray, int ldc, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_77dgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  double __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  double __pyx_v_beta;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgemmBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_batchCount,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 1); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 2); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 3); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 4); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 5); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 6); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 7); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 8); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 9); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 10); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 11); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 12); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 13); __PYX_ERR(0, 698, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, 14); __PYX_ERR(0, 698, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgemmBatched") < 0)) __PYX_ERR(0, 698, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[14]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgemmBatched", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 698, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_76dgemmBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_76dgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, double __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemmBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dgemmBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":711
 * 
 * 
 * cpdef cgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float complex alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_79cgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemmBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuComplex __pyx_v_a;
  cuComplex __pyx_v_b;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemmBatched", 0);

  /* "cupy/cuda/cublas.pyx":715
 *         float complex alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 *         float complex beta, size_t Carray, int ldc, int batchCount):
 *     cdef cuComplex a = get_cu_complex(alpha)             # <<<<<<<<<<<<<<
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":716
 *         float complex beta, size_t Carray, int ldc, int batchCount):
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     cdef cuComplex b = get_cu_complex(beta)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_b = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_beta);

  /* "cupy/cuda/cublas.pyx":717
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgemmBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":718
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":719
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgemmBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &a, <const cuComplex**>Aarray, lda, <const cuComplex**>Barray, ldb,
 */
        __pyx_v_status = cublasCgemmBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_a), ((cuComplex const **)__pyx_v_Aarray), __pyx_v_lda, ((cuComplex const **)__pyx_v_Barray), __pyx_v_ldb, (&__pyx_v_b), ((cuComplex **)__pyx_v_Carray), __pyx_v_ldc, __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":718
 *     cdef cuComplex b = get_cu_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":723
 *             &a, <const cuComplex**>Aarray, lda, <const cuComplex**>Barray, ldb,
 *             &b, <cuComplex**>Carray, ldc, batchCount)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":711
 * 
 * 
 * cpdef cgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float complex alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_79cgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_78cgemmBatched[] = "cgemmBatched(size_t handle, int transa, int transb, int m, int n, int k, float complex alpha, size_t Aarray, int lda, size_t Barray, int ldb, float complex beta, size_t Carray, int ldc, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_79cgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  __pyx_t_float_complex __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  __pyx_t_float_complex __pyx_v_beta;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgemmBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_batchCount,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 1); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 2); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 3); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 4); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 5); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 6); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 7); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 8); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 9); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 10); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 11); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 12); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 13); __PYX_ERR(0, 711, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, 14); __PYX_ERR(0, 711, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgemmBatched") < 0)) __PYX_ERR(0, 711, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_float_complex(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_float_complex(values[11]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[14]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgemmBatched", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 711, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_78cgemmBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_78cgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemmBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgemmBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":726
 * 
 * 
 * cpdef zgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double complex alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_81zgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemmBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuDoubleComplex __pyx_v_a;
  cuDoubleComplex __pyx_v_b;
  CYTHON_UNUSED int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemmBatched", 0);

  /* "cupy/cuda/cublas.pyx":730
 *         double complex alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 *         double complex beta, size_t Carray, int ldc, int batchCount):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)             # <<<<<<<<<<<<<<
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":731
 *         double complex beta, size_t Carray, int ldc, int batchCount):
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */
  __pyx_v_b = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_beta);

  /* "cupy/cuda/cublas.pyx":732
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgemmBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":733
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":734
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgemmBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &a, <const cuDoubleComplex**>Aarray, lda,
 */
        __pyx_v_status = cublasZgemmBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_a), ((cuDoubleComplex const **)__pyx_v_Aarray), __pyx_v_lda, ((cuDoubleComplex const **)__pyx_v_Barray), __pyx_v_ldb, (&__pyx_v_b), ((cuDoubleComplex **)__pyx_v_Carray), __pyx_v_ldc, __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":733
 *     cdef cuDoubleComplex b = get_cu_double_complex(beta)
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemmBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":726
 * 
 * 
 * cpdef zgemmBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double complex alpha, size_t Aarray, int lda, size_t Barray, int ldb,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_81zgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_80zgemmBatched[] = "zgemmBatched(size_t handle, int transa, int transb, int m, int n, int k, double complex alpha, size_t Aarray, int lda, size_t Barray, int ldb, double complex beta, size_t Carray, int ldc, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_81zgemmBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  __pyx_t_double_complex __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  __pyx_t_double_complex __pyx_v_beta;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgemmBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_batchCount,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 1); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 2); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 3); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 4); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 5); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 6); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 7); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 8); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 9); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 10); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 11); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 12); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 13); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, 14); __PYX_ERR(0, 726, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgemmBatched") < 0)) __PYX_ERR(0, 726, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_double_complex(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_double_complex(values[11]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[14]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgemmBatched", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 726, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_80zgemmBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_80zgemmBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_Carray, int __pyx_v_ldc, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemmBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgemmBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, __pyx_v_beta, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemmBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":741
 * 
 * 
 * cpdef sgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float alpha,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_83sgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemmStridedBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemmStridedBatched", 0);

  /* "cupy/cuda/cublas.pyx":749
 *         size_t C, int ldc, long long strideC,
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgemmStridedBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":750
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":751
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgemmStridedBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha,
 */
        __pyx_v_status = cublasSgemmStridedBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_alpha), ((float const *)__pyx_v_A), __pyx_v_lda, ((PY_LONG_LONG)__pyx_v_strideA), ((float const *)__pyx_v_B), __pyx_v_ldb, ((PY_LONG_LONG)__pyx_v_strideB), (&__pyx_v_beta), ((float *)__pyx_v_C), __pyx_v_ldc, ((PY_LONG_LONG)__pyx_v_strideC), __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":750
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":759
 *             <float*>C, ldc, <long long>strideC,
 *             batchCount)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":741
 * 
 * 
 * cpdef sgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float alpha,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_83sgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_82sgemmStridedBatched[] = "sgemmStridedBatched(size_t handle, int transa, int transb, int m, int n, int k, float alpha, size_t A, int lda, long long strideA, size_t B, int ldb, long long strideB, float beta, size_t C, int ldc, long long strideC, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_83sgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  float __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PY_LONG_LONG __pyx_v_strideA;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  PY_LONG_LONG __pyx_v_strideB;
  float __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PY_LONG_LONG __pyx_v_strideC;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgemmStridedBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_strideA,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_strideB,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_strideC,&__pyx_n_s_batchCount,0};
    PyObject* values[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 1); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 2); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 3); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 4); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 5); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 6); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 7); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 8); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 9); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 10); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 11); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 12); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 13); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 14); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 15); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 16); __PYX_ERR(0, 741, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, 17); __PYX_ERR(0, 741, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgemmStridedBatched") < 0)) __PYX_ERR(0, 741, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 18) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 744, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 744, __pyx_L3_error)
    __pyx_v_strideA = __Pyx_PyInt_As_PY_LONG_LONG(values[9]); if (unlikely((__pyx_v_strideA == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 744, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L3_error)
    __pyx_v_strideB = __Pyx_PyInt_As_PY_LONG_LONG(values[12]); if (unlikely((__pyx_v_strideB == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[13]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 746, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L3_error)
    __pyx_v_strideC = __Pyx_PyInt_As_PY_LONG_LONG(values[16]); if (unlikely((__pyx_v_strideC == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[17]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgemmStridedBatched", 1, 18, 18, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 741, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_82sgemmStridedBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_82sgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemmStridedBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgemmStridedBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":762
 * 
 * 
 * cpdef dgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double alpha,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_85dgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgemmStridedBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, double __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemmStridedBatched", 0);

  /* "cupy/cuda/cublas.pyx":770
 *         size_t C, int ldc, long long strideC,
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDgemmStridedBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":771
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":772
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDgemmStridedBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha,
 */
        __pyx_v_status = cublasDgemmStridedBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_alpha), ((double const *)__pyx_v_A), __pyx_v_lda, ((PY_LONG_LONG)__pyx_v_strideA), ((double const *)__pyx_v_B), __pyx_v_ldb, ((PY_LONG_LONG)__pyx_v_strideB), (&__pyx_v_beta), ((double *)__pyx_v_C), __pyx_v_ldc, ((PY_LONG_LONG)__pyx_v_strideC), __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":771
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":780
 *             <double*>C, ldc, <long long>strideC,
 *             batchCount)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":762
 * 
 * 
 * cpdef dgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double alpha,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_85dgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_84dgemmStridedBatched[] = "dgemmStridedBatched(size_t handle, int transa, int transb, int m, int n, int k, double alpha, size_t A, int lda, long long strideA, size_t B, int ldb, long long strideB, double beta, size_t C, int ldc, long long strideC, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_85dgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  double __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PY_LONG_LONG __pyx_v_strideA;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  PY_LONG_LONG __pyx_v_strideB;
  double __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PY_LONG_LONG __pyx_v_strideC;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgemmStridedBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_strideA,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_strideB,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_strideC,&__pyx_n_s_batchCount,0};
    PyObject* values[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 1); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 2); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 3); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 4); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 5); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 6); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 7); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 8); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 9); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 10); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 11); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 12); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 13); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 14); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 15); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 16); __PYX_ERR(0, 762, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, 17); __PYX_ERR(0, 762, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgemmStridedBatched") < 0)) __PYX_ERR(0, 762, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 18) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 764, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 765, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 765, __pyx_L3_error)
    __pyx_v_strideA = __Pyx_PyInt_As_PY_LONG_LONG(values[9]); if (unlikely((__pyx_v_strideA == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 765, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 766, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 766, __pyx_L3_error)
    __pyx_v_strideB = __Pyx_PyInt_As_PY_LONG_LONG(values[12]); if (unlikely((__pyx_v_strideB == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 766, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 768, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 768, __pyx_L3_error)
    __pyx_v_strideC = __Pyx_PyInt_As_PY_LONG_LONG(values[16]); if (unlikely((__pyx_v_strideC == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 768, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[17]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 769, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgemmStridedBatched", 1, 18, 18, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 762, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_84dgemmStridedBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_84dgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, double __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgemmStridedBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dgemmStridedBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":783
 * 
 * 
 * cpdef cgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float complex alpha,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_87cgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgemmStridedBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemmStridedBatched", 0);

  /* "cupy/cuda/cublas.pyx":791
 *         size_t C, int ldc, long long strideC,
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgemmStridedBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":792
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":793
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgemmStridedBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             <const cuComplex*>&alpha,
 */
        __pyx_v_status = cublasCgemmStridedBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((cuComplex const *)(&__pyx_v_alpha)), ((cuComplex const *)__pyx_v_A), __pyx_v_lda, ((PY_LONG_LONG)__pyx_v_strideA), ((cuComplex const *)__pyx_v_B), __pyx_v_ldb, ((PY_LONG_LONG)__pyx_v_strideB), ((cuComplex const *)(&__pyx_v_beta)), ((cuComplex *)__pyx_v_C), __pyx_v_ldc, ((PY_LONG_LONG)__pyx_v_strideC), __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":792
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":801
 *             <cuComplex*>C, ldc, <long long>strideC,
 *             batchCount)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":783
 * 
 * 
 * cpdef cgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float complex alpha,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_87cgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_86cgemmStridedBatched[] = "cgemmStridedBatched(size_t handle, int transa, int transb, int m, int n, int k, float complex alpha, size_t A, int lda, long long strideA, size_t B, int ldb, long long strideB, float complex beta, size_t C, int ldc, long long strideC, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_87cgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  __pyx_t_float_complex __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PY_LONG_LONG __pyx_v_strideA;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  PY_LONG_LONG __pyx_v_strideB;
  __pyx_t_float_complex __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PY_LONG_LONG __pyx_v_strideC;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgemmStridedBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_strideA,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_strideB,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_strideC,&__pyx_n_s_batchCount,0};
    PyObject* values[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 1); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 2); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 3); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 4); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 5); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 6); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 7); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 8); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 9); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 10); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 11); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 12); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 13); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 14); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 15); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 16); __PYX_ERR(0, 783, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, 17); __PYX_ERR(0, 783, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgemmStridedBatched") < 0)) __PYX_ERR(0, 783, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 18) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 784, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_float_complex(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L3_error)
    __pyx_v_strideA = __Pyx_PyInt_As_PY_LONG_LONG(values[9]); if (unlikely((__pyx_v_strideA == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_strideB = __Pyx_PyInt_As_PY_LONG_LONG(values[12]); if (unlikely((__pyx_v_strideB == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_float_complex(values[13]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 788, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 789, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 789, __pyx_L3_error)
    __pyx_v_strideC = __Pyx_PyInt_As_PY_LONG_LONG(values[16]); if (unlikely((__pyx_v_strideC == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 789, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[17]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 790, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgemmStridedBatched", 1, 18, 18, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 783, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_86cgemmStridedBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_86cgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, __pyx_t_float_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgemmStridedBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgemmStridedBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":804
 * 
 * 
 * cpdef zgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double complex alpha,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_89zgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgemmStridedBatched(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemmStridedBatched", 0);

  /* "cupy/cuda/cublas.pyx":812
 *         size_t C, int ldc, long long strideC,
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgemmStridedBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":813
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":814
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgemmStridedBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             <const cuDoubleComplex*>&alpha,
 */
        __pyx_v_status = cublasZgemmStridedBatched(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((cuDoubleComplex const *)(&__pyx_v_alpha)), ((cuDoubleComplex const *)__pyx_v_A), __pyx_v_lda, ((PY_LONG_LONG)__pyx_v_strideA), ((cuDoubleComplex const *)__pyx_v_B), __pyx_v_ldb, ((PY_LONG_LONG)__pyx_v_strideB), ((cuDoubleComplex const *)(&__pyx_v_beta)), ((cuDoubleComplex *)__pyx_v_C), __pyx_v_ldc, ((PY_LONG_LONG)__pyx_v_strideC), __pyx_v_batchCount);
      }

      /* "cupy/cuda/cublas.pyx":813
 *         int batchCount):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgemmStridedBatched(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":822
 *             <cuDoubleComplex*>C, ldc, <long long>strideC,
 *             batchCount)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":804
 * 
 * 
 * cpdef zgemmStridedBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         double complex alpha,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_89zgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_88zgemmStridedBatched[] = "zgemmStridedBatched(size_t handle, int transa, int transb, int m, int n, int k, double complex alpha, size_t A, int lda, long long strideA, size_t B, int ldb, long long strideB, double complex beta, size_t C, int ldc, long long strideC, int batchCount)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_89zgemmStridedBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  __pyx_t_double_complex __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PY_LONG_LONG __pyx_v_strideA;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  PY_LONG_LONG __pyx_v_strideB;
  __pyx_t_double_complex __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PY_LONG_LONG __pyx_v_strideC;
  int __pyx_v_batchCount;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgemmStridedBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_strideA,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_strideB,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_strideC,&__pyx_n_s_batchCount,0};
    PyObject* values[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 1); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 2); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 3); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 4); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 5); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 6); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 7); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 8); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 9); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 10); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 11); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideB)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 12); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 13); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 14); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 15); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strideC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 16); __PYX_ERR(0, 804, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchCount)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, 17); __PYX_ERR(0, 804, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgemmStridedBatched") < 0)) __PYX_ERR(0, 804, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 18) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_double_complex(values[6]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 806, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 807, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 807, __pyx_L3_error)
    __pyx_v_strideA = __Pyx_PyInt_As_PY_LONG_LONG(values[9]); if (unlikely((__pyx_v_strideA == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 807, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
    __pyx_v_strideB = __Pyx_PyInt_As_PY_LONG_LONG(values[12]); if (unlikely((__pyx_v_strideB == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyComplex_As___pyx_t_double_complex(values[13]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 809, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 810, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 810, __pyx_L3_error)
    __pyx_v_strideC = __Pyx_PyInt_As_PY_LONG_LONG(values[16]); if (unlikely((__pyx_v_strideC == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 810, __pyx_L3_error)
    __pyx_v_batchCount = __Pyx_PyInt_As_int(values[17]); if (unlikely((__pyx_v_batchCount == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 811, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgemmStridedBatched", 1, 18, 18, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 804, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_88zgemmStridedBatched(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_88zgemmStridedBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, PY_LONG_LONG __pyx_v_strideA, size_t __pyx_v_B, int __pyx_v_ldb, PY_LONG_LONG __pyx_v_strideB, __pyx_t_double_complex __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_ldc, PY_LONG_LONG __pyx_v_strideC, int __pyx_v_batchCount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgemmStridedBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgemmStridedBatched(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_strideA, __pyx_v_B, __pyx_v_ldb, __pyx_v_strideB, __pyx_v_beta, __pyx_v_C, __pyx_v_ldc, __pyx_v_strideC, __pyx_v_batchCount, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgemmStridedBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":825
 * 
 * 
 * cpdef strsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, float alpha, size_t Aarray, int lda,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_91strsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_strsm(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("strsm", 0);

  /* "cupy/cuda/cublas.pyx":829
 *         int m, int n, float alpha, size_t Aarray, int lda,
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasStrsm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":830
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasStrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":831
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasStrsm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 *             <DiagType>diag, m, n, &alpha, <const float*>Aarray, lda,
 */
        __pyx_v_status = cublasStrsm(((cublasHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasFillMode_t)__pyx_v_uplo), ((cublasOperation_t)__pyx_v_trans), ((cublasDiagType_t)__pyx_v_diag), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((float const *)__pyx_v_Aarray), __pyx_v_lda, ((float *)__pyx_v_Barray), __pyx_v_ldb);
      }

      /* "cupy/cuda/cublas.pyx":830
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasStrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":835
 *             <DiagType>diag, m, n, &alpha, <const float*>Aarray, lda,
 *             <float*>Barray, ldb)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":825
 * 
 * 
 * cpdef strsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, float alpha, size_t Aarray, int lda,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.strsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_91strsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_90strsm[] = "strsm(size_t handle, int side, int uplo, int trans, int diag, int m, int n, float alpha, size_t Aarray, int lda, size_t Barray, int ldb)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_91strsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_uplo;
  int __pyx_v_trans;
  int __pyx_v_diag;
  int __pyx_v_m;
  int __pyx_v_n;
  float __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strsm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_uplo,&__pyx_n_s_trans,&__pyx_n_s_diag,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 1); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 2); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 3); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_diag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 4); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 5); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 6); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 7); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 8); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 9); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 10); __PYX_ERR(0, 825, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, 11); __PYX_ERR(0, 825, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "strsm") < 0)) __PYX_ERR(0, 825, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L3_error)
    __pyx_v_diag = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_diag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 828, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 828, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("strsm", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 825, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.strsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_90strsm(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_90strsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("strsm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_strsm(__pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.strsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":838
 * 
 * 
 * cpdef dtrsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, double alpha, size_t Aarray, int lda,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_93dtrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dtrsm(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dtrsm", 0);

  /* "cupy/cuda/cublas.pyx":842
 *         int m, int n, double alpha, size_t Aarray, int lda,
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDtrsm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":843
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDtrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":844
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDtrsm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 *             <DiagType>diag, m, n, &alpha, <const double*>Aarray, lda,
 */
        __pyx_v_status = cublasDtrsm(((cublasHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasFillMode_t)__pyx_v_uplo), ((cublasOperation_t)__pyx_v_trans), ((cublasDiagType_t)__pyx_v_diag), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((double const *)__pyx_v_Aarray), __pyx_v_lda, ((double *)__pyx_v_Barray), __pyx_v_ldb);
      }

      /* "cupy/cuda/cublas.pyx":843
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDtrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":848
 *             <DiagType>diag, m, n, &alpha, <const double*>Aarray, lda,
 *             <double*>Barray, ldb)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef ctrsm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":838
 * 
 * 
 * cpdef dtrsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, double alpha, size_t Aarray, int lda,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dtrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_93dtrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_92dtrsm[] = "dtrsm(size_t handle, int side, int uplo, int trans, int diag, int m, int n, double alpha, size_t Aarray, int lda, size_t Barray, int ldb)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_93dtrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_uplo;
  int __pyx_v_trans;
  int __pyx_v_diag;
  int __pyx_v_m;
  int __pyx_v_n;
  double __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dtrsm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_uplo,&__pyx_n_s_trans,&__pyx_n_s_diag,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 1); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 2); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 3); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_diag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 4); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 5); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 6); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 7); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 8); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 9); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 10); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, 11); __PYX_ERR(0, 838, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dtrsm") < 0)) __PYX_ERR(0, 838, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_diag = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_diag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dtrsm", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 838, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dtrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_92dtrsm(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_92dtrsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dtrsm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dtrsm(__pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dtrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":850
 *     check_status(status)
 * 
 * cpdef ctrsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, float complex alpha, size_t Aarray, int lda,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_95ctrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_ctrsm(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuComplex __pyx_v_a;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ctrsm", 0);

  /* "cupy/cuda/cublas.pyx":854
 *         int m, int n, float complex alpha, size_t Aarray, int lda,
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     with nogil:
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":855
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     cdef cuComplex a = get_cu_complex(alpha)             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCtrsm(
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":856
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCtrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":857
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     with nogil:
 *         status = cublasCtrsm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 *             <DiagType>diag, m, n, &a, <const cuComplex*>Aarray, lda,
 */
        __pyx_v_status = cublasCtrsm(((cublasHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasFillMode_t)__pyx_v_uplo), ((cublasOperation_t)__pyx_v_trans), ((cublasDiagType_t)__pyx_v_diag), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuComplex const *)__pyx_v_Aarray), __pyx_v_lda, ((cuComplex *)__pyx_v_Barray), __pyx_v_ldb);
      }

      /* "cupy/cuda/cublas.pyx":856
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     cdef cuComplex a = get_cu_complex(alpha)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCtrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":861
 *             <DiagType>diag, m, n, &a, <const cuComplex*>Aarray, lda,
 *             <cuComplex*>Barray, ldb)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":850
 *     check_status(status)
 * 
 * cpdef ctrsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, float complex alpha, size_t Aarray, int lda,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.ctrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_95ctrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_94ctrsm[] = "ctrsm(size_t handle, int side, int uplo, int trans, int diag, int m, int n, float complex alpha, size_t Aarray, int lda, size_t Barray, int ldb)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_95ctrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_uplo;
  int __pyx_v_trans;
  int __pyx_v_diag;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_float_complex __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ctrsm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_uplo,&__pyx_n_s_trans,&__pyx_n_s_diag,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 1); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 2); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 3); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_diag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 4); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 5); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 6); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 7); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 8); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 9); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 10); __PYX_ERR(0, 850, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, 11); __PYX_ERR(0, 850, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ctrsm") < 0)) __PYX_ERR(0, 850, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L3_error)
    __pyx_v_diag = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_diag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_float_complex(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 852, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 853, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ctrsm", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 850, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.ctrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_94ctrsm(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_94ctrsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, __pyx_t_float_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ctrsm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_ctrsm(__pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.ctrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":864
 * 
 * 
 * cpdef ztrsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, double complex alpha, size_t Aarray, int lda,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_97ztrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_ztrsm(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb, CYTHON_UNUSED int __pyx_skip_dispatch) {
  cuDoubleComplex __pyx_v_a;
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ztrsm", 0);

  /* "cupy/cuda/cublas.pyx":868
 *         int m, int n, double complex alpha, size_t Aarray, int lda,
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     with nogil:
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":869
 *         size_t Barray, int ldb):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZtrsm(
 */
  __pyx_v_a = __pyx_f_4cupy_4cuda_6cublas_get_cu_double_complex(__pyx_v_alpha);

  /* "cupy/cuda/cublas.pyx":870
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZtrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":871
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     with nogil:
 *         status = cublasZtrsm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 *             <DiagType>diag, m, n, &a, <const cuDoubleComplex*>Aarray, lda,
 */
        __pyx_v_status = cublasZtrsm(((cublasHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasFillMode_t)__pyx_v_uplo), ((cublasOperation_t)__pyx_v_trans), ((cublasDiagType_t)__pyx_v_diag), __pyx_v_m, __pyx_v_n, (&__pyx_v_a), ((cuDoubleComplex const *)__pyx_v_Aarray), __pyx_v_lda, ((cuDoubleComplex *)__pyx_v_Barray), __pyx_v_ldb);
      }

      /* "cupy/cuda/cublas.pyx":870
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     cdef cuDoubleComplex a = get_cu_double_complex(alpha)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZtrsm(
 *             <Handle>handle, <SideMode>side, <FillMode>uplo, <Operation>trans,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":875
 *             <DiagType>diag, m, n, &a, <const cuDoubleComplex*>Aarray, lda,
 *             <cuDoubleComplex*>Barray, ldb)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * ###############################################################################
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":864
 * 
 * 
 * cpdef ztrsm(             # <<<<<<<<<<<<<<
 *         size_t handle, int side, int uplo, int trans, int diag,
 *         int m, int n, double complex alpha, size_t Aarray, int lda,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.ztrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_97ztrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_96ztrsm[] = "ztrsm(size_t handle, int side, int uplo, int trans, int diag, int m, int n, double complex alpha, size_t Aarray, int lda, size_t Barray, int ldb)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_97ztrsm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_uplo;
  int __pyx_v_trans;
  int __pyx_v_diag;
  int __pyx_v_m;
  int __pyx_v_n;
  __pyx_t_double_complex __pyx_v_alpha;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_Barray;
  int __pyx_v_ldb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ztrsm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_uplo,&__pyx_n_s_trans,&__pyx_n_s_diag,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_Barray,&__pyx_n_s_ldb,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 1); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 2); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 3); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_diag)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 4); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 5); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 6); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 7); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 8); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 9); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Barray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 10); __PYX_ERR(0, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, 11); __PYX_ERR(0, 864, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ztrsm") < 0)) __PYX_ERR(0, 864, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_diag = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_diag == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyComplex_As___pyx_t_double_complex(values[7]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    __pyx_v_Barray = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_Barray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ztrsm", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 864, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.ztrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_96ztrsm(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_96ztrsm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_uplo, int __pyx_v_trans, int __pyx_v_diag, int __pyx_v_m, int __pyx_v_n, __pyx_t_double_complex __pyx_v_alpha, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_Barray, int __pyx_v_ldb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ztrsm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_ztrsm(__pyx_v_handle, __pyx_v_side, __pyx_v_uplo, __pyx_v_trans, __pyx_v_diag, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_Barray, __pyx_v_ldb, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.ztrsm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":881
 * ###############################################################################
 * 
 * cpdef sgeam(size_t handle, int transa, int transb, int m, int n,             # <<<<<<<<<<<<<<
 *             float alpha, size_t A, int lda, float beta, size_t B, int ldb,
 *             size_t C, int ldc):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_99sgeam(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgeam(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, float __pyx_v_beta, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_C, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgeam", 0);

  /* "cupy/cuda/cublas.pyx":884
 *             float alpha, size_t A, int lda, float beta, size_t B, int ldb,
 *             size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgeam(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":885
 *             size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgeam(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":886
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgeam(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n,
 *             &alpha, <const float*>A, lda, &beta, <const float*>B, ldb,
 */
        __pyx_v_status = cublasSgeam(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((float const *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_beta), ((float const *)__pyx_v_B), __pyx_v_ldb, ((float *)__pyx_v_C), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":885
 *             size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgeam(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":890
 *             &alpha, <const float*>A, lda, &beta, <const float*>B, ldb,
 *             <float*>C, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":881
 * ###############################################################################
 * 
 * cpdef sgeam(size_t handle, int transa, int transb, int m, int n,             # <<<<<<<<<<<<<<
 *             float alpha, size_t A, int lda, float beta, size_t B, int ldb,
 *             size_t C, int ldc):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgeam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_99sgeam(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_98sgeam[] = "sgeam(size_t handle, int transa, int transb, int m, int n, float alpha, size_t A, int lda, float beta, size_t B, int ldb, size_t C, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_99sgeam(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  float __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  float __pyx_v_beta;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgeam (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_beta,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_C,&__pyx_n_s_ldc,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 1); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 2); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 3); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 4); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 5); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 6); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 7); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 8); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 9); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 10); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 11); __PYX_ERR(0, 881, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, 12); __PYX_ERR(0, 881, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgeam") < 0)) __PYX_ERR(0, 881, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 13) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 883, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 883, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgeam", 1, 13, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 881, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgeam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_98sgeam(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_beta, __pyx_v_B, __pyx_v_ldb, __pyx_v_C, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_98sgeam(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, float __pyx_v_beta, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_C, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgeam", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgeam(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_beta, __pyx_v_B, __pyx_v_ldb, __pyx_v_C, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgeam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":893
 * 
 * 
 * cpdef dgeam(size_t handle, int transa, int transb, int m, int n,             # <<<<<<<<<<<<<<
 *             double alpha, size_t A, int lda, double beta, size_t B, int ldb,
 *             size_t C, int ldc):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_101dgeam(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgeam(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, double __pyx_v_beta, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_C, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgeam", 0);

  /* "cupy/cuda/cublas.pyx":896
 *             double alpha, size_t A, int lda, double beta, size_t B, int ldb,
 *             size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDgeam(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":897
 *             size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgeam(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":898
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDgeam(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n,
 *             &alpha, <const double*>A, lda, &beta, <const double*>B, ldb,
 */
        __pyx_v_status = cublasDgeam(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, (&__pyx_v_alpha), ((double const *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_beta), ((double const *)__pyx_v_B), __pyx_v_ldb, ((double *)__pyx_v_C), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":897
 *             size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgeam(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":902
 *             &alpha, <const double*>A, lda, &beta, <const double*>B, ldb,
 *             <double*>C, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":893
 * 
 * 
 * cpdef dgeam(size_t handle, int transa, int transb, int m, int n,             # <<<<<<<<<<<<<<
 *             double alpha, size_t A, int lda, double beta, size_t B, int ldb,
 *             size_t C, int ldc):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgeam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_101dgeam(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_100dgeam[] = "dgeam(size_t handle, int transa, int transb, int m, int n, double alpha, size_t A, int lda, double beta, size_t B, int ldb, size_t C, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_101dgeam(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  double __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  double __pyx_v_beta;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgeam (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_beta,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_C,&__pyx_n_s_ldc,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 1); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 2); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 3); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 4); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 5); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 6); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 7); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 8); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 9); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 10); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 11); __PYX_ERR(0, 893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, 12); __PYX_ERR(0, 893, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgeam") < 0)) __PYX_ERR(0, 893, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 13) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgeam", 1, 13, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 893, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dgeam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_100dgeam(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_beta, __pyx_v_B, __pyx_v_ldb, __pyx_v_C, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_100dgeam(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, double __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_lda, double __pyx_v_beta, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_C, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgeam", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dgeam(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_alpha, __pyx_v_A, __pyx_v_lda, __pyx_v_beta, __pyx_v_B, __pyx_v_ldb, __pyx_v_C, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgeam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":905
 * 
 * 
 * cpdef sdgmm(size_t handle, int mode, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *             size_t x, int incx, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_103sdgmm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sdgmm(size_t __pyx_v_handle, int __pyx_v_mode, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_C, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sdgmm", 0);

  /* "cupy/cuda/cublas.pyx":907
 * cpdef sdgmm(size_t handle, int mode, int m, int n, size_t A, int lda,
 *             size_t x, int incx, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSdgmm(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":908
 *             size_t x, int incx, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSdgmm(
 *             <Handle>handle, <SideMode>mode, m, n, <float*>A, lda, <float*>x,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":909
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSdgmm(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>mode, m, n, <float*>A, lda, <float*>x,
 *             incx, <float*>C, ldc)
 */
        __pyx_v_status = cublasSdgmm(((cublasHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_mode), __pyx_v_m, __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_x), __pyx_v_incx, ((float *)__pyx_v_C), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":908
 *             size_t x, int incx, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSdgmm(
 *             <Handle>handle, <SideMode>mode, m, n, <float*>A, lda, <float*>x,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":912
 *             <Handle>handle, <SideMode>mode, m, n, <float*>A, lda, <float*>x,
 *             incx, <float*>C, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":905
 * 
 * 
 * cpdef sdgmm(size_t handle, int mode, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *             size_t x, int incx, size_t C, int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sdgmm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_103sdgmm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_102sdgmm[] = "sdgmm(size_t handle, int mode, int m, int n, size_t A, int lda, size_t x, int incx, size_t C, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_103sdgmm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_mode;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_x;
  int __pyx_v_incx;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sdgmm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_mode,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_x,&__pyx_n_s_incx,&__pyx_n_s_C,&__pyx_n_s_ldc,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 1); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 2); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 3); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 4); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 5); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 6); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_incx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 7); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 8); __PYX_ERR(0, 905, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, 9); __PYX_ERR(0, 905, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sdgmm") < 0)) __PYX_ERR(0, 905, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L3_error)
    __pyx_v_mode = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_mode == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 905, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L3_error)
    __pyx_v_incx = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_incx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 906, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sdgmm", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 905, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sdgmm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_102sdgmm(__pyx_self, __pyx_v_handle, __pyx_v_mode, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_C, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_102sdgmm(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_mode, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_x, int __pyx_v_incx, size_t __pyx_v_C, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sdgmm", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sdgmm(__pyx_v_handle, __pyx_v_mode, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_x, __pyx_v_incx, __pyx_v_C, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sdgmm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":915
 * 
 * 
 * cpdef sgemmEx(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float alpha, size_t A, int Atype, int lda, size_t B,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_105sgemmEx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgemmEx(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_Atype, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_Btype, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_Ctype, int __pyx_v_ldc, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemmEx", 0);

  /* "cupy/cuda/cublas.pyx":920
 *         int Btype, int ldb, float beta, size_t C, int Ctype,
 *         int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgemmEx(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":921
 *         int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemmEx(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":922
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgemmEx(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             &alpha, <const void*>A, <runtime.DataType>Atype, lda,
 */
        __pyx_v_status = cublasSgemmEx(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, (&__pyx_v_alpha), ((void const *)__pyx_v_A), ((cudaDataType)__pyx_v_Atype), __pyx_v_lda, ((void const *)__pyx_v_B), ((cudaDataType)__pyx_v_Btype), __pyx_v_ldb, (&__pyx_v_beta), ((void *)__pyx_v_C), ((cudaDataType)__pyx_v_Ctype), __pyx_v_ldc);
      }

      /* "cupy/cuda/cublas.pyx":921
 *         int ldc):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgemmEx(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":927
 *             <const void*>B, <runtime.DataType>Btype, ldb, &beta, <void*>C,
 *             <runtime.DataType>Ctype, ldc)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":915
 * 
 * 
 * cpdef sgemmEx(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         float alpha, size_t A, int Atype, int lda, size_t B,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_105sgemmEx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_104sgemmEx[] = "sgemmEx(size_t handle, int transa, int transb, int m, int n, int k, float alpha, size_t A, int Atype, int lda, size_t B, int Btype, int ldb, float beta, size_t C, int Ctype, int ldc)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_105sgemmEx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  float __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_Atype;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_Btype;
  int __pyx_v_ldb;
  float __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_Ctype;
  int __pyx_v_ldc;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgemmEx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_Atype,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_Btype,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_Ctype,&__pyx_n_s_ldc,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 1); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 2); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 3); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 4); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 5); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 6); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 7); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Atype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 8); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 9); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 10); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Btype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 11); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 12); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 13); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 14); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ctype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 15); __PYX_ERR(0, 915, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, 16); __PYX_ERR(0, 915, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgemmEx") < 0)) __PYX_ERR(0, 915, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 17) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_Atype = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_Atype == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 917, __pyx_L3_error)
    __pyx_v_Btype = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_Btype == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
    __pyx_v_beta = __pyx_PyFloat_AsFloat(values[13]); if (unlikely((__pyx_v_beta == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
    __pyx_v_Ctype = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_Ctype == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[16]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 919, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgemmEx", 1, 17, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 915, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_104sgemmEx(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_Atype, __pyx_v_lda, __pyx_v_B, __pyx_v_Btype, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_Ctype, __pyx_v_ldc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_104sgemmEx(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, float __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_Atype, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_Btype, int __pyx_v_ldb, float __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_Ctype, int __pyx_v_ldc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgemmEx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgemmEx(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_Atype, __pyx_v_lda, __pyx_v_B, __pyx_v_Btype, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_Ctype, __pyx_v_ldc, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgemmEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":930
 * 
 * 
 * cpdef sgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_107sgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgetrfBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetrfBatched", 0);

  /* "cupy/cuda/cublas.pyx":932
 * cpdef sgetrfBatched(size_t handle, int n, size_t Aarray, int lda,
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgetrfBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":933
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgetrfBatched(
 *             <Handle>handle, n, <float**>Aarray, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":934
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgetrfBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <float**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 */
        __pyx_v_status = cublasSgetrfBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((float **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":933
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgetrfBatched(
 *             <Handle>handle, n, <float**>Aarray, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":937
 *             <Handle>handle, n, <float**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":930
 * 
 * 
 * cpdef sgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_107sgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_106sgetrfBatched[] = "sgetrfBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_107sgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgetrfBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrfBatched", 1, 7, 7, 1); __PYX_ERR(0, 930, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrfBatched", 1, 7, 7, 2); __PYX_ERR(0, 930, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrfBatched", 1, 7, 7, 3); __PYX_ERR(0, 930, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrfBatched", 1, 7, 7, 4); __PYX_ERR(0, 930, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrfBatched", 1, 7, 7, 5); __PYX_ERR(0, 930, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrfBatched", 1, 7, 7, 6); __PYX_ERR(0, 930, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgetrfBatched") < 0)) __PYX_ERR(0, 930, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 930, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 930, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 930, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 930, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 931, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 931, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 931, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgetrfBatched", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 930, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_106sgetrfBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_106sgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetrfBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgetrfBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":940
 * 
 * 
 * cpdef dgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_109dgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgetrfBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetrfBatched", 0);

  /* "cupy/cuda/cublas.pyx":942
 * cpdef dgetrfBatched(size_t handle, int n, size_t Aarray, int lda,
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDgetrfBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":943
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgetrfBatched(
 *             <Handle>handle, n, <double**>Aarray, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":944
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDgetrfBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <double**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 */
        __pyx_v_status = cublasDgetrfBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((double **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":943
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgetrfBatched(
 *             <Handle>handle, n, <double**>Aarray, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":947
 *             <Handle>handle, n, <double**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":940
 * 
 * 
 * cpdef dgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_109dgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_108dgetrfBatched[] = "dgetrfBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_109dgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgetrfBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrfBatched", 1, 7, 7, 1); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrfBatched", 1, 7, 7, 2); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrfBatched", 1, 7, 7, 3); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrfBatched", 1, 7, 7, 4); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrfBatched", 1, 7, 7, 5); __PYX_ERR(0, 940, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrfBatched", 1, 7, 7, 6); __PYX_ERR(0, 940, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgetrfBatched") < 0)) __PYX_ERR(0, 940, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 940, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 941, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 941, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 941, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgetrfBatched", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 940, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_108dgetrfBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_108dgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetrfBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dgetrfBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":950
 * 
 * 
 * cpdef cgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_111cgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgetrfBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgetrfBatched", 0);

  /* "cupy/cuda/cublas.pyx":952
 * cpdef cgetrfBatched(size_t handle, int n, size_t Aarray, int lda,
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgetrfBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":953
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgetrfBatched(
 *             <Handle>handle, n, <cuComplex**>Aarray, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":954
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgetrfBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <cuComplex**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 */
        __pyx_v_status = cublasCgetrfBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuComplex **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":953
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgetrfBatched(
 *             <Handle>handle, n, <cuComplex**>Aarray, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":957
 *             <Handle>handle, n, <cuComplex**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":950
 * 
 * 
 * cpdef cgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_111cgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_110cgetrfBatched[] = "cgetrfBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_111cgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgetrfBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetrfBatched", 1, 7, 7, 1); __PYX_ERR(0, 950, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetrfBatched", 1, 7, 7, 2); __PYX_ERR(0, 950, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetrfBatched", 1, 7, 7, 3); __PYX_ERR(0, 950, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetrfBatched", 1, 7, 7, 4); __PYX_ERR(0, 950, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetrfBatched", 1, 7, 7, 5); __PYX_ERR(0, 950, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetrfBatched", 1, 7, 7, 6); __PYX_ERR(0, 950, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgetrfBatched") < 0)) __PYX_ERR(0, 950, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 950, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 951, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgetrfBatched", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 950, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_110cgetrfBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_110cgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgetrfBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgetrfBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":960
 * 
 * 
 * cpdef zgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_113zgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgetrfBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgetrfBatched", 0);

  /* "cupy/cuda/cublas.pyx":962
 * cpdef zgetrfBatched(size_t handle, int n, size_t Aarray, int lda,
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgetrfBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":963
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgetrfBatched(
 *             <Handle>handle, n, <cuDoubleComplex**>Aarray, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":964
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgetrfBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <cuDoubleComplex**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 */
        __pyx_v_status = cublasZgetrfBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuDoubleComplex **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":963
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgetrfBatched(
 *             <Handle>handle, n, <cuDoubleComplex**>Aarray, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":967
 *             <Handle>handle, n, <cuDoubleComplex**>Aarray, lda,
 *             <int*>PivotArray, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":960
 * 
 * 
 * cpdef zgetrfBatched(size_t handle, int n, size_t Aarray, int lda,             # <<<<<<<<<<<<<<
 *                     size_t PivotArray, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_113zgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_112zgetrfBatched[] = "zgetrfBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_113zgetrfBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgetrfBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetrfBatched", 1, 7, 7, 1); __PYX_ERR(0, 960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetrfBatched", 1, 7, 7, 2); __PYX_ERR(0, 960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetrfBatched", 1, 7, 7, 3); __PYX_ERR(0, 960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetrfBatched", 1, 7, 7, 4); __PYX_ERR(0, 960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetrfBatched", 1, 7, 7, 5); __PYX_ERR(0, 960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetrfBatched", 1, 7, 7, 6); __PYX_ERR(0, 960, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgetrfBatched") < 0)) __PYX_ERR(0, 960, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 960, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgetrfBatched", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 960, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_112zgetrfBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_112zgetrfBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgetrfBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgetrfBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgetrfBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":970
 * 
 * 
 * cpdef sgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_115sgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_sgetriBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetriBatched", 0);

  /* "cupy/cuda/cublas.pyx":973
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasSgetriBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":974
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgetriBatched(
 *             <Handle>handle, n, <const float**>Aarray, lda, <int*>PivotArray,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":975
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasSgetriBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <const float**>Aarray, lda, <int*>PivotArray,
 *             <float**>Carray, ldc, <int*>infoArray, batchSize)
 */
        __pyx_v_status = cublasSgetriBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((float const **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((float **)__pyx_v_Carray), __pyx_v_ldc, ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":974
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasSgetriBatched(
 *             <Handle>handle, n, <const float**>Aarray, lda, <int*>PivotArray,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":978
 *             <Handle>handle, n, <const float**>Aarray, lda, <int*>PivotArray,
 *             <float**>Carray, ldc, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":970
 * 
 * 
 * cpdef sgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_115sgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_114sgetriBatched[] = "sgetriBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t Carray, int ldc, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_115sgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgetriBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 1); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 2); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 3); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 4); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 5); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 6); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 7); __PYX_ERR(0, 970, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, 8); __PYX_ERR(0, 970, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgetriBatched") < 0)) __PYX_ERR(0, 970, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgetriBatched", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 970, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.sgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_114sgetriBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_114sgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetriBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_sgetriBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.sgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":981
 * 
 * 
 * cpdef dgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_117dgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dgetriBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetriBatched", 0);

  /* "cupy/cuda/cublas.pyx":984
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDgetriBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":985
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgetriBatched(
 *             <Handle>handle, n, <const double**>Aarray, lda, <int*>PivotArray,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":986
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDgetriBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <const double**>Aarray, lda, <int*>PivotArray,
 *             <double**>Carray, ldc, <int*>infoArray, batchSize)
 */
        __pyx_v_status = cublasDgetriBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((double const **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((double **)__pyx_v_Carray), __pyx_v_ldc, ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":985
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDgetriBatched(
 *             <Handle>handle, n, <const double**>Aarray, lda, <int*>PivotArray,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":989
 *             <Handle>handle, n, <const double**>Aarray, lda, <int*>PivotArray,
 *             <double**>Carray, ldc, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":981
 * 
 * 
 * cpdef dgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_117dgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_116dgetriBatched[] = "dgetriBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t Carray, int ldc, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_117dgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgetriBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 1); __PYX_ERR(0, 981, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 2); __PYX_ERR(0, 981, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 3); __PYX_ERR(0, 981, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 4); __PYX_ERR(0, 981, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 5); __PYX_ERR(0, 981, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 6); __PYX_ERR(0, 981, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 7); __PYX_ERR(0, 981, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, 8); __PYX_ERR(0, 981, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgetriBatched") < 0)) __PYX_ERR(0, 981, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgetriBatched", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 981, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_116dgetriBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_116dgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetriBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dgetriBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":992
 * 
 * 
 * cpdef cgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_119cgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_cgetriBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgetriBatched", 0);

  /* "cupy/cuda/cublas.pyx":995
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasCgetriBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":996
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgetriBatched(
 *             <Handle>handle, n, <const cuComplex**>Aarray, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":997
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasCgetriBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <const cuComplex**>Aarray, lda,
 *             <int*>PivotArray,
 */
        __pyx_v_status = cublasCgetriBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuComplex const **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((cuComplex **)__pyx_v_Carray), __pyx_v_ldc, ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":996
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasCgetriBatched(
 *             <Handle>handle, n, <const cuComplex**>Aarray, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":1001
 *             <int*>PivotArray,
 *             <cuComplex**>Carray, ldc, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":992
 * 
 * 
 * cpdef cgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_119cgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_118cgetriBatched[] = "cgetriBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t Carray, int ldc, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_119cgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgetriBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 1); __PYX_ERR(0, 992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 2); __PYX_ERR(0, 992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 3); __PYX_ERR(0, 992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 4); __PYX_ERR(0, 992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 5); __PYX_ERR(0, 992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 6); __PYX_ERR(0, 992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 7); __PYX_ERR(0, 992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, 8); __PYX_ERR(0, 992, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgetriBatched") < 0)) __PYX_ERR(0, 992, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 994, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 994, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 994, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 994, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgetriBatched", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 992, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.cgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_118cgetriBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_118cgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgetriBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_cgetriBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.cgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":1004
 * 
 * 
 * cpdef zgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_121zgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_zgetriBatched(size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgetriBatched", 0);

  /* "cupy/cuda/cublas.pyx":1007
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasZgetriBatched(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1008
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgetriBatched(
 *             <Handle>handle, n, <const cuDoubleComplex**>Aarray, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":1009
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasZgetriBatched(             # <<<<<<<<<<<<<<
 *             <Handle>handle, n, <const cuDoubleComplex**>Aarray, lda,
 *             <int*>PivotArray,
 */
        __pyx_v_status = cublasZgetriBatched(((cublasHandle_t)__pyx_v_handle), __pyx_v_n, ((cuDoubleComplex const **)__pyx_v_Aarray), __pyx_v_lda, ((int *)__pyx_v_PivotArray), ((cuDoubleComplex **)__pyx_v_Carray), __pyx_v_ldc, ((int *)__pyx_v_infoArray), __pyx_v_batchSize);
      }

      /* "cupy/cuda/cublas.pyx":1008
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasZgetriBatched(
 *             <Handle>handle, n, <const cuDoubleComplex**>Aarray, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":1013
 *             <int*>PivotArray,
 *             <cuDoubleComplex**>Carray, ldc, <int*>infoArray, batchSize)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1004
 * 
 * 
 * cpdef zgetriBatched(             # <<<<<<<<<<<<<<
 *         size_t handle, int n, size_t Aarray, int lda, size_t PivotArray,
 *         size_t Carray, int ldc, size_t infoArray, int batchSize):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_121zgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_120zgetriBatched[] = "zgetriBatched(size_t handle, int n, size_t Aarray, int lda, size_t PivotArray, size_t Carray, int ldc, size_t infoArray, int batchSize)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_121zgetriBatched(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_n;
  size_t __pyx_v_Aarray;
  int __pyx_v_lda;
  size_t __pyx_v_PivotArray;
  size_t __pyx_v_Carray;
  int __pyx_v_ldc;
  size_t __pyx_v_infoArray;
  int __pyx_v_batchSize;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgetriBatched (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_n,&__pyx_n_s_Aarray,&__pyx_n_s_lda,&__pyx_n_s_PivotArray,&__pyx_n_s_Carray,&__pyx_n_s_ldc,&__pyx_n_s_infoArray,&__pyx_n_s_batchSize,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 1); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Aarray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 2); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 3); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_PivotArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 4); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Carray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 5); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 6); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoArray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 7); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_batchSize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, 8); __PYX_ERR(0, 1004, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgetriBatched") < 0)) __PYX_ERR(0, 1004, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1005, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1005, __pyx_L3_error)
    __pyx_v_Aarray = __Pyx_PyInt_As_size_t(values[2]); if (unlikely((__pyx_v_Aarray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1005, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1005, __pyx_L3_error)
    __pyx_v_PivotArray = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_PivotArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1005, __pyx_L3_error)
    __pyx_v_Carray = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_Carray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1006, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1006, __pyx_L3_error)
    __pyx_v_infoArray = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_infoArray == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1006, __pyx_L3_error)
    __pyx_v_batchSize = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_batchSize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1006, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgetriBatched", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1004, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.zgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_120zgetriBatched(__pyx_self, __pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_120zgetriBatched(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_n, size_t __pyx_v_Aarray, int __pyx_v_lda, size_t __pyx_v_PivotArray, size_t __pyx_v_Carray, int __pyx_v_ldc, size_t __pyx_v_infoArray, int __pyx_v_batchSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgetriBatched", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_zgetriBatched(__pyx_v_handle, __pyx_v_n, __pyx_v_Aarray, __pyx_v_lda, __pyx_v_PivotArray, __pyx_v_Carray, __pyx_v_ldc, __pyx_v_infoArray, __pyx_v_batchSize, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.zgetriBatched", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":1016
 * 
 * 
 * cpdef gemmEx(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         size_t alpha, size_t A, int Atype, int lda, size_t B,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_123gemmEx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_gemmEx(size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_Atype, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_Btype, int __pyx_v_ldb, size_t __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_Ctype, int __pyx_v_ldc, int __pyx_v_computeType, int __pyx_v_algo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("gemmEx", 0);

  /* "cupy/cuda/cublas.pyx":1021
 *         int Btype, int ldb, size_t beta, size_t C, int Ctype,
 *         int ldc, int computeType, int algo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasGemmEx(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1022
 *         int ldc, int computeType, int algo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGemmEx(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":1023
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasGemmEx(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 *             <const void*>alpha,
 */
        __pyx_v_status = cublasGemmEx(((cublasHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_transa), ((cublasOperation_t)__pyx_v_transb), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((void const *)__pyx_v_alpha), ((void const *)__pyx_v_A), ((cudaDataType)__pyx_v_Atype), __pyx_v_lda, ((void const *)__pyx_v_B), ((cudaDataType)__pyx_v_Btype), __pyx_v_ldb, ((void const *)__pyx_v_beta), ((void *)__pyx_v_C), ((cudaDataType)__pyx_v_Ctype), __pyx_v_ldc, ((cudaDataType)__pyx_v_computeType), ((cublasGemmAlgo_t)__pyx_v_algo));
      }

      /* "cupy/cuda/cublas.pyx":1022
 *         int ldc, int computeType, int algo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasGemmEx(
 *             <Handle>handle, <Operation>transa, <Operation>transb, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":1031
 *             <void*>C, <runtime.DataType>Ctype, ldc,
 *             <runtime.DataType>computeType, <GemmAlgo>algo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1016
 * 
 * 
 * cpdef gemmEx(             # <<<<<<<<<<<<<<
 *         size_t handle, int transa, int transb, int m, int n, int k,
 *         size_t alpha, size_t A, int Atype, int lda, size_t B,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.gemmEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_123gemmEx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_122gemmEx[] = "gemmEx(size_t handle, int transa, int transb, int m, int n, int k, size_t alpha, size_t A, int Atype, int lda, size_t B, int Btype, int ldb, size_t beta, size_t C, int Ctype, int ldc, int computeType, int algo)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_123gemmEx(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_transa;
  int __pyx_v_transb;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_alpha;
  size_t __pyx_v_A;
  int __pyx_v_Atype;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_Btype;
  int __pyx_v_ldb;
  size_t __pyx_v_beta;
  size_t __pyx_v_C;
  int __pyx_v_Ctype;
  int __pyx_v_ldc;
  int __pyx_v_computeType;
  int __pyx_v_algo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gemmEx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_transa,&__pyx_n_s_transb,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_alpha,&__pyx_n_s_A,&__pyx_n_s_Atype,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_Btype,&__pyx_n_s_ldb,&__pyx_n_s_beta,&__pyx_n_s_C,&__pyx_n_s_Ctype,&__pyx_n_s_ldc,&__pyx_n_s_computeType,&__pyx_n_s_algo,0};
    PyObject* values[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 1); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 2); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 3); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 4); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 5); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 6); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 7); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Atype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 8); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 9); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 10); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Btype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 11); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 12); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 13); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 14); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ctype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 15); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 16); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_computeType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 17); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (likely((values[18] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_algo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, 18); __PYX_ERR(0, 1016, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gemmEx") < 0)) __PYX_ERR(0, 1016, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 19) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L3_error)
    __pyx_v_transa = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_transa == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L3_error)
    __pyx_v_transb = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_transb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L3_error)
    __pyx_v_alpha = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_alpha == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L3_error)
    __pyx_v_Atype = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_Atype == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L3_error)
    __pyx_v_Btype = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_Btype == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L3_error)
    __pyx_v_beta = __Pyx_PyInt_As_size_t(values[13]); if (unlikely((__pyx_v_beta == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L3_error)
    __pyx_v_Ctype = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_Ctype == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[16]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
    __pyx_v_computeType = __Pyx_PyInt_As_int(values[17]); if (unlikely((__pyx_v_computeType == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
    __pyx_v_algo = __Pyx_PyInt_As_int(values[18]); if (unlikely((__pyx_v_algo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gemmEx", 1, 19, 19, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1016, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.gemmEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_122gemmEx(__pyx_self, __pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_Atype, __pyx_v_lda, __pyx_v_B, __pyx_v_Btype, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_Ctype, __pyx_v_ldc, __pyx_v_computeType, __pyx_v_algo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_122gemmEx(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_transa, int __pyx_v_transb, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_alpha, size_t __pyx_v_A, int __pyx_v_Atype, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_Btype, int __pyx_v_ldb, size_t __pyx_v_beta, size_t __pyx_v_C, int __pyx_v_Ctype, int __pyx_v_ldc, int __pyx_v_computeType, int __pyx_v_algo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("gemmEx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_gemmEx(__pyx_v_handle, __pyx_v_transa, __pyx_v_transb, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_alpha, __pyx_v_A, __pyx_v_Atype, __pyx_v_lda, __pyx_v_B, __pyx_v_Btype, __pyx_v_ldb, __pyx_v_beta, __pyx_v_C, __pyx_v_Ctype, __pyx_v_ldc, __pyx_v_computeType, __pyx_v_algo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.gemmEx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":1034
 * 
 * 
 * cpdef stpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_125stpttr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_stpttr(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_AP, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("stpttr", 0);

  /* "cupy/cuda/cublas.pyx":1035
 * 
 * cpdef stpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasStpttr(<Handle>handle, <FillMode>uplo, n,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1036
 * cpdef stpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasStpttr(<Handle>handle, <FillMode>uplo, n,
 *                               <const float*>AP, <float*>A, lda)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":1037
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasStpttr(<Handle>handle, <FillMode>uplo, n,             # <<<<<<<<<<<<<<
 *                               <const float*>AP, <float*>A, lda)
 *     check_status(status)
 */
        __pyx_v_status = cublasStpttr(((cublasHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((float const *)__pyx_v_AP), ((float *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":1036
 * cpdef stpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasStpttr(<Handle>handle, <FillMode>uplo, n,
 *                               <const float*>AP, <float*>A, lda)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":1039
 *         status = cublasStpttr(<Handle>handle, <FillMode>uplo, n,
 *                               <const float*>AP, <float*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1034
 * 
 * 
 * cpdef stpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.stpttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_125stpttr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_124stpttr[] = "stpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_125stpttr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_AP;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stpttr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_AP,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stpttr", 1, 6, 6, 1); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stpttr", 1, 6, 6, 2); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_AP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stpttr", 1, 6, 6, 3); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stpttr", 1, 6, 6, 4); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stpttr", 1, 6, 6, 5); __PYX_ERR(0, 1034, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stpttr") < 0)) __PYX_ERR(0, 1034, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
    __pyx_v_AP = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_AP == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stpttr", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1034, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.stpttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_124stpttr(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_AP, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_124stpttr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_AP, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("stpttr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_stpttr(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_AP, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.stpttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":1042
 * 
 * 
 * cpdef dtpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_127dtpttr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dtpttr(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_AP, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dtpttr", 0);

  /* "cupy/cuda/cublas.pyx":1043
 * 
 * cpdef dtpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDtpttr(<Handle>handle, <FillMode>uplo, n,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1044
 * cpdef dtpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDtpttr(<Handle>handle, <FillMode>uplo, n,
 *                               <const double*>AP, <double*>A, lda)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":1045
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDtpttr(<Handle>handle, <FillMode>uplo, n,             # <<<<<<<<<<<<<<
 *                               <const double*>AP, <double*>A, lda)
 *     check_status(status)
 */
        __pyx_v_status = cublasDtpttr(((cublasHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((double const *)__pyx_v_AP), ((double *)__pyx_v_A), __pyx_v_lda);
      }

      /* "cupy/cuda/cublas.pyx":1044
 * cpdef dtpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDtpttr(<Handle>handle, <FillMode>uplo, n,
 *                               <const double*>AP, <double*>A, lda)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":1047
 *         status = cublasDtpttr(<Handle>handle, <FillMode>uplo, n,
 *                               <const double*>AP, <double*>A, lda)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1042
 * 
 * 
 * cpdef dtpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dtpttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_127dtpttr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_126dtpttr[] = "dtpttr(size_t handle, int uplo, int n, size_t AP, size_t A, int lda)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_127dtpttr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_AP;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dtpttr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_AP,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtpttr", 1, 6, 6, 1); __PYX_ERR(0, 1042, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtpttr", 1, 6, 6, 2); __PYX_ERR(0, 1042, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_AP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtpttr", 1, 6, 6, 3); __PYX_ERR(0, 1042, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtpttr", 1, 6, 6, 4); __PYX_ERR(0, 1042, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtpttr", 1, 6, 6, 5); __PYX_ERR(0, 1042, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dtpttr") < 0)) __PYX_ERR(0, 1042, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L3_error)
    __pyx_v_AP = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_AP == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1042, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dtpttr", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1042, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dtpttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_126dtpttr(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_AP, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_126dtpttr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_AP, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dtpttr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dtpttr(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_AP, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dtpttr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":1050
 * 
 * 
 * cpdef strttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_129strttp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_strttp(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_AP, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("strttp", 0);

  /* "cupy/cuda/cublas.pyx":1051
 * 
 * cpdef strttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasStrttp(<Handle>handle, <FillMode>uplo, n,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1052
 * cpdef strttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasStrttp(<Handle>handle, <FillMode>uplo, n,
 *                               <const float*>A, lda, <float*>AP)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":1053
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasStrttp(<Handle>handle, <FillMode>uplo, n,             # <<<<<<<<<<<<<<
 *                               <const float*>A, lda, <float*>AP)
 *     check_status(status)
 */
        __pyx_v_status = cublasStrttp(((cublasHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((float const *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_AP));
      }

      /* "cupy/cuda/cublas.pyx":1052
 * cpdef strttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasStrttp(<Handle>handle, <FillMode>uplo, n,
 *                               <const float*>A, lda, <float*>AP)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":1055
 *         status = cublasStrttp(<Handle>handle, <FillMode>uplo, n,
 *                               <const float*>A, lda, <float*>AP)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1050
 * 
 * 
 * cpdef strttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.strttp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_129strttp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_128strttp[] = "strttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_129strttp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_AP;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strttp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_AP,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strttp", 1, 6, 6, 1); __PYX_ERR(0, 1050, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strttp", 1, 6, 6, 2); __PYX_ERR(0, 1050, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strttp", 1, 6, 6, 3); __PYX_ERR(0, 1050, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strttp", 1, 6, 6, 4); __PYX_ERR(0, 1050, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_AP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strttp", 1, 6, 6, 5); __PYX_ERR(0, 1050, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "strttp") < 0)) __PYX_ERR(0, 1050, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L3_error)
    __pyx_v_AP = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_AP == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1050, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("strttp", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1050, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.strttp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_128strttp(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_AP);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_128strttp(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_AP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("strttp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_strttp(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_AP, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.strttp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cublas.pyx":1058
 * 
 * 
 * cpdef dtrttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_6cublas_131dtrttp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6cublas_dtrttp(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_AP, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dtrttp", 0);

  /* "cupy/cuda/cublas.pyx":1059
 * 
 * cpdef dtrttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cublasDtrttp(<Handle>handle, <FillMode>uplo, n,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1060
 * cpdef dtrttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDtrttp(<Handle>handle, <FillMode>uplo, n,
 *                               <const double*>A, lda, <double*>AP)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cublas.pyx":1061
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cublasDtrttp(<Handle>handle, <FillMode>uplo, n,             # <<<<<<<<<<<<<<
 *                               <const double*>A, lda, <double*>AP)
 *     check_status(status)
 */
        __pyx_v_status = cublasDtrttp(((cublasHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((double const *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_AP));
      }

      /* "cupy/cuda/cublas.pyx":1060
 * cpdef dtrttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cublasDtrttp(<Handle>handle, <FillMode>uplo, n,
 *                               <const double*>A, lda, <double*>AP)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cublas.pyx":1063
 *         status = cublasDtrttp(<Handle>handle, <FillMode>uplo, n,
 *                               <const double*>A, lda, <double*>AP)
 *     check_status(status)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1058
 * 
 * 
 * cpdef dtrttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP):             # <<<<<<<<<<<<<<
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dtrttp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_131dtrttp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6cublas_130dtrttp[] = "dtrttp(size_t handle, int uplo, int n, size_t A, int lda, size_t AP)";
static PyObject *__pyx_pw_4cupy_4cuda_6cublas_131dtrttp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_AP;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dtrttp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_AP,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrttp", 1, 6, 6, 1); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrttp", 1, 6, 6, 2); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrttp", 1, 6, 6, 3); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrttp", 1, 6, 6, 4); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_AP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtrttp", 1, 6, 6, 5); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dtrttp") < 0)) __PYX_ERR(0, 1058, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
    __pyx_v_AP = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_AP == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dtrttp", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1058, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cublas.dtrttp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6cublas_130dtrttp(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_AP);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6cublas_130dtrttp(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_AP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dtrttp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6cublas_dtrttp(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_AP, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cublas.dtrttp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"check_status", (PyCFunction)__pyx_pw_4cupy_4cuda_6cublas_1check_status, METH_O, __pyx_doc_4cupy_4cuda_6cublas_check_status},
  {"create", (PyCFunction)__pyx_pw_4cupy_4cuda_6cublas_3create, METH_NOARGS, __pyx_doc_4cupy_4cuda_6cublas_2create},
  {"destroy", (PyCFunction)__pyx_pw_4cupy_4cuda_6cublas_5destroy, METH_O, __pyx_doc_4cupy_4cuda_6cublas_4destroy},
  {"getVersion", (PyCFunction)__pyx_pw_4cupy_4cuda_6cublas_7getVersion, METH_O, __pyx_doc_4cupy_4cuda_6cublas_6getVersion},
  {"getPointerMode", (PyCFunction)__pyx_pw_4cupy_4cuda_6cublas_9getPointerMode, METH_O, __pyx_doc_4cupy_4cuda_6cublas_8getPointerMode},
  {"setPointerMode", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_11setPointerMode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_10setPointerMode},
  {"setStream", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_13setStream, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_12setStream},
  {"getStream", (PyCFunction)__pyx_pw_4cupy_4cuda_6cublas_15getStream, METH_O, __pyx_doc_4cupy_4cuda_6cublas_14getStream},
  {"setMathMode", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_17setMathMode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_16setMathMode},
  {"getMathMode", (PyCFunction)__pyx_pw_4cupy_4cuda_6cublas_19getMathMode, METH_O, __pyx_doc_4cupy_4cuda_6cublas_18getMathMode},
  {"isamax", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_21isamax, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_20isamax},
  {"isamin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_23isamin, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_22isamin},
  {"sasum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_25sasum, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_24sasum},
  {"saxpy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_27saxpy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_26saxpy},
  {"daxpy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_29daxpy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_28daxpy},
  {"sdot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_31sdot, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_30sdot},
  {"ddot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_33ddot, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_32ddot},
  {"cdotu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_35cdotu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_34cdotu},
  {"cdotc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_37cdotc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_36cdotc},
  {"zdotu", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_39zdotu, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_38zdotu},
  {"zdotc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_41zdotc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_40zdotc},
  {"snrm2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_43snrm2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_42snrm2},
  {"sscal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_45sscal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_44sscal},
  {"sgemv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_47sgemv, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_46sgemv},
  {"dgemv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_49dgemv, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_48dgemv},
  {"cgemv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_51cgemv, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_50cgemv},
  {"zgemv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_53zgemv, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_52zgemv},
  {"sger", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_55sger, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_54sger},
  {"dger", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_57dger, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_56dger},
  {"cgeru", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_59cgeru, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_58cgeru},
  {"cgerc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_61cgerc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_60cgerc},
  {"zgeru", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_63zgeru, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_62zgeru},
  {"zgerc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_65zgerc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_64zgerc},
  {"sgemm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_67sgemm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_66sgemm},
  {"dgemm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_69dgemm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_68dgemm},
  {"cgemm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_71cgemm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_70cgemm},
  {"zgemm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_73zgemm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_72zgemm},
  {"sgemmBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_75sgemmBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_74sgemmBatched},
  {"dgemmBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_77dgemmBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_76dgemmBatched},
  {"cgemmBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_79cgemmBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_78cgemmBatched},
  {"zgemmBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_81zgemmBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_80zgemmBatched},
  {"sgemmStridedBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_83sgemmStridedBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_82sgemmStridedBatched},
  {"dgemmStridedBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_85dgemmStridedBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_84dgemmStridedBatched},
  {"cgemmStridedBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_87cgemmStridedBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_86cgemmStridedBatched},
  {"zgemmStridedBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_89zgemmStridedBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_88zgemmStridedBatched},
  {"strsm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_91strsm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_90strsm},
  {"dtrsm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_93dtrsm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_92dtrsm},
  {"ctrsm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_95ctrsm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_94ctrsm},
  {"ztrsm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_97ztrsm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_96ztrsm},
  {"sgeam", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_99sgeam, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_98sgeam},
  {"dgeam", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_101dgeam, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_100dgeam},
  {"sdgmm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_103sdgmm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_102sdgmm},
  {"sgemmEx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_105sgemmEx, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_104sgemmEx},
  {"sgetrfBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_107sgetrfBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_106sgetrfBatched},
  {"dgetrfBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_109dgetrfBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_108dgetrfBatched},
  {"cgetrfBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_111cgetrfBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_110cgetrfBatched},
  {"zgetrfBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_113zgetrfBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_112zgetrfBatched},
  {"sgetriBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_115sgetriBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_114sgetriBatched},
  {"dgetriBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_117dgetriBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_116dgetriBatched},
  {"cgetriBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_119cgetriBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_118cgetriBatched},
  {"zgetriBatched", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_121zgetriBatched, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_120zgetriBatched},
  {"gemmEx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_123gemmEx, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_122gemmEx},
  {"stpttr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_125stpttr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_124stpttr},
  {"dtpttr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_127dtpttr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_126dtpttr},
  {"strttp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_129strttp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_128strttp},
  {"dtrttp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6cublas_131dtrttp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6cublas_130dtrttp},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cublas(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cublas},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cublas",
    __pyx_k_Thin_wrapper_of_CUBLAS, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_AP, __pyx_k_AP, sizeof(__pyx_k_AP), 0, 0, 1, 1},
  {&__pyx_n_s_Aarray, __pyx_k_Aarray, sizeof(__pyx_k_Aarray), 0, 0, 1, 1},
  {&__pyx_n_s_Atype, __pyx_k_Atype, sizeof(__pyx_k_Atype), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_Barray, __pyx_k_Barray, sizeof(__pyx_k_Barray), 0, 0, 1, 1},
  {&__pyx_n_s_Btype, __pyx_k_Btype, sizeof(__pyx_k_Btype), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_CUBLASError, __pyx_k_CUBLASError, sizeof(__pyx_k_CUBLASError), 0, 0, 1, 1},
  {&__pyx_n_s_CUBLASError___init, __pyx_k_CUBLASError___init, sizeof(__pyx_k_CUBLASError___init), 0, 0, 1, 1},
  {&__pyx_n_u_CUBLAS_STATUS_ALLOC_FAILED, __pyx_k_CUBLAS_STATUS_ALLOC_FAILED, sizeof(__pyx_k_CUBLAS_STATUS_ALLOC_FAILED), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_ARCH_MISMATCH, __pyx_k_CUBLAS_STATUS_ARCH_MISMATCH, sizeof(__pyx_k_CUBLAS_STATUS_ARCH_MISMATCH), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_EXECUTION_FAILED, __pyx_k_CUBLAS_STATUS_EXECUTION_FAILED, sizeof(__pyx_k_CUBLAS_STATUS_EXECUTION_FAILED), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_INTERNAL_ERROR, __pyx_k_CUBLAS_STATUS_INTERNAL_ERROR, sizeof(__pyx_k_CUBLAS_STATUS_INTERNAL_ERROR), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_INVALID_VALUE, __pyx_k_CUBLAS_STATUS_INVALID_VALUE, sizeof(__pyx_k_CUBLAS_STATUS_INVALID_VALUE), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_LICENSE_ERROR, __pyx_k_CUBLAS_STATUS_LICENSE_ERROR, sizeof(__pyx_k_CUBLAS_STATUS_LICENSE_ERROR), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_MAPPING_ERROR, __pyx_k_CUBLAS_STATUS_MAPPING_ERROR, sizeof(__pyx_k_CUBLAS_STATUS_MAPPING_ERROR), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_NOT_INITIALIZED, __pyx_k_CUBLAS_STATUS_NOT_INITIALIZED, sizeof(__pyx_k_CUBLAS_STATUS_NOT_INITIALIZED), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_NOT_SUPPORTED, __pyx_k_CUBLAS_STATUS_NOT_SUPPORTED, sizeof(__pyx_k_CUBLAS_STATUS_NOT_SUPPORTED), 0, 1, 0, 1},
  {&__pyx_n_u_CUBLAS_STATUS_SUCCESS, __pyx_k_CUBLAS_STATUS_SUCCESS, sizeof(__pyx_k_CUBLAS_STATUS_SUCCESS), 0, 1, 0, 1},
  {&__pyx_n_s_Carray, __pyx_k_Carray, sizeof(__pyx_k_Carray), 0, 0, 1, 1},
  {&__pyx_n_s_Ctype, __pyx_k_Ctype, sizeof(__pyx_k_Ctype), 0, 0, 1, 1},
  {&__pyx_n_s_PivotArray, __pyx_k_PivotArray, sizeof(__pyx_k_PivotArray), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_algo, __pyx_k_algo, sizeof(__pyx_k_algo), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_batchCount, __pyx_k_batchCount, sizeof(__pyx_k_batchCount), 0, 0, 1, 1},
  {&__pyx_n_s_batchSize, __pyx_k_batchSize, sizeof(__pyx_k_batchSize), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_computeType, __pyx_k_computeType, sizeof(__pyx_k_computeType), 0, 0, 1, 1},
  {&__pyx_n_s_cupy_cuda_cublas, __pyx_k_cupy_cuda_cublas, sizeof(__pyx_k_cupy_cuda_cublas), 0, 0, 1, 1},
  {&__pyx_kp_s_cupy_cuda_cublas_pyx, __pyx_k_cupy_cuda_cublas_pyx, sizeof(__pyx_k_cupy_cuda_cublas_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_diag, __pyx_k_diag, sizeof(__pyx_k_diag), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
  {&__pyx_n_s_incx, __pyx_k_incx, sizeof(__pyx_k_incx), 0, 0, 1, 1},
  {&__pyx_n_s_incy, __pyx_k_incy, sizeof(__pyx_k_incy), 0, 0, 1, 1},
  {&__pyx_n_s_infoArray, __pyx_k_infoArray, sizeof(__pyx_k_infoArray), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_lda, __pyx_k_lda, sizeof(__pyx_k_lda), 0, 0, 1, 1},
  {&__pyx_n_s_ldb, __pyx_k_ldb, sizeof(__pyx_k_ldb), 0, 0, 1, 1},
  {&__pyx_n_s_ldc, __pyx_k_ldc, sizeof(__pyx_k_ldc), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_side, __pyx_k_side, sizeof(__pyx_k_side), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_n_s_strideA, __pyx_k_strideA, sizeof(__pyx_k_strideA), 0, 0, 1, 1},
  {&__pyx_n_s_strideB, __pyx_k_strideB, sizeof(__pyx_k_strideB), 0, 0, 1, 1},
  {&__pyx_n_s_strideC, __pyx_k_strideC, sizeof(__pyx_k_strideC), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_trans, __pyx_k_trans, sizeof(__pyx_k_trans), 0, 0, 1, 1},
  {&__pyx_n_s_transa, __pyx_k_transa, sizeof(__pyx_k_transa), 0, 0, 1, 1},
  {&__pyx_n_s_transb, __pyx_k_transb, sizeof(__pyx_k_transb), 0, 0, 1, 1},
  {&__pyx_n_s_uplo, __pyx_k_uplo, sizeof(__pyx_k_uplo), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 302, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cupy/cuda/cublas.pyx":298
 * 
 * 
 * class CUBLASError(RuntimeError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, status):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_builtin_RuntimeError); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cupy/cuda/cublas.pyx":300
 * class CUBLASError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUBLASError, self).__init__(STATUS[status])
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_status); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cupy_cuda_cublas_pyx, __pyx_n_s_init, 300, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4cupy_4cuda_6cublas_STATUS = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("create", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_create, "size_t (int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("destroy", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_destroy, "PyObject *(size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("getVersion", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_getVersion, "int (size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("getPointerMode", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_getPointerMode, "int (size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("setPointerMode", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_setPointerMode, "PyObject *(size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("setStream", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_setStream, "PyObject *(size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("getStream", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_getStream, "size_t (size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("setMathMode", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_setMathMode, "PyObject *(size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("getMathMode", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_getMathMode, "int (size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("isamax", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_isamax, "int (size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("isamin", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_isamin, "int (size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sasum", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sasum, "float (size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("saxpy", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_saxpy, "PyObject *(size_t, int, float, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("daxpy", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_daxpy, "PyObject *(size_t, int, double, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sdot", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sdot, "PyObject *(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("ddot", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_ddot, "PyObject *(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cdotu", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cdotu, "PyObject *(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cdotc", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cdotc, "PyObject *(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zdotu", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zdotu, "PyObject *(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zdotc", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zdotc, "PyObject *(size_t, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("snrm2", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_snrm2, "float (size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sscal", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sscal, "PyObject *(size_t, int, float, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgemv", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgemv, "PyObject *(size_t, int, int, int, float, size_t, int, size_t, int, float, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgemv", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dgemv, "PyObject *(size_t, int, int, int, double, size_t, int, size_t, int, double, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgemv", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgemv, "PyObject *(size_t, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, __pyx_t_float_complex, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgemv", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgemv, "PyObject *(size_t, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, __pyx_t_double_complex, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sger", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sger, "PyObject *(size_t, int, int, float, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dger", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dger, "PyObject *(size_t, int, int, double, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgeru", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgeru, "PyObject *(size_t, int, int, __pyx_t_float_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgerc", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgerc, "PyObject *(size_t, int, int, __pyx_t_float_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgeru", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgeru, "PyObject *(size_t, int, int, __pyx_t_double_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgerc", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgerc, "PyObject *(size_t, int, int, __pyx_t_double_complex, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgemm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgemm, "PyObject *(size_t, int, int, int, int, int, float, size_t, int, size_t, int, float, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgemm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dgemm, "PyObject *(size_t, int, int, int, int, int, double, size_t, int, size_t, int, double, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgemm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgemm, "PyObject *(size_t, int, int, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, __pyx_t_float_complex, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgemm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgemm, "PyObject *(size_t, int, int, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, __pyx_t_double_complex, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgemmBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgemmBatched, "PyObject *(size_t, int, int, int, int, int, float, size_t, int, size_t, int, float, size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgemmBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dgemmBatched, "PyObject *(size_t, int, int, int, int, int, double, size_t, int, size_t, int, double, size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgemmBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgemmBatched, "PyObject *(size_t, int, int, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, __pyx_t_float_complex, size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgemmBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgemmBatched, "PyObject *(size_t, int, int, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, __pyx_t_double_complex, size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgemmStridedBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgemmStridedBatched, "PyObject *(size_t, int, int, int, int, int, float, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, float, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgemmStridedBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dgemmStridedBatched, "PyObject *(size_t, int, int, int, int, int, double, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, double, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgemmStridedBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgemmStridedBatched, "PyObject *(size_t, int, int, int, int, int, __pyx_t_float_complex, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, __pyx_t_float_complex, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgemmStridedBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgemmStridedBatched, "PyObject *(size_t, int, int, int, int, int, __pyx_t_double_complex, size_t, int, PY_LONG_LONG, size_t, int, PY_LONG_LONG, __pyx_t_double_complex, size_t, int, PY_LONG_LONG, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("strsm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_strsm, "PyObject *(size_t, int, int, int, int, int, int, float, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dtrsm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dtrsm, "PyObject *(size_t, int, int, int, int, int, int, double, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("ctrsm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_ctrsm, "PyObject *(size_t, int, int, int, int, int, int, __pyx_t_float_complex, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("ztrsm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_ztrsm, "PyObject *(size_t, int, int, int, int, int, int, __pyx_t_double_complex, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgeam", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgeam, "PyObject *(size_t, int, int, int, int, float, size_t, int, float, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgeam", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dgeam, "PyObject *(size_t, int, int, int, int, double, size_t, int, double, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sdgmm", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sdgmm, "PyObject *(size_t, int, int, int, size_t, int, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgemmEx", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgemmEx, "PyObject *(size_t, int, int, int, int, int, float, size_t, int, int, size_t, int, int, float, size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgetrfBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgetrfBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgetrfBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dgetrfBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgetrfBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgetrfBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgetrfBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgetrfBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgetriBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_sgetriBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgetriBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dgetriBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgetriBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_cgetriBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgetriBatched", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_zgetriBatched, "PyObject *(size_t, int, size_t, int, size_t, size_t, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("gemmEx", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_gemmEx, "PyObject *(size_t, int, int, int, int, int, size_t, size_t, int, int, size_t, int, int, size_t, size_t, int, int, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("stpttr", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_stpttr, "PyObject *(size_t, int, int, size_t, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dtpttr", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dtpttr, "PyObject *(size_t, int, int, size_t, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("strttp", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_strttp, "PyObject *(size_t, int, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dtrttp", (void (*)(void))__pyx_f_4cupy_4cuda_6cublas_dtrttp, "PyObject *(size_t, int, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cupy.cuda.runtime"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cupy_4cuda_7runtime_PointerAttributes = __Pyx_ImportType(__pyx_t_1, "cupy.cuda.runtime", "PointerAttributes", sizeof(struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cupy_4cuda_7runtime_PointerAttributes) __PYX_ERR(1, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cupy.cuda.stream"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_current_stream_ptr", (void (**)(void))&__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr, "size_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcublas(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcublas(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cublas(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cublas(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cublas(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cublas' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cublas(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cublas", __pyx_methods, __pyx_k_Thin_wrapper_of_CUBLAS, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cupy__cuda__cublas) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cupy.cuda.cublas")) {
      if (unlikely(PyDict_SetItemString(modules, "cupy.cuda.cublas", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cupy/cuda/cublas.pyx":285
 * 
 * cdef dict STATUS = {
 *     0: 'CUBLAS_STATUS_SUCCESS',             # <<<<<<<<<<<<<<
 *     1: 'CUBLAS_STATUS_NOT_INITIALIZED',
 *     3: 'CUBLAS_STATUS_ALLOC_FAILED',
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, __pyx_n_u_CUBLAS_STATUS_SUCCESS) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_1, __pyx_n_u_CUBLAS_STATUS_NOT_INITIALIZED) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_3, __pyx_n_u_CUBLAS_STATUS_ALLOC_FAILED) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_7, __pyx_n_u_CUBLAS_STATUS_INVALID_VALUE) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8, __pyx_n_u_CUBLAS_STATUS_ARCH_MISMATCH) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_11, __pyx_n_u_CUBLAS_STATUS_MAPPING_ERROR) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_13, __pyx_n_u_CUBLAS_STATUS_EXECUTION_FAILED) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_14, __pyx_n_u_CUBLAS_STATUS_INTERNAL_ERROR) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_15, __pyx_n_u_CUBLAS_STATUS_NOT_SUPPORTED) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_16, __pyx_n_u_CUBLAS_STATUS_LICENSE_ERROR) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_4cupy_4cuda_6cublas_STATUS);
  __Pyx_DECREF_SET(__pyx_v_4cupy_4cuda_6cublas_STATUS, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":298
 * 
 * 
 * class CUBLASError(RuntimeError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, status):
 */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_tuple_, __pyx_n_s_CUBLASError, __pyx_n_s_CUBLASError, (PyObject *) NULL, __pyx_n_s_cupy_cuda_cublas, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cupy/cuda/cublas.pyx":300
 * class CUBLASError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUBLASError, self).__init__(STATUS[status])
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6cublas_11CUBLASError_1__init__, 0, __pyx_n_s_CUBLASError___init, NULL, __pyx_n_s_cupy_cuda_cublas, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_3) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/cublas.pyx":298
 * 
 * 
 * class CUBLASError(RuntimeError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, status):
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_CUBLASError, __pyx_tuple_, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CUBLASError, __pyx_t_3) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cublas.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * """Thin wrapper of CUBLAS."""
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_DEFAULT_MATH);
    if (unlikely(!wrapped)) __PYX_ERR(2, 54, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_DEFAULT_MATH", wrapped) < 0) __PYX_ERR(2, 54, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_DIAG_NON_UNIT);
    if (unlikely(!wrapped)) __PYX_ERR(2, 43, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_DIAG_NON_UNIT", wrapped) < 0) __PYX_ERR(2, 43, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_DIAG_UNIT);
    if (unlikely(!wrapped)) __PYX_ERR(2, 44, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_DIAG_UNIT", wrapped) < 0) __PYX_ERR(2, 44, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_FILL_MODE_LOWER);
    if (unlikely(!wrapped)) __PYX_ERR(2, 40, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_FILL_MODE_LOWER", wrapped) < 0) __PYX_ERR(2, 40, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_FILL_MODE_UPPER);
    if (unlikely(!wrapped)) __PYX_ERR(2, 41, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_FILL_MODE_UPPER", wrapped) < 0) __PYX_ERR(2, 41, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DEFAULT);
    if (unlikely(!wrapped)) __PYX_ERR(2, 46, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_GEMM_DEFAULT", wrapped) < 0) __PYX_ERR(2, 46, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DEFAULT_TENSOR_OP);
    if (unlikely(!wrapped)) __PYX_ERR(2, 47, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_GEMM_DEFAULT_TENSOR_OP", wrapped) < 0) __PYX_ERR(2, 47, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DFALT);
    if (unlikely(!wrapped)) __PYX_ERR(2, 51, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_GEMM_DFALT", wrapped) < 0) __PYX_ERR(2, 51, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_GEMM_DFALT_TENSOR_OP);
    if (unlikely(!wrapped)) __PYX_ERR(2, 52, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_GEMM_DFALT_TENSOR_OP", wrapped) < 0) __PYX_ERR(2, 52, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_OP_C);
    if (unlikely(!wrapped)) __PYX_ERR(2, 32, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_OP_C", wrapped) < 0) __PYX_ERR(2, 32, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_OP_N);
    if (unlikely(!wrapped)) __PYX_ERR(2, 30, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_OP_N", wrapped) < 0) __PYX_ERR(2, 30, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_OP_T);
    if (unlikely(!wrapped)) __PYX_ERR(2, 31, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_OP_T", wrapped) < 0) __PYX_ERR(2, 31, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_POINTER_MODE_DEVICE);
    if (unlikely(!wrapped)) __PYX_ERR(2, 35, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_POINTER_MODE_DEVICE", wrapped) < 0) __PYX_ERR(2, 35, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_POINTER_MODE_HOST);
    if (unlikely(!wrapped)) __PYX_ERR(2, 34, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_POINTER_MODE_HOST", wrapped) < 0) __PYX_ERR(2, 34, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_SIDE_LEFT);
    if (unlikely(!wrapped)) __PYX_ERR(2, 37, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_SIDE_LEFT", wrapped) < 0) __PYX_ERR(2, 37, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_SIDE_RIGHT);
    if (unlikely(!wrapped)) __PYX_ERR(2, 38, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_SIDE_RIGHT", wrapped) < 0) __PYX_ERR(2, 38, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_6cublas_CUBLAS_TENSOR_OP_MATH);
    if (unlikely(!wrapped)) __PYX_ERR(2, 55, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUBLAS_TENSOR_OP_MATH", wrapped) < 0) __PYX_ERR(2, 55, __pyx_L1_error);
  }

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cupy.cuda.cublas", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cupy.cuda.cublas");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* FromPy */
static __pyx_t_float_complex __Pyx_PyComplex_As___pyx_t_float_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_float_complex_from_parts(
               (float)cval.real,
               (float)cval.imag);
}

/* FromPy */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) ((PY_LONG_LONG) 0 - (PY_LONG_LONG) 1), const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
