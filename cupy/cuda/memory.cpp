/* Generated by Cython 0.29.6 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "_GLIBCXX_USE_CXX11_ABI",
                "0"
            ],
            [
                "_FORCE_INLINES",
                "1"
            ]
        ],
        "depends": [],
        "extra_link_args": [
            "-Wl,--disable-new-dtags,-rpath,/usr/local/cuda/lib64"
        ],
        "include_dirs": [
            "/usr/local/cuda/include"
        ],
        "language": "c++",
        "libraries": [
            "cublas",
            "cuda",
            "cudart",
            "cufft",
            "curand",
            "cusparse",
            "nvrtc"
        ],
        "library_dirs": [
            "/usr/local/cuda/lib64"
        ],
        "name": "cupy.cuda.memory",
        "sources": [
            "cupy/cuda/memory.pyx"
        ]
    },
    "module_name": "cupy.cuda.memory"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_6"
#define CYTHON_HEX_VERSION 0x001D06F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cupy__cuda__memory
#define __PYX_HAVE_API__cupy__cuda__memory
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <map>
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include <algorithm>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cupy/cuda/memory.pyx",
  "cupy/cuda/memory.pxd",
  "stringsource",
  "cupy/cuda/device.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "cupy/cuda/runtime.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_4cupy_4cuda_6device_Device;
struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes;
struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory;
struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer;
struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool;
struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory;
struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator;
struct __pyx_obj_4cupy_4cuda_6memory_Memory;
struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory;
struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory;
struct __pyx_obj_4cupy_4cuda_6memory__Chunk;
struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory;
struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool;
struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__;
struct __pyx_opt_args_4cupy_4cuda_7runtime_mallocManaged;
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamAddCallback;
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamWaitEvent;

/* "runtime.pxd":26
 * ###############################################################################
 * 
 * cpdef enum:             # <<<<<<<<<<<<<<
 *     memcpyHostToHost = 0
 *     memcpyHostToDevice = 1
 */
enum  {
  __pyx_e_4cupy_4cuda_7runtime_memcpyHostToHost = 0,
  __pyx_e_4cupy_4cuda_7runtime_memcpyHostToDevice = 1,
  __pyx_e_4cupy_4cuda_7runtime_memcpyDeviceToHost = 2,
  __pyx_e_4cupy_4cuda_7runtime_memcpyDeviceToDevice = 3,
  __pyx_e_4cupy_4cuda_7runtime_memcpyDefault = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemoryTypeHost = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemoryTypeDevice = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAttachGlobal = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAttachHost = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAttachSingle = 4,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocDefault = 0,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocPortable = 1,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocMapped = 2,
  __pyx_e_4cupy_4cuda_7runtime_hostAllocWriteCombined = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseSetReadMostly = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseUnsetReadMostly = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseSetPreferredLocation = 3,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseUnsetPreferredLocation = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseSetAccessedBy = 5,
  __pyx_e_4cupy_4cuda_7runtime_cudaMemAdviseUnsetAccessedBy = 6,
  __pyx_e_4cupy_4cuda_7runtime_streamDefault = 0,
  __pyx_e_4cupy_4cuda_7runtime_streamNonBlocking = 1,
  __pyx_e_4cupy_4cuda_7runtime_eventDefault = 0,
  __pyx_e_4cupy_4cuda_7runtime_eventBlockingSync = 1,
  __pyx_e_4cupy_4cuda_7runtime_eventDisableTiming = 2,
  __pyx_e_4cupy_4cuda_7runtime_eventInterprocess = 4,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_32F = 0,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_64F = 1,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_16F = 2,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_8I = 3,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_32F = 4,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_64F = 5,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_16F = 6,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_8I = 7,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_R_8U = 8,
  __pyx_e_4cupy_4cuda_7runtime_CUDA_C_8U = 9,
  __pyx_e_4cupy_4cuda_7runtime_errorMemoryAllocation = 2,
  __pyx_e_4cupy_4cuda_7runtime_errorInvalidValue = 11,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxThreadsPerBlock = 1,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxBlockDimX = 2,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxBlockDimY = 3,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxBlockDimZ = 4,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxGridDimX = 5,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxGridDimY = 6,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxGridDimZ = 7,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSharedMemoryPerBlock = 8,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTotalConstantMemory = 9,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrWarpSize = 10,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxPitch = 11,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxRegistersPerBlock = 12,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrClockRate = 13,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTextureAlignment = 14,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrGpuOverlap = 15,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMultiProcessorCount = 16,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrKernelExecTimeout = 17,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrIntegrated = 18,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCanMapHostMemory = 19,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputeMode = 20,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DWidth = 21,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DWidth = 22,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DHeight = 23,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DWidth = 24,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DHeight = 25,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DDepth = 26,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLayeredWidth = 27,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLayeredHeight = 28,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLayeredLayers = 29,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrSurfaceAlignment = 30,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrConcurrentKernels = 31,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrEccEnabled = 32,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPciBusId = 33,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPciDeviceId = 34,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTccDriver = 35,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMemoryClockRate = 36,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrGlobalMemoryBusWidth = 37,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrL2CacheSize = 38,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxThreadsPerMultiProcessor = 39,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrAsyncEngineCount = 40,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrUnifiedAddressing = 41,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DLayeredWidth = 42,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DLayeredLayers = 43,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DGatherWidth = 45,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DGatherHeight = 46,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DWidthAlt = 47,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DHeightAlt = 48,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture3DDepthAlt = 49,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPciDomainId = 50,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrTexturePitchAlignment = 51,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTextureCubemapWidth = 52,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface1DWidth = 55,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DWidth = 56,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DHeight = 57,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface3DWidth = 58,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface3DHeight = 59,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface3DDepth = 60,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface1DLayeredWidth = 61,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface1DLayeredLayers = 62,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DLayeredWidth = 63,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DLayeredHeight = 64,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurface2DLayeredLayers = 65,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurfaceCubemapWidth = 66,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DLinearWidth = 69,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLinearWidth = 70,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLinearHeight = 71,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DLinearPitch = 72,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DMipmappedWidth = 73,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture2DMipmappedHeight = 74,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputeCapabilityMajor = 75,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputeCapabilityMinor = 76,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxTexture1DMipmappedWidth = 77,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrStreamPrioritiesSupported = 78,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrGlobalL1CacheSupported = 79,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrLocalL1CacheSupported = 80,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxRegistersPerMultiprocessor = 82,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrManagedMemory = 83,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrIsMultiGpuBoard = 84,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMultiGpuBoardGroupID = 85,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrHostNativeAtomicSupported = 86,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPageableMemoryAccess = 88,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrConcurrentManagedAccess = 89,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrComputePreemptionSupported = 90,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrReserved92 = 92,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrReserved93 = 93,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrReserved94 = 94,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCooperativeLaunch = 95,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCooperativeMultiDeviceLaunch = 96,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrCanFlushRemoteWrites = 98,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrHostRegisterSupported = 99,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrPageableMemoryAccessUsesHostPageTables = 0x64,
  __pyx_e_4cupy_4cuda_7runtime_cudaDevAttrDirectManagedMemAccessFromHost = 0x65
};

/* "runtime.pxd":209
 * 
 * cpdef intptr_t malloc(size_t size) except? 0
 * cpdef intptr_t mallocManaged(size_t size, unsigned int flags=*) except? 0             # <<<<<<<<<<<<<<
 * cpdef intptr_t hostAlloc(size_t size, unsigned int flags) except? 0
 * cpdef free(intptr_t ptr)
 */
struct __pyx_opt_args_4cupy_4cuda_7runtime_mallocManaged {
  int __pyx_n;
  unsigned int flags;
};

/* "runtime.pxd":238
 * cpdef streamDestroy(size_t stream)
 * cpdef streamSynchronize(size_t stream)
 * cpdef streamAddCallback(size_t stream, callback, intptr_t arg,             # <<<<<<<<<<<<<<
 *                         unsigned int flags=*)
 * cpdef streamQuery(size_t stream)
 */
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamAddCallback {
  int __pyx_n;
  unsigned int flags;
};

/* "runtime.pxd":241
 *                         unsigned int flags=*)
 * cpdef streamQuery(size_t stream)
 * cpdef streamWaitEvent(size_t stream, size_t event, unsigned int flags=*)             # <<<<<<<<<<<<<<
 * cpdef size_t eventCreate() except? 0
 * cpdef size_t eventCreateWithFlags(unsigned int flags) except? 0
 */
struct __pyx_opt_args_4cupy_4cuda_7runtime_streamWaitEvent {
  int __pyx_n;
  unsigned int flags;
};
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async;
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async;
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async;
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async;
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async;
struct __pyx_opt_args_4cupy_4cuda_6memory_set_allocator;
struct __pyx_opt_args_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks;
struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks;

/* "cupy/cuda/memory.pxd":30
 * 
 *     cpdef copy_from_device(self, MemoryPointer src, size_t size)
 *     cpdef copy_from_device_async(self, MemoryPointer src, size_t size,             # <<<<<<<<<<<<<<
 *                                  stream=?)
 *     cpdef copy_from_host(self, mem, size_t size)
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async {
  int __pyx_n;
  PyObject *stream;
};

/* "cupy/cuda/memory.pxd":33
 *                                  stream=?)
 *     cpdef copy_from_host(self, mem, size_t size)
 *     cpdef copy_from_host_async(self, mem, size_t size, stream=?)             # <<<<<<<<<<<<<<
 *     cpdef copy_from(self, mem, size_t size)
 *     cpdef copy_from_async(self, mem, size_t size, stream=?)
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async {
  int __pyx_n;
  PyObject *stream;
};

/* "cupy/cuda/memory.pxd":35
 *     cpdef copy_from_host_async(self, mem, size_t size, stream=?)
 *     cpdef copy_from(self, mem, size_t size)
 *     cpdef copy_from_async(self, mem, size_t size, stream=?)             # <<<<<<<<<<<<<<
 *     cpdef copy_to_host(self, mem, size_t size)
 *     cpdef copy_to_host_async(self, mem, size_t size, stream=?)
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async {
  int __pyx_n;
  PyObject *stream;
};

/* "cupy/cuda/memory.pxd":37
 *     cpdef copy_from_async(self, mem, size_t size, stream=?)
 *     cpdef copy_to_host(self, mem, size_t size)
 *     cpdef copy_to_host_async(self, mem, size_t size, stream=?)             # <<<<<<<<<<<<<<
 *     cpdef memset(self, int value, size_t size)
 *     cpdef memset_async(self, int value, size_t size, stream=?)
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async {
  int __pyx_n;
  PyObject *stream;
};

/* "cupy/cuda/memory.pxd":39
 *     cpdef copy_to_host_async(self, mem, size_t size, stream=?)
 *     cpdef memset(self, int value, size_t size)
 *     cpdef memset_async(self, int value, size_t size, stream=?)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async {
  int __pyx_n;
  PyObject *stream;
};

/* "cupy/cuda/memory.pxd":45
 * 
 * 
 * cpdef set_allocator(allocator=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_set_allocator {
  int __pyx_n;
  PyObject *allocator;
};

/* "cupy/cuda/memory.pxd":54
 * 
 *     cpdef MemoryPointer malloc(self, size_t size)
 *     cpdef free_all_blocks(self, stream=?)             # <<<<<<<<<<<<<<
 *     cpdef free_all_free(self)
 *     cpdef size_t n_free_blocks(self)
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks {
  int __pyx_n;
  PyObject *stream;
};

/* "cupy/cuda/memory.pyx":978
 *             rlock.unlock_fastrlock(self._free_lock)
 * 
 *     cpdef free_all_blocks(self, stream=None):             # <<<<<<<<<<<<<<
 *         """Free all **non-split** chunks"""
 *         cdef size_t stream_ptr
 */
struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks {
  int __pyx_n;
  PyObject *stream;
};

/* "cupy/cuda/memory.pyx":1153
 * 
 * 
 * ctypedef void*(*malloc_func_type)(void*, size_t, int)             # <<<<<<<<<<<<<<
 * ctypedef void(*free_func_type)(void*, void*, int)
 * 
 */
typedef void *(*__pyx_t_4cupy_4cuda_6memory_malloc_func_type)(void *, size_t, int);

/* "cupy/cuda/memory.pyx":1154
 * 
 * ctypedef void*(*malloc_func_type)(void*, size_t, int)
 * ctypedef void(*free_func_type)(void*, void*, int)             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef void (*__pyx_t_4cupy_4cuda_6memory_free_func_type)(void *, void *, int);

/* "device.pxd":7
 * cpdef str get_compute_capability()
 * 
 * cdef class Device:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public int id
 */
struct __pyx_obj_4cupy_4cuda_6device_Device {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cupy_4cuda_6device_Device *__pyx_vtab;
  int id;
  PyObject *_device_stack;
};


/* "runtime.pxd":8
 * ###############################################################################
 * 
 * cdef class PointerAttributes:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public int device
 */
struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes {
  PyObject_HEAD
  int device;
  size_t devicePointer;
  size_t hostPointer;
  int isManaged;
  int memoryType;
};


/* "cupy/cuda/memory.pxd":11
 * 
 * @cython.no_gc
 * cdef class BaseMemory:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory {
  PyObject_HEAD
  intptr_t ptr;
  size_t size;
  int device_id;
};


/* "cupy/cuda/memory.pxd":20
 * 
 * @cython.final
 * cdef class MemoryPointer:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPointer *__pyx_vtab;
  intptr_t ptr;
  int device_id;
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *mem;
};


/* "cupy/cuda/memory.pxd":48
 * 
 * 
 * cdef class MemoryPool:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPool *__pyx_vtab;
  PyObject *_pools;
};


/* "cupy/cuda/memory.pxd":63
 * 
 * @cython.no_gc
 * cdef class CFunctionAllocatorMemory(BaseMemory):             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory {
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory __pyx_base;
  intptr_t _param;
  intptr_t _free_func;
};


/* "cupy/cuda/memory.pxd":70
 * 
 * 
 * cdef class CFunctionAllocator:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_vtab;
  intptr_t _param;
  intptr_t _malloc_func;
  intptr_t _free_func;
  PyObject *_owner;
};


/* "cupy/cuda/memory.pyx":64
 * 
 * @cython.no_gc
 * cdef class Memory(BaseMemory):             # <<<<<<<<<<<<<<
 *     """Memory allocation on a CUDA device.
 * 
 */
struct __pyx_obj_4cupy_4cuda_6memory_Memory {
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory __pyx_base;
};


/* "cupy/cuda/memory.pyx":85
 * 
 * 
 * cdef class UnownedMemory(BaseMemory):             # <<<<<<<<<<<<<<
 *     """CUDA memory that is not owned by CuPy.
 * 
 */
struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory {
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory __pyx_base;
  PyObject *_owner;
};


/* "cupy/cuda/memory.pyx":113
 * 
 * @cython.no_gc
 * cdef class ManagedMemory(BaseMemory):             # <<<<<<<<<<<<<<
 *     """Managed memory (Unified memory) allocation on a CUDA device.
 * 
 */
struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory {
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory __pyx_base;
};


/* "cupy/cuda/memory.pyx":173
 * 
 * @cython.final
 * cdef class _Chunk:             # <<<<<<<<<<<<<<
 * 
 *     """A chunk points to a device memory.
 */
struct __pyx_obj_4cupy_4cuda_6memory__Chunk {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cupy_4cuda_6memory__Chunk *__pyx_vtab;
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *mem;
  ptrdiff_t offset;
  size_t size;
  size_t stream_ptr;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *prev;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *next;
};


/* "cupy/cuda/memory.pyx":546
 * @cython.final
 * @cython.no_gc
 * cdef class PooledMemory(BaseMemory):             # <<<<<<<<<<<<<<
 * 
 *     """Memory allocation for a memory pool.
 */
struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory {
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory __pyx_base;
  struct __pyx_vtabstruct_4cupy_4cuda_6memory_PooledMemory *__pyx_vtab;
  PyObject *pool;
};


/* "cupy/cuda/memory.pyx":783
 * 
 * @cython.final
 * cdef class SingleDeviceMemoryPool:             # <<<<<<<<<<<<<<
 *     """Memory pool implementation for single device.
 * 
 */
struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_vtab;
  PyObject *_allocator;
  PyObject *_in_use;
  PyObject *_free;
  PyObject *__weakref__;
  PyObject *_weakref;
  PyObject *_free_lock;
  PyObject *_in_use_lock;
  int _device_id;
  std::map<size_t,std::vector<size_t> >  _index;
  std::map<size_t,std::vector<int8_t> >  _flag;
};


/* "cupy/cuda/memory.pyx":1071
 *     """
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._pools = collections.defaultdict(
 *             lambda: SingleDeviceMemoryPool(allocator))
 */
struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ {
  PyObject_HEAD
  PyObject *__pyx_v_allocator;
};



/* "device.pxd":7
 * cpdef str get_compute_capability()
 * 
 * cdef class Device:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public int id
 */

struct __pyx_vtabstruct_4cupy_4cuda_6device_Device {
  PyObject *(*use)(struct __pyx_obj_4cupy_4cuda_6device_Device *, int __pyx_skip_dispatch);
  PyObject *(*synchronize)(struct __pyx_obj_4cupy_4cuda_6device_Device *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4cupy_4cuda_6device_Device *__pyx_vtabptr_4cupy_4cuda_6device_Device;


/* "cupy/cuda/memory.pyx":248
 * 
 * 
 * cdef class MemoryPointer:             # <<<<<<<<<<<<<<
 *     """Pointer to a point on a device memory.
 * 
 */

struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPointer {
  PyObject *(*_init)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *, ptrdiff_t);
  PyObject *(*copy_from_device)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, size_t, int __pyx_skip_dispatch);
  PyObject *(*copy_from_device_async)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async *__pyx_optional_args);
  PyObject *(*copy_from_host)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch);
  PyObject *(*copy_from_host_async)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async *__pyx_optional_args);
  PyObject *(*copy_from)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch);
  PyObject *(*copy_from_async)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async *__pyx_optional_args);
  PyObject *(*copy_to_host)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch);
  PyObject *(*copy_to_host_async)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async *__pyx_optional_args);
  PyObject *(*memset)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, int, size_t, int __pyx_skip_dispatch);
  PyObject *(*memset_async)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, int, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async *__pyx_optional_args);
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPointer *__pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer;
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer__init(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *, ptrdiff_t);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async *__pyx_optional_args);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async *__pyx_optional_args);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async *__pyx_optional_args);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async *__pyx_optional_args);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, int, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, int, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async *__pyx_optional_args);


/* "cupy/cuda/memory.pyx":1043
 * 
 * 
 * cdef class MemoryPool(object):             # <<<<<<<<<<<<<<
 * 
 *     """Memory pool for all GPU devices on the host.
 */

struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPool {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*malloc)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, size_t, int __pyx_skip_dispatch);
  PyObject *(*free_all_blocks)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks *__pyx_optional_args);
  PyObject *(*free_all_free)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch);
  size_t (*n_free_blocks)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch);
  size_t (*used_bytes)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch);
  size_t (*free_bytes)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch);
  size_t (*total_bytes)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPool *__pyx_vtabptr_4cupy_4cuda_6memory_MemoryPool;


/* "cupy/cuda/memory.pyx":1187
 * 
 * 
 * cdef class CFunctionAllocator:             # <<<<<<<<<<<<<<
 * 
 *     """Allocator with C function pointers to allocation routines.
 */

struct __pyx_vtabstruct_4cupy_4cuda_6memory_CFunctionAllocator {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*malloc)(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *, size_t, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_vtabptr_4cupy_4cuda_6memory_CFunctionAllocator;


/* "cupy/cuda/memory.pyx":173
 * 
 * @cython.final
 * cdef class _Chunk:             # <<<<<<<<<<<<<<
 * 
 *     """A chunk points to a device memory.
 */

struct __pyx_vtabstruct_4cupy_4cuda_6memory__Chunk {
  PyObject *(*_init)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *, ptrdiff_t, size_t, Py_ssize_t);
  intptr_t (*ptr)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, int __pyx_skip_dispatch);
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *(*split)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, size_t, int __pyx_skip_dispatch);
  PyObject *(*merge)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory__Chunk *__pyx_vtabptr_4cupy_4cuda_6memory__Chunk;
static PyObject *__pyx_f_4cupy_4cuda_6memory_6_Chunk__init(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *, ptrdiff_t, size_t, Py_ssize_t);
static intptr_t __pyx_f_4cupy_4cuda_6memory_6_Chunk_ptr(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, int __pyx_skip_dispatch);
static struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_f_4cupy_4cuda_6memory_6_Chunk_split(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_6_Chunk_merge(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, int __pyx_skip_dispatch);


/* "cupy/cuda/memory.pyx":546
 * @cython.final
 * @cython.no_gc
 * cdef class PooledMemory(BaseMemory):             # <<<<<<<<<<<<<<
 * 
 *     """Memory allocation for a memory pool.
 */

struct __pyx_vtabstruct_4cupy_4cuda_6memory_PooledMemory {
  PyObject *(*free)(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_PooledMemory *__pyx_vtabptr_4cupy_4cuda_6memory_PooledMemory;
static PyObject *__pyx_f_4cupy_4cuda_6memory_12PooledMemory_free(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *, int __pyx_skip_dispatch);


/* "cupy/cuda/memory.pyx":783
 * 
 * @cython.final
 * cdef class SingleDeviceMemoryPool:             # <<<<<<<<<<<<<<
 *     """Memory pool implementation for single device.
 * 
 */

struct __pyx_vtabstruct_4cupy_4cuda_6memory_SingleDeviceMemoryPool {
  PyObject *(*_arena)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch);
  std::vector<size_t>  *(*_arena_index)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t);
  std::vector<int8_t>  *(*_arena_flag)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t);
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*_alloc)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, Py_ssize_t, int __pyx_skip_dispatch);
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*malloc)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch);
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*_malloc)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch);
  PyObject *(*free)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, intptr_t, size_t, int __pyx_skip_dispatch);
  PyObject *(*free_all_blocks)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks *__pyx_optional_args);
  PyObject *(*free_all_free)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
  size_t (*n_free_blocks)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
  size_t (*used_bytes)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
  size_t (*free_bytes)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
  size_t (*total_bytes)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_vtabptr_4cupy_4cuda_6memory_SingleDeviceMemoryPool;
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch);
static CYTHON_INLINE std::vector<size_t>  *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_index(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t);
static std::vector<int8_t>  *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_flag(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t);
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, Py_ssize_t, int __pyx_skip_dispatch);
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch);
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, intptr_t, size_t, int __pyx_skip_dispatch);
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks *__pyx_optional_args);
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* py_set_remove.proto */
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* py_dict_pop.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value);

/* py_dict_iterkeys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_IterKeys(PyObject* d);

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ptrdiff_t(ptrdiff_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int8_t(int8_t value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ptrdiff_t __Pyx_PyInt_As_ptrdiff_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int8_t __Pyx_PyInt_As_int8_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_4cupy_4cuda_6memory_6_Chunk__init(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem, ptrdiff_t __pyx_v_offset, size_t __pyx_v_size, Py_ssize_t __pyx_v_stream_ptr); /* proto*/
static intptr_t __pyx_f_4cupy_4cuda_6memory_6_Chunk_ptr(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_f_4cupy_4cuda_6memory_6_Chunk_split(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_6_Chunk_merge(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_remaining, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer__init(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem, ptrdiff_t __pyx_v_offset); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_12PooledMemory_free(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE std::vector<size_t>  *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_index(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr); /* proto*/
static std::vector<int8_t>  *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_flag(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr); /* proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, Py_ssize_t __pyx_v_rounded_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, intptr_t __pyx_v_ptr, CYTHON_UNUSED size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_10MemoryPool_malloc(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, size_t __pyx_v_size, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_18CFunctionAllocator_malloc(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, size_t __pyx_v_size, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'cupy.cuda' */

/* Module declarations from 'cupy.cuda.device' */
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6device_Device = 0;
static int (*__pyx_f_4cupy_4cuda_6device_get_device_id)(int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'fastrlock' */

/* Module declarations from 'fastrlock.rlock' */
static PyObject *(*__pyx_f_9fastrlock_5rlock_create_fastrlock)(void); /*proto*/
static int (*__pyx_f_9fastrlock_5rlock_lock_fastrlock)(PyObject *, long, int); /*proto*/
static int (*__pyx_f_9fastrlock_5rlock_unlock_fastrlock)(PyObject *); /*proto*/

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'cupy.cuda.memory_hook' */
static int (*__pyx_f_4cupy_4cuda_11memory_hook__has_memory_hooks)(int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_11memory_hook_get_memory_hooks)(int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'cupy.cuda.runtime' */
static PyTypeObject *__pyx_ptype_4cupy_4cuda_7runtime_PointerAttributes = 0;
static int (*__pyx_f_4cupy_4cuda_7runtime_getDevice)(int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_setDevice)(int, int __pyx_skip_dispatch); /*proto*/
static int (*__pyx_f_4cupy_4cuda_7runtime_deviceCanAccessPeer)(int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_deviceEnablePeerAccess)(int, int __pyx_skip_dispatch); /*proto*/
static intptr_t (*__pyx_f_4cupy_4cuda_7runtime_malloc)(size_t, int __pyx_skip_dispatch); /*proto*/
static intptr_t (*__pyx_f_4cupy_4cuda_7runtime_mallocManaged)(size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_7runtime_mallocManaged *__pyx_optional_args); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_free)(intptr_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_memcpy)(intptr_t, intptr_t, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_memcpyAsync)(intptr_t, intptr_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_memset)(intptr_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_memsetAsync)(intptr_t, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_memPrefetchAsync)(intptr_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_4cupy_4cuda_7runtime_memAdvise)(intptr_t, size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes *(*__pyx_f_4cupy_4cuda_7runtime_pointerGetAttributes)(intptr_t, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'cupy.cuda.stream' */
static size_t (*__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr)(void); /*proto*/

/* Module declarations from 'cupy.cuda.memory' */
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_BaseMemory = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_MemoryPool = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_CFunctionAllocatorMemory = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_CFunctionAllocator = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_Memory = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_UnownedMemory = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_ManagedMemory = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory__Chunk = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_PooledMemory = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory_SingleDeviceMemoryPool = 0;
static PyTypeObject *__pyx_ptype_4cupy_4cuda_6memory___pyx_scope_struct____init__ = 0;
static int __pyx_v_4cupy_4cuda_6memory__exit_mode;
static PyObject *__pyx_v_4cupy_4cuda_6memory__peer_access_checked = 0;
static PyObject *__pyx_v_4cupy_4cuda_6memory__current_allocator = 0;
static int __pyx_v_4cupy_4cuda_6memory__index_compaction_threshold;
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_alloc(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_set_allocator(int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_set_allocator *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory__set_peer_access(int, int, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory__malloc(size_t, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_malloc_managed(size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory__compact_index(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory__get_chunk(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, size_t); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_f_4cupy_4cuda_6memory__try_malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory__append_to_free_list(PyObject *, std::vector<size_t>  *, std::vector<int8_t>  *, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *); /*proto*/
static int __pyx_f_4cupy_4cuda_6memory__remove_from_free_list(PyObject *, std::vector<size_t>  *, std::vector<int8_t>  *, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory__round_size(size_t, int __pyx_skip_dispatch); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory__bin_index_from_size(size_t, int __pyx_skip_dispatch); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory__call_malloc(intptr_t, intptr_t, Py_ssize_t, int, int __pyx_skip_dispatch); /*proto*/
static void __pyx_f_4cupy_4cuda_6memory__call_free(intptr_t, intptr_t, intptr_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_BaseMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_Memory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_Memory *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_UnownedMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_ManagedMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle__Chunk__set_state(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPointer__set_state(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_PooledMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_SingleDeviceMemoryPool__set_state(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPool__set_state(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocatorMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *, PyObject *); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocator__set_state(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *, PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int8_t(const std::vector<int8_t>  &); /*proto*/
static PyObject *__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___(std::map<size_t,std::vector<int8_t> >  const &); /*proto*/
static std::vector<int8_t>  __pyx_convert_vector_from_py_int8_t(PyObject *); /*proto*/
static std::map<size_t,std::vector<int8_t> >  __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_size_t(const std::vector<size_t>  &); /*proto*/
static PyObject *__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___(std::map<size_t,std::vector<size_t> >  const &); /*proto*/
static std::vector<size_t>  __pyx_convert_vector_from_py_size_t(PyObject *); /*proto*/
static std::map<size_t,std::vector<size_t> >  __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "cupy.cuda.memory"
extern int __pyx_module_is_main_cupy__cuda__memory;
int __pyx_module_is_main_cupy__cuda__memory = 0;

/* Implementation of 'cupy.cuda.memory' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_DeprecationWarning;
static const char __pyx_k_d[] = "d";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_mem[] = "mem";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_src[] = "src";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "_exit";
static const char __pyx_k_iadd[] = "__iadd__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_peer[] = "peer";
static const char __pyx_k_pool[] = "pool";
static const char __pyx_k_prev[] = "prev";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_Chunk[] = "_Chunk";
static const char __pyx_k_bytes[] = " bytes)";
static const char __pyx_k_chunk[] = "chunk";
static const char __pyx_k_owner[] = "owner";
static const char __pyx_k_param[] = "param";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_total[] = "total";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Memory[] = "Memory";
static const char __pyx_k_advise[] = "advise";
static const char __pyx_k_atexit[] = "atexit";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_device[] = "device";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_malloc[] = "_malloc";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_collect[] = "collect";
static const char __pyx_k_mem_ptr[] = "mem_ptr";
static const char __pyx_k_pmem_id[] = "pmem_id";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_runtime[] = "runtime";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_iterkeys[] = "iterkeys";
static const char __pyx_k_malloc_2[] = "malloc";
static const char __pyx_k_mem_size[] = "mem_size";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_allocator[] = "allocator";
static const char __pyx_k_cupy_cuda[] = "cupy.cuda";
static const char __pyx_k_device_id[] = "device_id";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_exit_mode[] = "_exit_mode";
static const char __pyx_k_free_func[] = "free_func";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_BaseMemory[] = "BaseMemory";
static const char __pyx_k_MemoryPool[] = "MemoryPool";
static const char __pyx_k_free_bytes[] = "free_bytes";
static const char __pyx_k_itervalues[] = "itervalues";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_used_bytes[] = "used_bytes";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_bytes_total[] = " bytes (total ";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_malloc_func[] = "malloc_func";
static const char __pyx_k_total_bytes[] = "total_bytes";
static const char __pyx_k_PooledMemory[] = "PooledMemory";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_ManagedMemory[] = "ManagedMemory";
static const char __pyx_k_MemoryPointer[] = "MemoryPointer";
static const char __pyx_k_UnownedMemory[] = "UnownedMemory";
static const char __pyx_k_free_all_free[] = "free_all_free";
static const char __pyx_k_n_free_blocks[] = "n_free_blocks";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_free_all_blocks[] = "free_all_blocks";
static const char __pyx_k_free_preprocess[] = "free_preprocess";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_CUDARuntimeError[] = "CUDARuntimeError";
static const char __pyx_k_OutOfMemoryError[] = "OutOfMemoryError";
static const char __pyx_k_alloc_preprocess[] = "alloc_preprocess";
static const char __pyx_k_cupy_cuda_memory[] = "cupy.cuda.memory";
static const char __pyx_k_free_postprocess[] = "free_postprocess";
static const char __pyx_k_alloc_postprocess[] = "alloc_postprocess";
static const char __pyx_k_malloc_preprocess[] = "malloc_preprocess";
static const char __pyx_k_CFunctionAllocator[] = "CFunctionAllocator";
static const char __pyx_k_DeprecationWarning[] = "DeprecationWarning";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_malloc_postprocess[] = "malloc_postprocess";
static const char __pyx_k_pyx_unpickle_Memory[] = "__pyx_unpickle_Memory";
static const char __pyx_k_pyx_unpickle__Chunk[] = "__pyx_unpickle__Chunk";
static const char __pyx_k_allocation_unit_size[] = "_allocation_unit_size";
static const char __pyx_k_cupy_cuda_memory_pyx[] = "cupy/cuda/memory.pyx";
static const char __pyx_k_init___locals_lambda[] = "__init__.<locals>.<lambda>";
static const char __pyx_k_SingleDeviceMemoryPool[] = "SingleDeviceMemoryPool";
static const char __pyx_k_OutOfMemoryError___init[] = "OutOfMemoryError.__init__";
static const char __pyx_k_pyx_unpickle_BaseMemory[] = "__pyx_unpickle_BaseMemory";
static const char __pyx_k_pyx_unpickle_MemoryPool[] = "__pyx_unpickle_MemoryPool";
static const char __pyx_k_CFunctionAllocatorMemory[] = "CFunctionAllocatorMemory";
static const char __pyx_k_out_of_memory_to_allocate[] = "out of memory to allocate ";
static const char __pyx_k_pyx_unpickle_PooledMemory[] = "__pyx_unpickle_PooledMemory";
static const char __pyx_k_pyx_unpickle_ManagedMemory[] = "__pyx_unpickle_ManagedMemory";
static const char __pyx_k_pyx_unpickle_MemoryPointer[] = "__pyx_unpickle_MemoryPointer";
static const char __pyx_k_pyx_unpickle_UnownedMemory[] = "__pyx_unpickle_UnownedMemory";
static const char __pyx_k_Cannot_free_out_of_pool_memory[] = "Cannot free out-of-pool memory";
static const char __pyx_k_pyx_unpickle_CFunctionAllocato[] = "__pyx_unpickle_CFunctionAllocatorMemory";
static const char __pyx_k_pyx_unpickle_SingleDeviceMemor[] = "__pyx_unpickle_SingleDeviceMemoryPool";
static const char __pyx_k_free_all_free_is_deprecated_Use[] = "free_all_free is deprecated. Use free_all_blocks instead.";
static const char __pyx_k_Incompatible_checksums_s_vs_0x06[] = "Incompatible checksums (%s vs 0x066cb05 = (_pools))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x1f[] = "Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x38[] = "Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x78[] = "Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x80[] = "Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xce[] = "Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xec[] = "Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xee[] = "Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xfa[] = "Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))";
static const char __pyx_k_pyx_unpickle_CFunctionAllocato_2[] = "__pyx_unpickle_CFunctionAllocator";
static PyObject *__pyx_n_s_BaseMemory;
static PyObject *__pyx_n_s_CFunctionAllocator;
static PyObject *__pyx_n_s_CFunctionAllocatorMemory;
static PyObject *__pyx_n_s_CUDARuntimeError;
static PyObject *__pyx_kp_u_Cannot_free_out_of_pool_memory;
static PyObject *__pyx_n_s_Chunk;
static PyObject *__pyx_n_s_DeprecationWarning;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x06;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x1f;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x38;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x78;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x80;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xce;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xec;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xee;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xfa;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_ManagedMemory;
static PyObject *__pyx_n_s_Memory;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_MemoryPointer;
static PyObject *__pyx_n_s_MemoryPool;
static PyObject *__pyx_n_s_OutOfMemoryError;
static PyObject *__pyx_n_s_OutOfMemoryError___init;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PooledMemory;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SingleDeviceMemoryPool;
static PyObject *__pyx_n_s_UnownedMemory;
static PyObject *__pyx_n_s_advise;
static PyObject *__pyx_n_s_alloc_postprocess;
static PyObject *__pyx_n_s_alloc_preprocess;
static PyObject *__pyx_n_s_allocation_unit_size;
static PyObject *__pyx_n_s_allocator;
static PyObject *__pyx_n_s_atexit;
static PyObject *__pyx_kp_u_bytes;
static PyObject *__pyx_kp_u_bytes_total;
static PyObject *__pyx_n_s_chunk;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_collect;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_ctypes;
static PyObject *__pyx_n_s_cupy_cuda;
static PyObject *__pyx_n_s_cupy_cuda_memory;
static PyObject *__pyx_kp_s_cupy_cuda_memory_pyx;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_defaultdict;
static PyObject *__pyx_n_s_device;
static PyObject *__pyx_n_s_device_id;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exit_mode;
static PyObject *__pyx_n_s_free_all_blocks;
static PyObject *__pyx_n_s_free_all_free;
static PyObject *__pyx_kp_u_free_all_free_is_deprecated_Use;
static PyObject *__pyx_n_s_free_bytes;
static PyObject *__pyx_n_s_free_func;
static PyObject *__pyx_n_s_free_postprocess;
static PyObject *__pyx_n_s_free_preprocess;
static PyObject *__pyx_n_s_gc;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_iadd;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init___locals_lambda;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_iterkeys;
static PyObject *__pyx_n_s_itervalues;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_malloc;
static PyObject *__pyx_n_s_malloc_2;
static PyObject *__pyx_n_s_malloc_func;
static PyObject *__pyx_n_s_malloc_postprocess;
static PyObject *__pyx_n_s_malloc_preprocess;
static PyObject *__pyx_n_s_mem;
static PyObject *__pyx_n_s_mem_ptr;
static PyObject *__pyx_n_s_mem_size;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_n_free_blocks;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_kp_u_out_of_memory_to_allocate;
static PyObject *__pyx_n_s_owner;
static PyObject *__pyx_n_s_param;
static PyObject *__pyx_n_s_peer;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pmem_id;
static PyObject *__pyx_n_s_pool;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prev;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_BaseMemory;
static PyObject *__pyx_n_s_pyx_unpickle_CFunctionAllocato;
static PyObject *__pyx_n_s_pyx_unpickle_CFunctionAllocato_2;
static PyObject *__pyx_n_s_pyx_unpickle_ManagedMemory;
static PyObject *__pyx_n_s_pyx_unpickle_Memory;
static PyObject *__pyx_n_s_pyx_unpickle_MemoryPointer;
static PyObject *__pyx_n_s_pyx_unpickle_MemoryPool;
static PyObject *__pyx_n_s_pyx_unpickle_PooledMemory;
static PyObject *__pyx_n_s_pyx_unpickle_SingleDeviceMemor;
static PyObject *__pyx_n_s_pyx_unpickle_UnownedMemory;
static PyObject *__pyx_n_s_pyx_unpickle__Chunk;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_ref;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_runtime;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_src;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_total;
static PyObject *__pyx_n_s_total_bytes;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_used_bytes;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_weakref;
static PyObject *__pyx_pf_4cupy_4cuda_6memory__exit(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_16OutOfMemoryError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_total); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory___int__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_6device___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_3ptr___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_3ptr_2__set__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4size___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4size_2__set__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_9device_id___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_9device_id_2__set__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_2__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_6Memory___init__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self, size_t __pyx_v_size); /* proto */
static void __pyx_pf_4cupy_4cuda_6memory_6Memory_2__dealloc__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6Memory_4__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6Memory_6__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_13UnownedMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self, intptr_t __pyx_v_ptr, size_t __pyx_v_size, PyObject *__pyx_v_owner, int __pyx_v_device_id); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_6_owner___get__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_2__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_4__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_13ManagedMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_2prefetch(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_4advise(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, int __pyx_v_advise); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_6__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_8__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_2_set_peer_access(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_device, int __pyx_v_peer); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk___init__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_2ptr(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4split(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_6merge(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_remaining); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_3mem___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_6offset___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4size___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_10stream_ptr___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev_2__set__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev_4__del__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next_2__set__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next_4__del__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_8__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_10__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer___init__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem, ptrdiff_t __pyx_v_offset); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_2__int__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_6device___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_4__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, ptrdiff_t __pyx_v_offset); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_8__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_offset); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_10__isub__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, ptrdiff_t __pyx_v_offset); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_12copy_from_device(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_14copy_from_device_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_16copy_from_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_18copy_from_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_20copy_from(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_22copy_from_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_24copy_to_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_26copy_to_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_28memset(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_30memset_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_3ptr___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_9device_id___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_3mem___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_32__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_34__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_4_malloc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_6malloc_managed(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_8alloc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10set_allocator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_allocator); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_12PooledMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk, PyObject *__pyx_v_pool); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_2free(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self); /* proto */
static void __pyx_pf_4cupy_4cuda_6memory_12PooledMemory_4__dealloc__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_4pool___get__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_6__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_8__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_12_round_size(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_14_bin_index_from_size(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool___init__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, PyObject *__pyx_v_allocator); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_2_arena(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_4_alloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, Py_ssize_t __pyx_v_rounded_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_6malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_8_malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, intptr_t __pyx_v_ptr, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_12free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_14free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_16n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_18used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_20free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_22total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10_device_id___get__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_24__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_26__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_10MemoryPool___init__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, PyObject *__pyx_v_allocator); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_2malloc(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_4free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_6free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_8n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_10used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_12free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_14total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_16__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_18__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_16_call_malloc(CYTHON_UNUSED PyObject *__pyx_self, intptr_t __pyx_v_param, intptr_t __pyx_v_malloc_func, Py_ssize_t __pyx_v_size, int __pyx_v_device_id); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_18_call_free(CYTHON_UNUSED PyObject *__pyx_self, intptr_t __pyx_v_param, intptr_t __pyx_v_free_func, intptr_t __pyx_v_ptr, int __pyx_v_device_id); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self, size_t __pyx_v_size, intptr_t __pyx_v_param, intptr_t __pyx_v_malloc_func, intptr_t __pyx_v_free_func, int __pyx_v_device_id); /* proto */
static void __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_2__dealloc__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_4__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_6__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator___init__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, intptr_t __pyx_v_param, intptr_t __pyx_v_malloc_func, intptr_t __pyx_v_free_func, PyObject *__pyx_v_owner); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_2malloc(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_4__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_6__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_20__pyx_unpickle_BaseMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_22__pyx_unpickle_Memory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_24__pyx_unpickle_UnownedMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_26__pyx_unpickle_ManagedMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_28__pyx_unpickle__Chunk(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_30__pyx_unpickle_MemoryPointer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_32__pyx_unpickle_PooledMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_34__pyx_unpickle_SingleDeviceMemoryPool(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_36__pyx_unpickle_MemoryPool(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_38__pyx_unpickle_CFunctionAllocatorMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_6memory_40__pyx_unpickle_CFunctionAllocator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_BaseMemory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_MemoryPointer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_MemoryPool(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_CFunctionAllocatorMemory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_CFunctionAllocator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_Memory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_UnownedMemory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_ManagedMemory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory__Chunk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_PooledMemory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_SingleDeviceMemoryPool(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cupy_4cuda_6memory___pyx_scope_struct____init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_iterkeys = {0, &__pyx_n_s_iterkeys, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_6736645;
static PyObject *__pyx_int_33037971;
static PyObject *__pyx_int_58968071;
static PyObject *__pyx_int_126283891;
static PyObject *__pyx_int_134903639;
static PyObject *__pyx_int_216866913;
static PyObject *__pyx_int_247866700;
static PyObject *__pyx_int_250303632;
static PyObject *__pyx_int_262405472;
static PyObject *__pyx_k_;
static PyObject *__pyx_k__5;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
/* Late includes */

/* "cupy/cuda/memory.pyx":31
 * 
 * @atexit.register
 * def _exit():             # <<<<<<<<<<<<<<
 *     _exit_mode = True
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_1_exit(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory__exit[] = "_exit()";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_1_exit = {"_exit", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_1_exit, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory__exit};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_1_exit(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_exit (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory__exit(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory__exit(CYTHON_UNUSED PyObject *__pyx_self) {
  CYTHON_UNUSED int __pyx_v__exit_mode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_exit", 0);

  /* "cupy/cuda/memory.pyx":32
 * @atexit.register
 * def _exit():
 *     _exit_mode = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v__exit_mode = 1;

  /* "cupy/cuda/memory.pyx":31
 * 
 * @atexit.register
 * def _exit():             # <<<<<<<<<<<<<<
 *     _exit_mode = True
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":37
 * class OutOfMemoryError(MemoryError):
 * 
 *     def __init__(self, size, total):             # <<<<<<<<<<<<<<
 *         msg = 'out of memory to allocate %d bytes ' \
 *               '(total %d bytes)' % (size, total)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_16OutOfMemoryError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_16OutOfMemoryError___init__[] = "OutOfMemoryError.__init__(self, size, total)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_16OutOfMemoryError_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_16OutOfMemoryError_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_16OutOfMemoryError___init__};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_16OutOfMemoryError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_total = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_size,&__pyx_n_s_total,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_total)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 37, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 37, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_size = values[1];
    __pyx_v_total = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.OutOfMemoryError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_16OutOfMemoryError___init__(__pyx_self, __pyx_v_self, __pyx_v_size, __pyx_v_total);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_16OutOfMemoryError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_size, PyObject *__pyx_v_total) {
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":38
 * 
 *     def __init__(self, size, total):
 *         msg = 'out of memory to allocate %d bytes ' \             # <<<<<<<<<<<<<<
 *               '(total %d bytes)' % (size, total)
 *         super(OutOfMemoryError, self).__init__(msg)
 */
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_out_of_memory_to_allocate);
  __pyx_t_2 += 26;
  __Pyx_GIVEREF(__pyx_kp_u_out_of_memory_to_allocate);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_out_of_memory_to_allocate);

  /* "cupy/cuda/memory.pyx":39
 *     def __init__(self, size, total):
 *         msg = 'out of memory to allocate %d bytes ' \
 *               '(total %d bytes)' % (size, total)             # <<<<<<<<<<<<<<
 *         super(OutOfMemoryError, self).__init__(msg)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_v_size, __pyx_n_u_d); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_bytes_total);
  __pyx_t_2 += 14;
  __Pyx_GIVEREF(__pyx_kp_u_bytes_total);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_bytes_total);
  __pyx_t_4 = __Pyx_PyObject_Format(__pyx_v_total, __pyx_n_u_d); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_bytes);
  __pyx_t_2 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_bytes);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_bytes);

  /* "cupy/cuda/memory.pyx":38
 * 
 *     def __init__(self, size, total):
 *         msg = 'out of memory to allocate %d bytes ' \             # <<<<<<<<<<<<<<
 *               '(total %d bytes)' % (size, total)
 *         super(OutOfMemoryError, self).__init__(msg)
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_msg = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cupy/cuda/memory.pyx":40
 *         msg = 'out of memory to allocate %d bytes ' \
 *               '(total %d bytes)' % (size, total)
 *         super(OutOfMemoryError, self).__init__(msg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OutOfMemoryError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_self);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_init); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_v_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_msg);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cupy/cuda/memory.pyx":37
 * class OutOfMemoryError(MemoryError):
 * 
 *     def __init__(self, size, total):             # <<<<<<<<<<<<<<
 *         msg = 'out of memory to allocate %d bytes ' \
 *               '(total %d bytes)' % (size, total)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.OutOfMemoryError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":54
 *     """
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         """Returns the pointer value to the head of the allocation."""
 *         return self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_1__int__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10BaseMemory___int__[] = "Returns the pointer value to the head of the allocation.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cupy_4cuda_6memory_10BaseMemory___int__;
#endif
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_1__int__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__int__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory___int__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory___int__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__int__", 0);

  /* "cupy/cuda/memory.pyx":56
 *     def __int__(self):
 *         """Returns the pointer value to the head of the allocation."""
 *         return self.ptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":54
 *     """
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         """Returns the pointer value to the head of the allocation."""
 *         return self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.__int__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":59
 * 
 *     @property
 *     def device(self):             # <<<<<<<<<<<<<<
 *         return device.Device(self.device_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_6device_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_6device_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_6device___get__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_6device___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cupy/cuda/memory.pyx":60
 *     @property
 *     def device(self):
 *         return device.Device(self.device_id)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cupy_4cuda_6device_Device), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":59
 * 
 *     @property
 *     def device(self):             # <<<<<<<<<<<<<<
 *         return device.Device(self.device_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.device.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pxd":14
 * 
 *     cdef:
 *         public intptr_t ptr             # <<<<<<<<<<<<<<
 *         public size_t size
 *         public int device_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3ptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3ptr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_3ptr___get__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_3ptr___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.ptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3ptr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3ptr_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_3ptr_2__set__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_3ptr_2__set__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  intptr_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = PyInt_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_1 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_v_self->ptr = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.ptr.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pxd":15
 *     cdef:
 *         public intptr_t ptr
 *         public size_t size             # <<<<<<<<<<<<<<
 *         public int device_id
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4size___get__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4size___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4size_2__set__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4size_2__set__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_self->size = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pxd":16
 *         public intptr_t ptr
 *         public size_t size
 *         public int device_id             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_9device_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_9device_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_9device_id___get__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_9device_id___get__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.device_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_9device_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_9device_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_9device_id_2__set__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_9device_id_2__set__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L1_error)
  __pyx_v_self->device_id = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.device_id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10BaseMemory_2__reduce_cython__[] = "BaseMemory.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_2__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_2__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.device_id, self.ptr, self.size)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_BaseMemory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_250303632);
    __Pyx_GIVEREF(__pyx_int_250303632);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_250303632);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, None), state
 *     else:
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseMemory__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_BaseMemory); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_250303632);
    __Pyx_GIVEREF(__pyx_int_250303632);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_250303632);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseMemory__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10BaseMemory_4__setstate_cython__[] = "BaseMemory.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10BaseMemory_4__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseMemory__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_BaseMemory__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseMemory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseMemory__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.BaseMemory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":73
 *     """
 * 
 *     def __init__(self, size_t size):             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.device_id = device.get_device_id()
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_6Memory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_6Memory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.Memory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6Memory___init__(((struct __pyx_obj_4cupy_4cuda_6memory_Memory *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_6Memory___init__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":74
 * 
 *     def __init__(self, size_t size):
 *         self.size = size             # <<<<<<<<<<<<<<
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0
 */
  __pyx_v_self->__pyx_base.size = __pyx_v_size;

  /* "cupy/cuda/memory.pyx":75
 *     def __init__(self, size_t size):
 *         self.size = size
 *         self.device_id = device.get_device_id()             # <<<<<<<<<<<<<<
 *         self.ptr = 0
 *         if size > 0:
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_v_self->__pyx_base.device_id = __pyx_t_1;

  /* "cupy/cuda/memory.pyx":76
 *         self.size = size
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             self.ptr = runtime.malloc(size)
 */
  __pyx_v_self->__pyx_base.ptr = 0;

  /* "cupy/cuda/memory.pyx":77
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             self.ptr = runtime.malloc(size)
 * 
 */
  __pyx_t_2 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":78
 *         self.ptr = 0
 *         if size > 0:
 *             self.ptr = runtime.malloc(size)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_malloc(__pyx_v_size, 0); if (unlikely(__pyx_t_3 == ((intptr_t)0) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L1_error)
    __pyx_v_self->__pyx_base.ptr = __pyx_t_3;

    /* "cupy/cuda/memory.pyx":77
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             self.ptr = runtime.malloc(size)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":73
 *     """
 * 
 *     def __init__(self, size_t size):             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.device_id = device.get_device_id()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.Memory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":80
 *             self.ptr = runtime.malloc(size)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr:
 *             runtime.free(self.ptr)
 */

/* Python wrapper */
static void __pyx_pw_4cupy_4cuda_6memory_6Memory_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cupy_4cuda_6memory_6Memory_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cupy_4cuda_6memory_6Memory_2__dealloc__(((struct __pyx_obj_4cupy_4cuda_6memory_Memory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cupy_4cuda_6memory_6Memory_2__dealloc__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cupy/cuda/memory.pyx":81
 * 
 *     def __dealloc__(self):
 *         if self.ptr:             # <<<<<<<<<<<<<<
 *             runtime.free(self.ptr)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.ptr != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":82
 *     def __dealloc__(self):
 *         if self.ptr:
 *             runtime.free(self.ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_7runtime_free(__pyx_v_self->__pyx_base.ptr, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":81
 * 
 *     def __dealloc__(self):
 *         if self.ptr:             # <<<<<<<<<<<<<<
 *             runtime.free(self.ptr)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":80
 *             self.ptr = runtime.malloc(size)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr:
 *             runtime.free(self.ptr)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("cupy.cuda.memory.Memory.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6Memory_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6Memory_4__reduce_cython__[] = "Memory.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6Memory_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6Memory_4__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_Memory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6Memory_4__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.device_id, self.ptr, self.size)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->__pyx_base.ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.size); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_250303632);
    __Pyx_GIVEREF(__pyx_int_250303632);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_250303632);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, None), state
 *     else:
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Memory__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_Memory); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_250303632);
    __Pyx_GIVEREF(__pyx_int_250303632);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_250303632);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.Memory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Memory__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6Memory_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6Memory_6__setstate_cython__[] = "Memory.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6Memory_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6Memory_6__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_Memory *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6Memory_6__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Memory__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_Memory__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Memory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Memory__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.Memory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":100
 *         readonly object _owner
 * 
 *     def __init__(self, intptr_t ptr, size_t size, object owner,             # <<<<<<<<<<<<<<
 *                  int device_id=-1):
 *         cdef runtime.PointerAttributes ptr_attrs
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  intptr_t __pyx_v_ptr;
  size_t __pyx_v_size;
  PyObject *__pyx_v_owner = 0;
  int __pyx_v_device_id;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptr,&__pyx_n_s_size,&__pyx_n_s_owner,&__pyx_n_s_device_id,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ptr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(0, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_owner)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(0, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device_id);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 100, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ptr = PyInt_AsSsize_t(values[0]); if (unlikely((__pyx_v_ptr == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 100, __pyx_L3_error)
    __pyx_v_owner = values[2];
    if (values[3]) {
      __pyx_v_device_id = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_device_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L3_error)
    } else {
      __pyx_v_device_id = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.UnownedMemory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13UnownedMemory___init__(((struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)__pyx_v_self), __pyx_v_ptr, __pyx_v_size, __pyx_v_owner, __pyx_v_device_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_13UnownedMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self, intptr_t __pyx_v_ptr, size_t __pyx_v_size, PyObject *__pyx_v_owner, int __pyx_v_device_id) {
  struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes *__pyx_v_ptr_attrs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":103
 *                  int device_id=-1):
 *         cdef runtime.PointerAttributes ptr_attrs
 *         if device_id < 0:             # <<<<<<<<<<<<<<
 *             ptr_attrs = runtime.pointerGetAttributes(ptr)
 *             device_id = ptr_attrs.device
 */
  __pyx_t_1 = ((__pyx_v_device_id < 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":104
 *         cdef runtime.PointerAttributes ptr_attrs
 *         if device_id < 0:
 *             ptr_attrs = runtime.pointerGetAttributes(ptr)             # <<<<<<<<<<<<<<
 *             device_id = ptr_attrs.device
 *         self.size = size
 */
    __pyx_t_2 = ((PyObject *)__pyx_f_4cupy_4cuda_7runtime_pointerGetAttributes(__pyx_v_ptr, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_ptr_attrs = ((struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":105
 *         if device_id < 0:
 *             ptr_attrs = runtime.pointerGetAttributes(ptr)
 *             device_id = ptr_attrs.device             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.device_id = device_id
 */
    __pyx_t_3 = __pyx_v_ptr_attrs->device;
    __pyx_v_device_id = __pyx_t_3;

    /* "cupy/cuda/memory.pyx":103
 *                  int device_id=-1):
 *         cdef runtime.PointerAttributes ptr_attrs
 *         if device_id < 0:             # <<<<<<<<<<<<<<
 *             ptr_attrs = runtime.pointerGetAttributes(ptr)
 *             device_id = ptr_attrs.device
 */
  }

  /* "cupy/cuda/memory.pyx":106
 *             ptr_attrs = runtime.pointerGetAttributes(ptr)
 *             device_id = ptr_attrs.device
 *         self.size = size             # <<<<<<<<<<<<<<
 *         self.device_id = device_id
 *         self.ptr = ptr
 */
  __pyx_v_self->__pyx_base.size = __pyx_v_size;

  /* "cupy/cuda/memory.pyx":107
 *             device_id = ptr_attrs.device
 *         self.size = size
 *         self.device_id = device_id             # <<<<<<<<<<<<<<
 *         self.ptr = ptr
 *         self._owner = owner
 */
  __pyx_v_self->__pyx_base.device_id = __pyx_v_device_id;

  /* "cupy/cuda/memory.pyx":108
 *         self.size = size
 *         self.device_id = device_id
 *         self.ptr = ptr             # <<<<<<<<<<<<<<
 *         self._owner = owner
 * 
 */
  __pyx_v_self->__pyx_base.ptr = __pyx_v_ptr;

  /* "cupy/cuda/memory.pyx":109
 *         self.device_id = device_id
 *         self.ptr = ptr
 *         self._owner = owner             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_owner);
  __Pyx_GIVEREF(__pyx_v_owner);
  __Pyx_GOTREF(__pyx_v_self->_owner);
  __Pyx_DECREF(__pyx_v_self->_owner);
  __pyx_v_self->_owner = __pyx_v_owner;

  /* "cupy/cuda/memory.pyx":100
 *         readonly object _owner
 * 
 *     def __init__(self, intptr_t ptr, size_t size, object owner,             # <<<<<<<<<<<<<<
 *                  int device_id=-1):
 *         cdef runtime.PointerAttributes ptr_attrs
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.UnownedMemory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ptr_attrs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":98
 * 
 *     cdef:
 *         readonly object _owner             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, intptr_t ptr, size_t size, object owner,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_6_owner_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_6_owner_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_6_owner___get__(((struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_6_owner___get__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_owner);
  __pyx_r = __pyx_v_self->_owner;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13UnownedMemory_2__reduce_cython__[] = "UnownedMemory.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_2__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_2__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._owner, self.device_id, self.ptr, self.size)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->__pyx_base.ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.size); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->_owner);
  __Pyx_GIVEREF(__pyx_v_self->_owner);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_self->_owner);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._owner, self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self._owner, self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._owner, self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, None), state
 */
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->_owner != Py_None);
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_UnownedMemory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_58968071);
    __Pyx_GIVEREF(__pyx_int_58968071);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_58968071);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, None), state
 *     else:
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_UnownedMemory__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_UnownedMemory); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_58968071);
    __Pyx_GIVEREF(__pyx_int_58968071);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_58968071);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.UnownedMemory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_UnownedMemory__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13UnownedMemory_4__setstate_cython__[] = "UnownedMemory.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_4__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13UnownedMemory_4__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_UnownedMemory__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_UnownedMemory__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_UnownedMemory, (type(self), 0x383c807, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_UnownedMemory__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.UnownedMemory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":124
 *     """
 * 
 *     def __init__(self, size_t size):             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.device_id = device.get_device_id()
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 124, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 124, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.ManagedMemory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13ManagedMemory___init__(((struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_13ManagedMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, size_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":125
 * 
 *     def __init__(self, size_t size):
 *         self.size = size             # <<<<<<<<<<<<<<
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0
 */
  __pyx_v_self->__pyx_base.size = __pyx_v_size;

  /* "cupy/cuda/memory.pyx":126
 *     def __init__(self, size_t size):
 *         self.size = size
 *         self.device_id = device.get_device_id()             # <<<<<<<<<<<<<<
 *         self.ptr = 0
 *         if size > 0:
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_v_self->__pyx_base.device_id = __pyx_t_1;

  /* "cupy/cuda/memory.pyx":127
 *         self.size = size
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             self.ptr = runtime.mallocManaged(size)
 */
  __pyx_v_self->__pyx_base.ptr = 0;

  /* "cupy/cuda/memory.pyx":128
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             self.ptr = runtime.mallocManaged(size)
 * 
 */
  __pyx_t_2 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":129
 *         self.ptr = 0
 *         if size > 0:
 *             self.ptr = runtime.mallocManaged(size)             # <<<<<<<<<<<<<<
 * 
 *     def prefetch(self, stream):
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_mallocManaged(__pyx_v_size, 0, NULL); if (unlikely(__pyx_t_3 == ((intptr_t)0) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L1_error)
    __pyx_v_self->__pyx_base.ptr = __pyx_t_3;

    /* "cupy/cuda/memory.pyx":128
 *         self.device_id = device.get_device_id()
 *         self.ptr = 0
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             self.ptr = runtime.mallocManaged(size)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":124
 *     """
 * 
 *     def __init__(self, size_t size):             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.device_id = device.get_device_id()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.ManagedMemory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":131
 *             self.ptr = runtime.mallocManaged(size)
 * 
 *     def prefetch(self, stream):             # <<<<<<<<<<<<<<
 *         """(experimental) Prefetch memory.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_3prefetch(PyObject *__pyx_v_self, PyObject *__pyx_v_stream); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_2prefetch[] = "ManagedMemory.prefetch(self, stream)\n(experimental) Prefetch memory.\n\n        Args:\n            stream (cupy.cuda.Stream): CUDA stream.\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_3prefetch(PyObject *__pyx_v_self, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefetch (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_2prefetch(((struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *)__pyx_v_self), ((PyObject *)__pyx_v_stream));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_2prefetch(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("prefetch", 0);

  /* "cupy/cuda/memory.pyx":138
 *         """
 *         runtime.memPrefetchAsync(self.ptr, self.size, self.device_id,
 *                                  stream.ptr)             # <<<<<<<<<<<<<<
 * 
 *     def advise(self, int advise):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream, __pyx_n_s_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":137
 *             stream (cupy.cuda.Stream): CUDA stream.
 *         """
 *         runtime.memPrefetchAsync(self.ptr, self.size, self.device_id,             # <<<<<<<<<<<<<<
 *                                  stream.ptr)
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_7runtime_memPrefetchAsync(__pyx_v_self->__pyx_base.ptr, __pyx_v_self->__pyx_base.size, __pyx_v_self->__pyx_base.device_id, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":131
 *             self.ptr = runtime.mallocManaged(size)
 * 
 *     def prefetch(self, stream):             # <<<<<<<<<<<<<<
 *         """(experimental) Prefetch memory.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.ManagedMemory.prefetch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":140
 *                                  stream.ptr)
 * 
 *     def advise(self, int advise):             # <<<<<<<<<<<<<<
 *         """(experimental) Advise about the usage of this memory.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_5advise(PyObject *__pyx_v_self, PyObject *__pyx_arg_advise); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_4advise[] = "ManagedMemory.advise(self, int advise)\n(experimental) Advise about the usage of this memory.\n\n        Args:\n            advics (int): Advise to be applied for this memory.\n            device (cupy.cuda.Device): Device to apply the advice for.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_5advise(PyObject *__pyx_v_self, PyObject *__pyx_arg_advise) {
  int __pyx_v_advise;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("advise (wrapper)", 0);
  assert(__pyx_arg_advise); {
    __pyx_v_advise = __Pyx_PyInt_As_int(__pyx_arg_advise); if (unlikely((__pyx_v_advise == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.ManagedMemory.advise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_4advise(((struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *)__pyx_v_self), ((int)__pyx_v_advise));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_4advise(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, int __pyx_v_advise) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("advise", 0);

  /* "cupy/cuda/memory.pyx":148
 * 
 *         """
 *         runtime.memAdvise(self.ptr, self.size, advise, self.device_id)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_7runtime_memAdvise(__pyx_v_self->__pyx_base.ptr, __pyx_v_self->__pyx_base.size, __pyx_v_advise, __pyx_v_self->__pyx_base.device_id, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":140
 *                                  stream.ptr)
 * 
 *     def advise(self, int advise):             # <<<<<<<<<<<<<<
 *         """(experimental) Advise about the usage of this memory.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.ManagedMemory.advise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_6__reduce_cython__[] = "ManagedMemory.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_6__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_6__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.device_id, self.ptr, self.size)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->__pyx_base.ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.size); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_ManagedMemory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_250303632);
    __Pyx_GIVEREF(__pyx_int_250303632);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_250303632);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, None), state
 *     else:
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ManagedMemory__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_ManagedMemory); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_250303632);
    __Pyx_GIVEREF(__pyx_int_250303632);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_250303632);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.ManagedMemory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ManagedMemory__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_8__setstate_cython__[] = "ManagedMemory.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_8__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13ManagedMemory_8__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ManagedMemory__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_ManagedMemory__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ManagedMemory, (type(self), 0xeeb5490, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ManagedMemory__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.ManagedMemory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":154
 * 
 * 
 * cpdef _set_peer_access(int device, int peer):             # <<<<<<<<<<<<<<
 *     device_pair = device, peer
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_3_set_peer_access(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory__set_peer_access(int __pyx_v_device, int __pyx_v_peer, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_device_pair = NULL;
  int __pyx_v_can_access;
  int __pyx_v_current;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("_set_peer_access", 0);

  /* "cupy/cuda/memory.pyx":155
 * 
 * cpdef _set_peer_access(int device, int peer):
 *     device_pair = device, peer             # <<<<<<<<<<<<<<
 * 
 *     if device_pair in _peer_access_checked:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_device); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_peer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_device_pair = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":157
 *     device_pair = device, peer
 * 
 *     if device_pair in _peer_access_checked:             # <<<<<<<<<<<<<<
 *         return
 *     cdef int can_access = runtime.deviceCanAccessPeer(device, peer)
 */
  if (unlikely(__pyx_v_4cupy_4cuda_6memory__peer_access_checked == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 157, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PySet_ContainsTF(__pyx_v_device_pair, __pyx_v_4cupy_4cuda_6memory__peer_access_checked, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "cupy/cuda/memory.pyx":158
 * 
 *     if device_pair in _peer_access_checked:
 *         return             # <<<<<<<<<<<<<<
 *     cdef int can_access = runtime.deviceCanAccessPeer(device, peer)
 *     _peer_access_checked.add(device_pair)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":157
 *     device_pair = device, peer
 * 
 *     if device_pair in _peer_access_checked:             # <<<<<<<<<<<<<<
 *         return
 *     cdef int can_access = runtime.deviceCanAccessPeer(device, peer)
 */
  }

  /* "cupy/cuda/memory.pyx":159
 *     if device_pair in _peer_access_checked:
 *         return
 *     cdef int can_access = runtime.deviceCanAccessPeer(device, peer)             # <<<<<<<<<<<<<<
 *     _peer_access_checked.add(device_pair)
 *     if not can_access:
 */
  __pyx_t_6 = __pyx_f_4cupy_4cuda_7runtime_deviceCanAccessPeer(__pyx_v_device, __pyx_v_peer, 0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_v_can_access = __pyx_t_6;

  /* "cupy/cuda/memory.pyx":160
 *         return
 *     cdef int can_access = runtime.deviceCanAccessPeer(device, peer)
 *     _peer_access_checked.add(device_pair)             # <<<<<<<<<<<<<<
 *     if not can_access:
 *         return
 */
  if (unlikely(__pyx_v_4cupy_4cuda_6memory__peer_access_checked == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
    __PYX_ERR(0, 160, __pyx_L1_error)
  }
  __pyx_t_7 = PySet_Add(__pyx_v_4cupy_4cuda_6memory__peer_access_checked, __pyx_v_device_pair); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 160, __pyx_L1_error)

  /* "cupy/cuda/memory.pyx":161
 *     cdef int can_access = runtime.deviceCanAccessPeer(device, peer)
 *     _peer_access_checked.add(device_pair)
 *     if not can_access:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_5 = ((!(__pyx_v_can_access != 0)) != 0);
  if (__pyx_t_5) {

    /* "cupy/cuda/memory.pyx":162
 *     _peer_access_checked.add(device_pair)
 *     if not can_access:
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef int current = runtime.getDevice()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":161
 *     cdef int can_access = runtime.deviceCanAccessPeer(device, peer)
 *     _peer_access_checked.add(device_pair)
 *     if not can_access:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":164
 *         return
 * 
 *     cdef int current = runtime.getDevice()             # <<<<<<<<<<<<<<
 *     runtime.setDevice(device)
 *     try:
 */
  __pyx_t_6 = __pyx_f_4cupy_4cuda_7runtime_getDevice(0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_v_current = __pyx_t_6;

  /* "cupy/cuda/memory.pyx":165
 * 
 *     cdef int current = runtime.getDevice()
 *     runtime.setDevice(device)             # <<<<<<<<<<<<<<
 *     try:
 *         runtime.deviceEnablePeerAccess(peer)
 */
  __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_setDevice(__pyx_v_device, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":166
 *     cdef int current = runtime.getDevice()
 *     runtime.setDevice(device)
 *     try:             # <<<<<<<<<<<<<<
 *         runtime.deviceEnablePeerAccess(peer)
 *     finally:
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":167
 *     runtime.setDevice(device)
 *     try:
 *         runtime.deviceEnablePeerAccess(peer)             # <<<<<<<<<<<<<<
 *     finally:
 *         runtime.setDevice(current)
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_deviceEnablePeerAccess(__pyx_v_peer, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "cupy/cuda/memory.pyx":169
 *         runtime.deviceEnablePeerAccess(peer)
 *     finally:
 *         runtime.setDevice(current)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_setDevice(__pyx_v_current, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_6 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_setDevice(__pyx_v_current, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
      __pyx_L9_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "cupy/cuda/memory.pyx":154
 * 
 * 
 * cpdef _set_peer_access(int device, int peer):             # <<<<<<<<<<<<<<
 *     device_pair = device, peer
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory._set_peer_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_device_pair);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_3_set_peer_access(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_2_set_peer_access[] = "_set_peer_access(int device, int peer)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_3_set_peer_access(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_device;
  int __pyx_v_peer;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_peer_access (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_device,&__pyx_n_s_peer,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_peer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_set_peer_access", 1, 2, 2, 1); __PYX_ERR(0, 154, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_set_peer_access") < 0)) __PYX_ERR(0, 154, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_device = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_device == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
    __pyx_v_peer = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_peer == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set_peer_access", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._set_peer_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_2_set_peer_access(__pyx_self, __pyx_v_device, __pyx_v_peer);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_2_set_peer_access(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_device, int __pyx_v_peer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_set_peer_access", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory__set_peer_access(__pyx_v_device, __pyx_v_peer, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._set_peer_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":205
 *         public _Chunk next
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         # For debug
 *         mem, offset, size, stream_ptr = args
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk___init__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk___init__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_mem = NULL;
  PyObject *__pyx_v_offset = NULL;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_stream_ptr = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  ptrdiff_t __pyx_t_5;
  size_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":207
 *     def __init__(self, *args):
 *         # For debug
 *         mem, offset, size, stream_ptr = args             # <<<<<<<<<<<<<<
 *         self._init(mem, offset, size, stream_ptr)
 * 
 */
  if (1) {
    PyObject* sequence = __pyx_v_args;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 207, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_3,&__pyx_t_4};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 207, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  }
  __pyx_v_mem = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_offset = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_size = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_stream_ptr = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "cupy/cuda/memory.pyx":208
 *         # For debug
 *         mem, offset, size, stream_ptr = args
 *         self._init(mem, offset, size, stream_ptr)             # <<<<<<<<<<<<<<
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset,
 */
  if (!(likely(((__pyx_v_mem) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mem, __pyx_ptype_4cupy_4cuda_6memory_BaseMemory))))) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyInt_As_ptrdiff_t(__pyx_v_offset); if (unlikely((__pyx_t_5 == (ptrdiff_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_size); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_stream_ptr); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_t_4 = __pyx_f_4cupy_4cuda_6memory_6_Chunk__init(__pyx_v_self, ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v_mem), __pyx_t_5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cupy/cuda/memory.pyx":205
 *         public _Chunk next
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         # For debug
 *         mem, offset, size, stream_ptr = args
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mem);
  __Pyx_XDECREF(__pyx_v_offset);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_stream_ptr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":210
 *         self._init(mem, offset, size, stream_ptr)
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset,             # <<<<<<<<<<<<<<
 *                size_t size, Py_ssize_t stream_ptr):
 *         assert mem.ptr != 0 or offset == 0
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory_6_Chunk__init(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem, ptrdiff_t __pyx_v_offset, size_t __pyx_v_size, Py_ssize_t __pyx_v_stream_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_init", 0);

  /* "cupy/cuda/memory.pyx":212
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset,
 *                size_t size, Py_ssize_t stream_ptr):
 *         assert mem.ptr != 0 or offset == 0             # <<<<<<<<<<<<<<
 *         self.mem = mem
 *         self.offset = offset
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((__pyx_v_mem->ptr != 0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_offset == 0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 212, __pyx_L1_error)
    }
  }
  #endif

  /* "cupy/cuda/memory.pyx":213
 *                size_t size, Py_ssize_t stream_ptr):
 *         assert mem.ptr != 0 or offset == 0
 *         self.mem = mem             # <<<<<<<<<<<<<<
 *         self.offset = offset
 *         self.size = size
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mem));
  __Pyx_GOTREF(__pyx_v_self->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mem));
  __pyx_v_self->mem = __pyx_v_mem;

  /* "cupy/cuda/memory.pyx":214
 *         assert mem.ptr != 0 or offset == 0
 *         self.mem = mem
 *         self.offset = offset             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.stream_ptr = stream_ptr
 */
  __pyx_v_self->offset = __pyx_v_offset;

  /* "cupy/cuda/memory.pyx":215
 *         self.mem = mem
 *         self.offset = offset
 *         self.size = size             # <<<<<<<<<<<<<<
 *         self.stream_ptr = stream_ptr
 * 
 */
  __pyx_v_self->size = __pyx_v_size;

  /* "cupy/cuda/memory.pyx":216
 *         self.offset = offset
 *         self.size = size
 *         self.stream_ptr = stream_ptr             # <<<<<<<<<<<<<<
 * 
 *     cpdef intptr_t ptr(self):
 */
  __pyx_v_self->stream_ptr = __pyx_v_stream_ptr;

  /* "cupy/cuda/memory.pyx":210
 *         self._init(mem, offset, size, stream_ptr)
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset,             # <<<<<<<<<<<<<<
 *                size_t size, Py_ssize_t stream_ptr):
 *         assert mem.ptr != 0 or offset == 0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk._init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":218
 *         self.stream_ptr = stream_ptr
 * 
 *     cpdef intptr_t ptr(self):             # <<<<<<<<<<<<<<
 *         return self.mem.ptr + self.offset
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_3ptr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static intptr_t __pyx_f_4cupy_4cuda_6memory_6_Chunk_ptr(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  intptr_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ptr", 0);

  /* "cupy/cuda/memory.pyx":219
 * 
 *     cpdef intptr_t ptr(self):
 *         return self.mem.ptr + self.offset             # <<<<<<<<<<<<<<
 * 
 *     cpdef _Chunk split(self, size_t size):
 */
  __pyx_r = (__pyx_v_self->mem->ptr + __pyx_v_self->offset);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":218
 *         self.stream_ptr = stream_ptr
 * 
 *     cpdef intptr_t ptr(self):             # <<<<<<<<<<<<<<
 *         return self.mem.ptr + self.offset
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_3ptr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6_Chunk_2ptr[] = "_Chunk.ptr(self) -> intptr_t";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_3ptr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ptr (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_2ptr(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_2ptr(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ptr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_f_4cupy_4cuda_6memory_6_Chunk_ptr(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":221
 *         return self.mem.ptr + self.offset
 * 
 *     cpdef _Chunk split(self, size_t size):             # <<<<<<<<<<<<<<
 *         """Split contiguous block of a larger allocation"""
 *         cdef _Chunk remaining
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_5split(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_f_4cupy_4cuda_6memory_6_Chunk_split(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_remaining = 0;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("split", 0);

  /* "cupy/cuda/memory.pyx":224
 *         """Split contiguous block of a larger allocation"""
 *         cdef _Chunk remaining
 *         assert self.size >= size             # <<<<<<<<<<<<<<
 *         if self.size == size:
 *             return None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->size >= __pyx_v_size) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 224, __pyx_L1_error)
    }
  }
  #endif

  /* "cupy/cuda/memory.pyx":225
 *         cdef _Chunk remaining
 *         assert self.size >= size
 *         if self.size == size:             # <<<<<<<<<<<<<<
 *             return None
 *         remaining = _Chunk.__new__(_Chunk)
 */
  __pyx_t_1 = ((__pyx_v_self->size == __pyx_v_size) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":226
 *         assert self.size >= size
 *         if self.size == size:
 *             return None             # <<<<<<<<<<<<<<
 *         remaining = _Chunk.__new__(_Chunk)
 *         remaining._init(self.mem, self.offset + size, self.size - size,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":225
 *         cdef _Chunk remaining
 *         assert self.size >= size
 *         if self.size == size:             # <<<<<<<<<<<<<<
 *             return None
 *         remaining = _Chunk.__new__(_Chunk)
 */
  }

  /* "cupy/cuda/memory.pyx":227
 *         if self.size == size:
 *             return None
 *         remaining = _Chunk.__new__(_Chunk)             # <<<<<<<<<<<<<<
 *         remaining._init(self.mem, self.offset + size, self.size - size,
 *                         self.stream_ptr)
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_4cupy_4cuda_6memory__Chunk(((PyTypeObject *)__pyx_ptype_4cupy_4cuda_6memory__Chunk), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_remaining = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":228
 *             return None
 *         remaining = _Chunk.__new__(_Chunk)
 *         remaining._init(self.mem, self.offset + size, self.size - size,             # <<<<<<<<<<<<<<
 *                         self.stream_ptr)
 *         self.size = size
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->mem);
  __Pyx_INCREF(__pyx_t_2);

  /* "cupy/cuda/memory.pyx":229
 *         remaining = _Chunk.__new__(_Chunk)
 *         remaining._init(self.mem, self.offset + size, self.size - size,
 *                         self.stream_ptr)             # <<<<<<<<<<<<<<
 *         self.size = size
 * 
 */
  __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory_6_Chunk__init(__pyx_v_remaining, ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_t_2), (__pyx_v_self->offset + __pyx_v_size), (__pyx_v_self->size - __pyx_v_size), __pyx_v_self->stream_ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":230
 *         remaining._init(self.mem, self.offset + size, self.size - size,
 *                         self.stream_ptr)
 *         self.size = size             # <<<<<<<<<<<<<<
 * 
 *         if self.next is not None:
 */
  __pyx_v_self->size = __pyx_v_size;

  /* "cupy/cuda/memory.pyx":232
 *         self.size = size
 * 
 *         if self.next is not None:             # <<<<<<<<<<<<<<
 *             remaining.next = self.next
 *             remaining.next.prev = remaining
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->next) != Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "cupy/cuda/memory.pyx":233
 * 
 *         if self.next is not None:
 *             remaining.next = self.next             # <<<<<<<<<<<<<<
 *             remaining.next.prev = remaining
 *         self.next = remaining
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_self->next);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_remaining->next);
    __Pyx_DECREF(((PyObject *)__pyx_v_remaining->next));
    __pyx_v_remaining->next = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":234
 *         if self.next is not None:
 *             remaining.next = self.next
 *             remaining.next.prev = remaining             # <<<<<<<<<<<<<<
 *         self.next = remaining
 *         remaining.prev = self
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_remaining));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_remaining));
    __Pyx_GOTREF(__pyx_v_remaining->next->prev);
    __Pyx_DECREF(((PyObject *)__pyx_v_remaining->next->prev));
    __pyx_v_remaining->next->prev = __pyx_v_remaining;

    /* "cupy/cuda/memory.pyx":232
 *         self.size = size
 * 
 *         if self.next is not None:             # <<<<<<<<<<<<<<
 *             remaining.next = self.next
 *             remaining.next.prev = remaining
 */
  }

  /* "cupy/cuda/memory.pyx":235
 *             remaining.next = self.next
 *             remaining.next.prev = remaining
 *         self.next = remaining             # <<<<<<<<<<<<<<
 *         remaining.prev = self
 *         return remaining
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_remaining));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_remaining));
  __Pyx_GOTREF(__pyx_v_self->next);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->next));
  __pyx_v_self->next = __pyx_v_remaining;

  /* "cupy/cuda/memory.pyx":236
 *             remaining.next.prev = remaining
 *         self.next = remaining
 *         remaining.prev = self             # <<<<<<<<<<<<<<
 *         return remaining
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_remaining->prev);
  __Pyx_DECREF(((PyObject *)__pyx_v_remaining->prev));
  __pyx_v_remaining->prev = __pyx_v_self;

  /* "cupy/cuda/memory.pyx":237
 *         self.next = remaining
 *         remaining.prev = self
 *         return remaining             # <<<<<<<<<<<<<<
 * 
 *     cpdef merge(self, _Chunk remaining):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_remaining));
  __pyx_r = __pyx_v_remaining;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":221
 *         return self.mem.ptr + self.offset
 * 
 *     cpdef _Chunk split(self, size_t size):             # <<<<<<<<<<<<<<
 *         """Split contiguous block of a larger allocation"""
 *         cdef _Chunk remaining
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_remaining);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_5split(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6_Chunk_4split[] = "_Chunk.split(self, size_t size) -> _Chunk\nSplit contiguous block of a larger allocation";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_5split(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4split(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self), ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4split(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("split", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_6_Chunk_split(__pyx_v_self, __pyx_v_size, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":239
 *         return remaining
 * 
 *     cpdef merge(self, _Chunk remaining):             # <<<<<<<<<<<<<<
 *         """Merge previously splitted block (chunk)"""
 *         assert self.stream_ptr == remaining.stream_ptr
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_7merge(PyObject *__pyx_v_self, PyObject *__pyx_v_remaining); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_6_Chunk_merge(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_remaining, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("merge", 0);

  /* "cupy/cuda/memory.pyx":241
 *     cpdef merge(self, _Chunk remaining):
 *         """Merge previously splitted block (chunk)"""
 *         assert self.stream_ptr == remaining.stream_ptr             # <<<<<<<<<<<<<<
 *         self.size += remaining.size
 *         self.next = remaining.next
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->stream_ptr == __pyx_v_remaining->stream_ptr) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 241, __pyx_L1_error)
    }
  }
  #endif

  /* "cupy/cuda/memory.pyx":242
 *         """Merge previously splitted block (chunk)"""
 *         assert self.stream_ptr == remaining.stream_ptr
 *         self.size += remaining.size             # <<<<<<<<<<<<<<
 *         self.next = remaining.next
 *         if remaining.next is not None:
 */
  __pyx_v_self->size = (__pyx_v_self->size + __pyx_v_remaining->size);

  /* "cupy/cuda/memory.pyx":243
 *         assert self.stream_ptr == remaining.stream_ptr
 *         self.size += remaining.size
 *         self.next = remaining.next             # <<<<<<<<<<<<<<
 *         if remaining.next is not None:
 *             self.next.prev = self
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_remaining->next);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->next);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->next));
  __pyx_v_self->next = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":244
 *         self.size += remaining.size
 *         self.next = remaining.next
 *         if remaining.next is not None:             # <<<<<<<<<<<<<<
 *             self.next.prev = self
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_remaining->next) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "cupy/cuda/memory.pyx":245
 *         self.next = remaining.next
 *         if remaining.next is not None:
 *             self.next.prev = self             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_self->next->prev);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->next->prev));
    __pyx_v_self->next->prev = __pyx_v_self;

    /* "cupy/cuda/memory.pyx":244
 *         self.size += remaining.size
 *         self.next = remaining.next
 *         if remaining.next is not None:             # <<<<<<<<<<<<<<
 *             self.next.prev = self
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":239
 *         return remaining
 * 
 *     cpdef merge(self, _Chunk remaining):             # <<<<<<<<<<<<<<
 *         """Merge previously splitted block (chunk)"""
 *         assert self.stream_ptr == remaining.stream_ptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_7merge(PyObject *__pyx_v_self, PyObject *__pyx_v_remaining); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6_Chunk_6merge[] = "_Chunk.merge(self, _Chunk remaining)\nMerge previously splitted block (chunk)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_7merge(PyObject *__pyx_v_self, PyObject *__pyx_v_remaining) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_remaining), __pyx_ptype_4cupy_4cuda_6memory__Chunk, 1, "remaining", 0))) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_6merge(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self), ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_remaining));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_6merge(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_remaining) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("merge", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_6_Chunk_merge(__pyx_v_self, __pyx_v_remaining, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":198
 * 
 *     cdef:
 *         readonly BaseMemory mem             # <<<<<<<<<<<<<<
 *         readonly ptrdiff_t offset
 *         readonly size_t size
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_3mem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_3mem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_3mem___get__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_3mem___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __pyx_r = ((PyObject *)__pyx_v_self->mem);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":199
 *     cdef:
 *         readonly BaseMemory mem
 *         readonly ptrdiff_t offset             # <<<<<<<<<<<<<<
 *         readonly size_t size
 *         readonly size_t stream_ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_6offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_6offset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_6offset___get__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_6offset___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_ptrdiff_t(__pyx_v_self->offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":200
 *         readonly BaseMemory mem
 *         readonly ptrdiff_t offset
 *         readonly size_t size             # <<<<<<<<<<<<<<
 *         readonly size_t stream_ptr
 *         public _Chunk prev
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4size___get__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4size___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":201
 *         readonly ptrdiff_t offset
 *         readonly size_t size
 *         readonly size_t stream_ptr             # <<<<<<<<<<<<<<
 *         public _Chunk prev
 *         public _Chunk next
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_10stream_ptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_10stream_ptr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_10stream_ptr___get__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_10stream_ptr___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->stream_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.stream_ptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":202
 *         readonly size_t size
 *         readonly size_t stream_ptr
 *         public _Chunk prev             # <<<<<<<<<<<<<<
 *         public _Chunk next
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev___get__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->prev));
  __pyx_r = ((PyObject *)__pyx_v_self->prev);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev_2__set__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev_2__set__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->prev);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->prev));
  __pyx_v_self->prev = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.prev.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev_4__del__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4prev_4__del__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->prev);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->prev));
  __pyx_v_self->prev = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":203
 *         readonly size_t stream_ptr
 *         public _Chunk prev
 *         public _Chunk next             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next___get__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next___get__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->next));
  __pyx_r = ((PyObject *)__pyx_v_self->next);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next_2__set__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next_2__set__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->next);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->next));
  __pyx_v_self->next = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.next.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next_4__del__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_6_Chunk_4next_4__del__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->next);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->next));
  __pyx_v_self->next = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6_Chunk_8__reduce_cython__[] = "_Chunk.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_8__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_8__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.mem, self.next, self.offset, self.prev, self.size, self.stream_ptr)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_ptrdiff_t(__pyx_v_self->offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->size); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->stream_ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mem));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self->mem));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->next));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->next));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self->next));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->prev));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->prev));
  PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_v_self->prev));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.mem, self.next, self.offset, self.prev, self.size, self.stream_ptr)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.mem, self.next, self.offset, self.prev, self.size, self.stream_ptr)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.mem is not None or self.next is not None or self.prev is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.mem, self.next, self.offset, self.prev, self.size, self.stream_ptr)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.mem is not None or self.next is not None or self.prev is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, None), state
 */
  /*else*/ {
    __pyx_t_5 = (((PyObject *)__pyx_v_self->mem) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (((PyObject *)__pyx_v_self->next) != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->prev) != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.mem is not None or self.next is not None or self.prev is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.mem is not None or self.next is not None or self.prev is not None
 *     if use_setstate:
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle__Chunk); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_126283891);
    __Pyx_GIVEREF(__pyx_int_126283891);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_126283891);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.mem is not None or self.next is not None or self.prev is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, None), state
 *     else:
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle__Chunk__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle__Chunk); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_126283891);
    __Pyx_GIVEREF(__pyx_int_126283891);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_126283891);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle__Chunk__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6_Chunk_10__setstate_cython__[] = "_Chunk.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_6_Chunk_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6_Chunk_10__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6_Chunk_10__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle__Chunk__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle__Chunk__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle__Chunk, (type(self), 0x786f073, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle__Chunk__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._Chunk.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":266
 *     """
 * 
 *     def __init__(self, BaseMemory mem, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         self._init(mem, offset)
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem = 0;
  ptrdiff_t __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,&__pyx_n_s_offset,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 266, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 266, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)values[0]);
    __pyx_v_offset = __Pyx_PyInt_As_ptrdiff_t(values[1]); if (unlikely((__pyx_v_offset == (ptrdiff_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mem), __pyx_ptype_4cupy_4cuda_6memory_BaseMemory, 1, "mem", 0))) __PYX_ERR(0, 266, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer___init__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_mem, __pyx_v_offset);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer___init__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem, ptrdiff_t __pyx_v_offset) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":267
 * 
 *     def __init__(self, BaseMemory mem, ptrdiff_t offset):
 *         self._init(mem, offset)             # <<<<<<<<<<<<<<
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset):
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer__init(__pyx_v_self, __pyx_v_mem, __pyx_v_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":266
 *     """
 * 
 *     def __init__(self, BaseMemory mem, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         self._init(mem, offset)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":269
 *         self._init(mem, offset)
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         assert mem.ptr != 0 or offset == 0
 *         self.ptr = mem.ptr + offset
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer__init(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem, ptrdiff_t __pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("_init", 0);

  /* "cupy/cuda/memory.pyx":270
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset):
 *         assert mem.ptr != 0 or offset == 0             # <<<<<<<<<<<<<<
 *         self.ptr = mem.ptr + offset
 *         self.device_id = mem.device_id
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((__pyx_v_mem->ptr != 0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_offset == 0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 270, __pyx_L1_error)
    }
  }
  #endif

  /* "cupy/cuda/memory.pyx":271
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset):
 *         assert mem.ptr != 0 or offset == 0
 *         self.ptr = mem.ptr + offset             # <<<<<<<<<<<<<<
 *         self.device_id = mem.device_id
 *         self.mem = mem
 */
  __pyx_v_self->ptr = (__pyx_v_mem->ptr + __pyx_v_offset);

  /* "cupy/cuda/memory.pyx":272
 *         assert mem.ptr != 0 or offset == 0
 *         self.ptr = mem.ptr + offset
 *         self.device_id = mem.device_id             # <<<<<<<<<<<<<<
 *         self.mem = mem
 * 
 */
  __pyx_t_3 = __pyx_v_mem->device_id;
  __pyx_v_self->device_id = __pyx_t_3;

  /* "cupy/cuda/memory.pyx":273
 *         self.ptr = mem.ptr + offset
 *         self.device_id = mem.device_id
 *         self.mem = mem             # <<<<<<<<<<<<<<
 * 
 *     def __int__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mem));
  __Pyx_GOTREF(__pyx_v_self->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mem));
  __pyx_v_self->mem = __pyx_v_mem;

  /* "cupy/cuda/memory.pyx":269
 *         self._init(mem, offset)
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         assert mem.ptr != 0 or offset == 0
 *         self.ptr = mem.ptr + offset
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer._init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":275
 *         self.mem = mem
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         """Returns the pointer value."""
 *         return self.ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3__int__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_2__int__[] = "Returns the pointer value.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_2__int__;
#endif
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3__int__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__int__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_2__int__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_2__int__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__int__", 0);

  /* "cupy/cuda/memory.pyx":277
 *     def __int__(self):
 *         """Returns the pointer value."""
 *         return self.ptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":275
 *         self.mem = mem
 * 
 *     def __int__(self):             # <<<<<<<<<<<<<<
 *         """Returns the pointer value."""
 *         return self.ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__int__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":280
 * 
 *     @property
 *     def device(self):             # <<<<<<<<<<<<<<
 *         return device.Device(self.device_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_6device_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_6device_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_6device___get__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_6device___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cupy/cuda/memory.pyx":281
 *     @property
 *     def device(self):
 *         return device.Device(self.device_id)             # <<<<<<<<<<<<<<
 * 
 *     def __add__(x, y):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cupy_4cuda_6device_Device), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":280
 * 
 *     @property
 *     def device(self):             # <<<<<<<<<<<<<<
 *         return device.Device(self.device_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.device.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":283
 *         return device.Device(self.device_id)
 * 
 *     def __add__(x, y):             # <<<<<<<<<<<<<<
 *         """Adds an offset to the pointer."""
 *         cdef MemoryPointer self
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_5__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_4__add__[] = "Adds an offset to the pointer.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_4__add__;
#endif
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_5__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_4__add__(((PyObject *)__pyx_v_x), ((PyObject *)__pyx_v_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_4__add__(PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self = 0;
  ptrdiff_t __pyx_v_offset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ptrdiff_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "cupy/cuda/memory.pyx":287
 *         cdef MemoryPointer self
 *         cdef ptrdiff_t offset
 *         if isinstance(x, MemoryPointer):             # <<<<<<<<<<<<<<
 *             self = x
 *             offset = <ptrdiff_t?>y
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_x, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":288
 *         cdef ptrdiff_t offset
 *         if isinstance(x, MemoryPointer):
 *             self = x             # <<<<<<<<<<<<<<
 *             offset = <ptrdiff_t?>y
 *         else:
 */
    if (!(likely(((__pyx_v_x) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_x, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_x;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_self = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":289
 *         if isinstance(x, MemoryPointer):
 *             self = x
 *             offset = <ptrdiff_t?>y             # <<<<<<<<<<<<<<
 *         else:
 *             self = <MemoryPointer?>y
 */
    __pyx_t_4 = __Pyx_PyInt_As_ptrdiff_t(__pyx_v_y); if (unlikely((__pyx_t_4 == (ptrdiff_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L1_error)
    __pyx_v_offset = ((ptrdiff_t)__pyx_t_4);

    /* "cupy/cuda/memory.pyx":287
 *         cdef MemoryPointer self
 *         cdef ptrdiff_t offset
 *         if isinstance(x, MemoryPointer):             # <<<<<<<<<<<<<<
 *             self = x
 *             offset = <ptrdiff_t?>y
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":291
 *             offset = <ptrdiff_t?>y
 *         else:
 *             self = <MemoryPointer?>y             # <<<<<<<<<<<<<<
 *             offset = <ptrdiff_t?>x
 *         assert self.ptr != 0 or offset == 0
 */
  /*else*/ {
    if (!(likely(__Pyx_TypeTest(__pyx_v_y, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer)))) __PYX_ERR(0, 291, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_y;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_self = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":292
 *         else:
 *             self = <MemoryPointer?>y
 *             offset = <ptrdiff_t?>x             # <<<<<<<<<<<<<<
 *         assert self.ptr != 0 or offset == 0
 *         return MemoryPointer(self.mem,
 */
    __pyx_t_4 = __Pyx_PyInt_As_ptrdiff_t(__pyx_v_x); if (unlikely((__pyx_t_4 == (ptrdiff_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_v_offset = ((ptrdiff_t)__pyx_t_4);
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":293
 *             self = <MemoryPointer?>y
 *             offset = <ptrdiff_t?>x
 *         assert self.ptr != 0 or offset == 0             # <<<<<<<<<<<<<<
 *         return MemoryPointer(self.mem,
 *                              self.ptr - self.mem.ptr + offset)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((__pyx_v_self->ptr != 0) != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_offset == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L4_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 293, __pyx_L1_error)
    }
  }
  #endif

  /* "cupy/cuda/memory.pyx":294
 *             offset = <ptrdiff_t?>x
 *         assert self.ptr != 0 or offset == 0
 *         return MemoryPointer(self.mem,             # <<<<<<<<<<<<<<
 *                              self.ptr - self.mem.ptr + offset)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cupy/cuda/memory.pyx":295
 *         assert self.ptr != 0 or offset == 0
 *         return MemoryPointer(self.mem,
 *                              self.ptr - self.mem.ptr + offset)             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, ptrdiff_t offset):
 */
  __pyx_t_3 = __Pyx_PyInt_From_ptrdiff_t(((__pyx_v_self->ptr - __pyx_v_self->mem->ptr) + __pyx_v_offset)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "cupy/cuda/memory.pyx":294
 *             offset = <ptrdiff_t?>x
 *         assert self.ptr != 0 or offset == 0
 *         return MemoryPointer(self.mem,             # <<<<<<<<<<<<<<
 *                              self.ptr - self.mem.ptr + offset)
 * 
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mem));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self->mem));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer), __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":283
 *         return device.Device(self.device_id)
 * 
 *     def __add__(x, y):             # <<<<<<<<<<<<<<
 *         """Adds an offset to the pointer."""
 *         cdef MemoryPointer self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":297
 *                              self.ptr - self.mem.ptr + offset)
 * 
 *     def __iadd__(self, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         """Adds an offset to the pointer in place."""
 *         assert self.ptr != 0 or offset == 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_7__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_arg_offset); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__[] = "Adds an offset to the pointer in place.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__;
#endif
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_7__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_arg_offset) {
  ptrdiff_t __pyx_v_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
  assert(__pyx_arg_offset); {
    __pyx_v_offset = __Pyx_PyInt_As_ptrdiff_t(__pyx_arg_offset); if (unlikely((__pyx_v_offset == (ptrdiff_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), ((ptrdiff_t)__pyx_v_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, ptrdiff_t __pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__iadd__", 0);

  /* "cupy/cuda/memory.pyx":299
 *     def __iadd__(self, ptrdiff_t offset):
 *         """Adds an offset to the pointer in place."""
 *         assert self.ptr != 0 or offset == 0             # <<<<<<<<<<<<<<
 *         self.ptr += offset
 *         return self
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((__pyx_v_self->ptr != 0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_offset == 0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 299, __pyx_L1_error)
    }
  }
  #endif

  /* "cupy/cuda/memory.pyx":300
 *         """Adds an offset to the pointer in place."""
 *         assert self.ptr != 0 or offset == 0
 *         self.ptr += offset             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->ptr = (__pyx_v_self->ptr + __pyx_v_offset);

  /* "cupy/cuda/memory.pyx":301
 *         assert self.ptr != 0 or offset == 0
 *         self.ptr += offset
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":297
 *                              self.ptr - self.mem.ptr + offset)
 * 
 *     def __iadd__(self, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         """Adds an offset to the pointer in place."""
 *         assert self.ptr != 0 or offset == 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":303
 *         return self
 * 
 *     def __sub__(self, offset):             # <<<<<<<<<<<<<<
 *         """Subtracts an offset from the pointer."""
 *         return self + -offset
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_9__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_offset); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_8__sub__[] = "Subtracts an offset from the pointer.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_8__sub__;
#endif
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_9__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_offset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_8__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_8__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "cupy/cuda/memory.pyx":305
 *     def __sub__(self, offset):
 *         """Subtracts an offset from the pointer."""
 *         return self + -offset             # <<<<<<<<<<<<<<
 * 
 *     def __isub__(self, ptrdiff_t offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Negative(__pyx_v_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_self, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":303
 *         return self
 * 
 *     def __sub__(self, offset):             # <<<<<<<<<<<<<<
 *         """Subtracts an offset from the pointer."""
 *         return self + -offset
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":307
 *         return self + -offset
 * 
 *     def __isub__(self, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         """Subtracts an offset from the pointer in place."""
 *         return self.__iadd__(-offset)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_11__isub__(PyObject *__pyx_v_self, PyObject *__pyx_arg_offset); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_10__isub__[] = "Subtracts an offset from the pointer in place.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_10__isub__;
#endif
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_11__isub__(PyObject *__pyx_v_self, PyObject *__pyx_arg_offset) {
  ptrdiff_t __pyx_v_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__isub__ (wrapper)", 0);
  assert(__pyx_arg_offset); {
    __pyx_v_offset = __Pyx_PyInt_As_ptrdiff_t(__pyx_arg_offset); if (unlikely((__pyx_v_offset == (ptrdiff_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__isub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_10__isub__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), ((ptrdiff_t)__pyx_v_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_10__isub__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, ptrdiff_t __pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__isub__", 0);

  /* "cupy/cuda/memory.pyx":309
 *     def __isub__(self, ptrdiff_t offset):
 *         """Subtracts an offset from the pointer in place."""
 *         return self.__iadd__(-offset)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy_from_device(self, MemoryPointer src, size_t size):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iadd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_ptrdiff_t((-__pyx_v_offset)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":307
 *         return self + -offset
 * 
 *     def __isub__(self, ptrdiff_t offset):             # <<<<<<<<<<<<<<
 *         """Subtracts an offset from the pointer in place."""
 *         return self.__iadd__(-offset)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__isub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":311
 *         return self.__iadd__(-offset)
 * 
 *     cpdef copy_from_device(self, MemoryPointer src, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from a (possibly different) device.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_13copy_from_device(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy_from_device", 0);

  /* "cupy/cuda/memory.pyx":319
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             _set_peer_access(src.device_id, self.device_id)
 *             runtime.memcpy(self.ptr, src.ptr, size,
 */
  __pyx_t_1 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":320
 *         """
 *         if size > 0:
 *             _set_peer_access(src.device_id, self.device_id)             # <<<<<<<<<<<<<<
 *             runtime.memcpy(self.ptr, src.ptr, size,
 *                            runtime.memcpyDefault)
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_6memory__set_peer_access(__pyx_v_src->device_id, __pyx_v_self->device_id, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":321
 *         if size > 0:
 *             _set_peer_access(src.device_id, self.device_id)
 *             runtime.memcpy(self.ptr, src.ptr, size,             # <<<<<<<<<<<<<<
 *                            runtime.memcpyDefault)
 * 
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_7runtime_memcpy(__pyx_v_self->ptr, __pyx_v_src->ptr, __pyx_v_size, __pyx_e_4cupy_4cuda_7runtime_memcpyDefault, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":319
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             _set_peer_access(src.device_id, self.device_id)
 *             runtime.memcpy(self.ptr, src.ptr, size,
 */
  }

  /* "cupy/cuda/memory.pyx":311
 *         return self.__iadd__(-offset)
 * 
 *     cpdef copy_from_device(self, MemoryPointer src, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from a (possibly different) device.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_13copy_from_device(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_12copy_from_device[] = "MemoryPointer.copy_from_device(self, MemoryPointer src, size_t size)\nCopies a memory sequence from a (possibly different) device.\n\n        Args:\n            src (cupy.cuda.MemoryPointer): Source memory pointer.\n            size (int): Size of the sequence in bytes.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_13copy_from_device(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from_device (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_src,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_src)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_from_device", 1, 2, 2, 1); __PYX_ERR(0, 311, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from_device") < 0)) __PYX_ERR(0, 311, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_src = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)values[0]);
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from_device", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 311, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src), __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer, 1, "src", 0))) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_12copy_from_device(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_src, __pyx_v_size);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_12copy_from_device(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy_from_device", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device(__pyx_v_self, __pyx_v_src, __pyx_v_size, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_device", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":324
 *                            runtime.memcpyDefault)
 * 
 *     cpdef copy_from_device_async(self, MemoryPointer src, size_t size,             # <<<<<<<<<<<<<<
 *                                  stream=None):
 *         """Copies a memory from a (possibly different) device asynchronously.
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_15copy_from_device_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async *__pyx_optional_args) {

  /* "cupy/cuda/memory.pyx":325
 * 
 *     cpdef copy_from_device_async(self, MemoryPointer src, size_t size,
 *                                  stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory from a (possibly different) device asynchronously.
 * 
 */
  PyObject *__pyx_v_stream = ((PyObject *)Py_None);
  PyObject *__pyx_v_stream_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("copy_from_device_async", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream = __pyx_optional_args->stream;
    }
  }

  /* "cupy/cuda/memory.pyx":335
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_stream == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":336
 *         """
 *         if stream is None:
 *             stream_ptr = stream_module.get_current_stream_ptr()             # <<<<<<<<<<<<<<
 *         else:
 *             stream_ptr = stream.ptr
 */
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":335
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":338
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 *             stream_ptr = stream.ptr             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             _set_peer_access(src.device_id, self.device_id)
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream, __pyx_n_s_ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":339
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             _set_peer_access(src.device_id, self.device_id)
 *             runtime.memcpyAsync(self.ptr, src.ptr, size,
 */
  __pyx_t_2 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":340
 *             stream_ptr = stream.ptr
 *         if size > 0:
 *             _set_peer_access(src.device_id, self.device_id)             # <<<<<<<<<<<<<<
 *             runtime.memcpyAsync(self.ptr, src.ptr, size,
 *                                 runtime.memcpyDefault, stream_ptr)
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory__set_peer_access(__pyx_v_src->device_id, __pyx_v_self->device_id, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":342
 *             _set_peer_access(src.device_id, self.device_id)
 *             runtime.memcpyAsync(self.ptr, src.ptr, size,
 *                                 runtime.memcpyDefault, stream_ptr)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy_from_host(self, mem, size_t size):
 */
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_stream_ptr); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 342, __pyx_L1_error)

    /* "cupy/cuda/memory.pyx":341
 *         if size > 0:
 *             _set_peer_access(src.device_id, self.device_id)
 *             runtime.memcpyAsync(self.ptr, src.ptr, size,             # <<<<<<<<<<<<<<
 *                                 runtime.memcpyDefault, stream_ptr)
 * 
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_memcpyAsync(__pyx_v_self->ptr, __pyx_v_src->ptr, __pyx_v_size, __pyx_e_4cupy_4cuda_7runtime_memcpyDefault, __pyx_t_4, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":339
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             _set_peer_access(src.device_id, self.device_id)
 *             runtime.memcpyAsync(self.ptr, src.ptr, size,
 */
  }

  /* "cupy/cuda/memory.pyx":324
 *                            runtime.memcpyDefault)
 * 
 *     cpdef copy_from_device_async(self, MemoryPointer src, size_t size,             # <<<<<<<<<<<<<<
 *                                  stream=None):
 *         """Copies a memory from a (possibly different) device asynchronously.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_device_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stream_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_15copy_from_device_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_14copy_from_device_async[] = "MemoryPointer.copy_from_device_async(self, MemoryPointer src, size_t size, stream=None)\nCopies a memory from a (possibly different) device asynchronously.\n\n        Args:\n            src (cupy.cuda.MemoryPointer): Source memory pointer.\n            size (int): Size of the sequence in bytes.\n            stream (cupy.cuda.Stream): CUDA stream.\n                The default uses CUDA stream of the current context.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_15copy_from_device_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from_device_async (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_src,&__pyx_n_s_size,&__pyx_n_s_stream,0};
    PyObject* values[3] = {0,0,0};

    /* "cupy/cuda/memory.pyx":325
 * 
 *     cpdef copy_from_device_async(self, MemoryPointer src, size_t size,
 *                                  stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory from a (possibly different) device asynchronously.
 * 
 */
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_src)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_from_device_async", 0, 2, 3, 1); __PYX_ERR(0, 324, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from_device_async") < 0)) __PYX_ERR(0, 324, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_src = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)values[0]);
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L3_error)
    __pyx_v_stream = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from_device_async", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 324, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_device_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src), __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer, 1, "src", 0))) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_14copy_from_device_async(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_src, __pyx_v_size, __pyx_v_stream);

  /* "cupy/cuda/memory.pyx":324
 *                            runtime.memcpyDefault)
 * 
 *     cpdef copy_from_device_async(self, MemoryPointer src, size_t size,             # <<<<<<<<<<<<<<
 *                                  stream=None):
 *         """Copies a memory from a (possibly different) device asynchronously.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_14copy_from_device_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_src, size_t __pyx_v_size, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async __pyx_t_2;
  __Pyx_RefNannySetupContext("copy_from_device_async", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.stream = __pyx_v_stream;
  __pyx_t_1 = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer->copy_from_device_async(__pyx_v_self, __pyx_v_src, __pyx_v_size, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_device_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":344
 *                                 runtime.memcpyDefault, stream_ptr)
 * 
 *     cpdef copy_from_host(self, mem, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from the host memory.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_17copy_from_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  intptr_t __pyx_t_3;
  __Pyx_RefNannySetupContext("copy_from_host", 0);

  /* "cupy/cuda/memory.pyx":352
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpy(self.ptr, mem.value, size,
 *                            runtime.memcpyHostToDevice)
 */
  __pyx_t_1 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":353
 *         """
 *         if size > 0:
 *             runtime.memcpy(self.ptr, mem.value, size,             # <<<<<<<<<<<<<<
 *                            runtime.memcpyHostToDevice)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":354
 *         if size > 0:
 *             runtime.memcpy(self.ptr, mem.value, size,
 *                            runtime.memcpyHostToDevice)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy_from_host_async(self, mem, size_t size, stream=None):
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_7runtime_memcpy(__pyx_v_self->ptr, __pyx_t_3, __pyx_v_size, __pyx_e_4cupy_4cuda_7runtime_memcpyHostToDevice, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":352
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpy(self.ptr, mem.value, size,
 *                            runtime.memcpyHostToDevice)
 */
  }

  /* "cupy/cuda/memory.pyx":344
 *                                 runtime.memcpyDefault, stream_ptr)
 * 
 *     cpdef copy_from_host(self, mem, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from the host memory.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_17copy_from_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_16copy_from_host[] = "MemoryPointer.copy_from_host(self, mem, size_t size)\nCopies a memory sequence from the host memory.\n\n        Args:\n            mem (ctypes.c_void_p): Source memory pointer.\n            size (int): Size of the sequence in bytes.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_17copy_from_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mem = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from_host (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_from_host", 1, 2, 2, 1); __PYX_ERR(0, 344, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from_host") < 0)) __PYX_ERR(0, 344, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mem = values[0];
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 344, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from_host", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 344, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_16copy_from_host(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_mem, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_16copy_from_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy_from_host", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":356
 *                            runtime.memcpyHostToDevice)
 * 
 *     cpdef copy_from_host_async(self, mem, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from the host memory asynchronously.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_19copy_from_host_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async *__pyx_optional_args) {
  PyObject *__pyx_v_stream = ((PyObject *)Py_None);
  PyObject *__pyx_v_stream_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  intptr_t __pyx_t_4;
  size_t __pyx_t_5;
  __Pyx_RefNannySetupContext("copy_from_host_async", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream = __pyx_optional_args->stream;
    }
  }

  /* "cupy/cuda/memory.pyx":367
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_stream == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":368
 *         """
 *         if stream is None:
 *             stream_ptr = stream_module.get_current_stream_ptr()             # <<<<<<<<<<<<<<
 *         else:
 *             stream_ptr = stream.ptr
 */
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":367
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":370
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 *             stream_ptr = stream.ptr             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             runtime.memcpyAsync(self.ptr, mem.value, size,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream, __pyx_n_s_ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":371
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpyAsync(self.ptr, mem.value, size,
 *                                 runtime.memcpyHostToDevice, stream_ptr)
 */
  __pyx_t_2 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":372
 *             stream_ptr = stream.ptr
 *         if size > 0:
 *             runtime.memcpyAsync(self.ptr, mem.value, size,             # <<<<<<<<<<<<<<
 *                                 runtime.memcpyHostToDevice, stream_ptr)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyInt_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":373
 *         if size > 0:
 *             runtime.memcpyAsync(self.ptr, mem.value, size,
 *                                 runtime.memcpyHostToDevice, stream_ptr)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy_from(self, mem, size_t size):
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_stream_ptr); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L1_error)

    /* "cupy/cuda/memory.pyx":372
 *             stream_ptr = stream.ptr
 *         if size > 0:
 *             runtime.memcpyAsync(self.ptr, mem.value, size,             # <<<<<<<<<<<<<<
 *                                 runtime.memcpyHostToDevice, stream_ptr)
 * 
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_memcpyAsync(__pyx_v_self->ptr, __pyx_t_4, __pyx_v_size, __pyx_e_4cupy_4cuda_7runtime_memcpyHostToDevice, __pyx_t_5, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":371
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpyAsync(self.ptr, mem.value, size,
 *                                 runtime.memcpyHostToDevice, stream_ptr)
 */
  }

  /* "cupy/cuda/memory.pyx":356
 *                            runtime.memcpyHostToDevice)
 * 
 *     cpdef copy_from_host_async(self, mem, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from the host memory asynchronously.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_host_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stream_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_19copy_from_host_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_18copy_from_host_async[] = "MemoryPointer.copy_from_host_async(self, mem, size_t size, stream=None)\nCopies a memory sequence from the host memory asynchronously.\n\n        Args:\n            mem (ctypes.c_void_p): Source memory pointer. It must be a pinned\n                memory.\n            size (int): Size of the sequence in bytes.\n            stream (cupy.cuda.Stream): CUDA stream.\n                The default uses CUDA stream of the current context.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_19copy_from_host_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mem = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from_host_async (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,&__pyx_n_s_size,&__pyx_n_s_stream,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_from_host_async", 0, 2, 3, 1); __PYX_ERR(0, 356, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from_host_async") < 0)) __PYX_ERR(0, 356, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mem = values[0];
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L3_error)
    __pyx_v_stream = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from_host_async", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 356, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_host_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_18copy_from_host_async(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_mem, __pyx_v_size, __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_18copy_from_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async __pyx_t_2;
  __Pyx_RefNannySetupContext("copy_from_host_async", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.stream = __pyx_v_stream;
  __pyx_t_1 = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer->copy_from_host_async(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_host_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":375
 *                                 runtime.memcpyHostToDevice, stream_ptr)
 * 
 *     cpdef copy_from(self, mem, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from a (possibly different) device or host.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_21copy_from(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("copy_from", 0);

  /* "cupy/cuda/memory.pyx":388
 * 
 *         """
 *         if isinstance(mem, MemoryPointer):             # <<<<<<<<<<<<<<
 *             self.copy_from_device(mem, size)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_mem, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":389
 *         """
 *         if isinstance(mem, MemoryPointer):
 *             self.copy_from_device(mem, size)             # <<<<<<<<<<<<<<
 *         else:
 *             self.copy_from_host(mem, size)
 */
    if (!(likely(((__pyx_v_mem) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mem, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 389, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device(__pyx_v_self, ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_mem), __pyx_v_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":388
 * 
 *         """
 *         if isinstance(mem, MemoryPointer):             # <<<<<<<<<<<<<<
 *             self.copy_from_device(mem, size)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":391
 *             self.copy_from_device(mem, size)
 *         else:
 *             self.copy_from_host(mem, size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy_from_async(self, mem, size_t size, stream=None):
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":375
 *                                 runtime.memcpyHostToDevice, stream_ptr)
 * 
 *     cpdef copy_from(self, mem, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from a (possibly different) device or host.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_21copy_from(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_20copy_from[] = "MemoryPointer.copy_from(self, mem, size_t size)\nCopies a memory sequence from a (possibly different) device or host.\n\n        This function is a useful interface that selects appropriate one from\n        :meth:`~cupy.cuda.MemoryPointer.copy_from_device` and\n        :meth:`~cupy.cuda.MemoryPointer.copy_from_host`.\n\n        Args:\n            mem (ctypes.c_void_p or cupy.cuda.MemoryPointer): Source memory\n                pointer.\n            size (int): Size of the sequence in bytes.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_21copy_from(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mem = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_from", 1, 2, 2, 1); __PYX_ERR(0, 375, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from") < 0)) __PYX_ERR(0, 375, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mem = values[0];
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 375, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_20copy_from(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_mem, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_20copy_from(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy_from", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":393
 *             self.copy_from_host(mem, size)
 * 
 *     cpdef copy_from_async(self, mem, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from an arbitrary place asynchronously.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_23copy_from_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async *__pyx_optional_args) {
  PyObject *__pyx_v_stream = ((PyObject *)Py_None);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async __pyx_t_4;
  struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async __pyx_t_5;
  __Pyx_RefNannySetupContext("copy_from_async", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream = __pyx_optional_args->stream;
    }
  }

  /* "cupy/cuda/memory.pyx":408
 * 
 *         """
 *         if isinstance(mem, MemoryPointer):             # <<<<<<<<<<<<<<
 *             self.copy_from_device_async(mem, size, stream)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_mem, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":409
 *         """
 *         if isinstance(mem, MemoryPointer):
 *             self.copy_from_device_async(mem, size, stream)             # <<<<<<<<<<<<<<
 *         else:
 *             self.copy_from_host_async(mem, size, stream)
 */
    if (!(likely(((__pyx_v_mem) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_mem, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 409, __pyx_L1_error)
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.stream = __pyx_v_stream;
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async(__pyx_v_self, ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_mem), __pyx_v_size, 0, &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":408
 * 
 *         """
 *         if isinstance(mem, MemoryPointer):             # <<<<<<<<<<<<<<
 *             self.copy_from_device_async(mem, size, stream)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":411
 *             self.copy_from_device_async(mem, size, stream)
 *         else:
 *             self.copy_from_host_async(mem, size, stream)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy_to_host(self, mem, size_t size):
 */
  /*else*/ {
    __pyx_t_5.__pyx_n = 1;
    __pyx_t_5.stream = __pyx_v_stream;
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 0, &__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":393
 *             self.copy_from_host(mem, size)
 * 
 *     cpdef copy_from_async(self, mem, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence from an arbitrary place asynchronously.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_23copy_from_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_22copy_from_async[] = "MemoryPointer.copy_from_async(self, mem, size_t size, stream=None)\nCopies a memory sequence from an arbitrary place asynchronously.\n\n        This function is a useful interface that selects appropriate one from\n        :meth:`~cupy.cuda.MemoryPointer.copy_from_device_async` and\n        :meth:`~cupy.cuda.MemoryPointer.copy_from_host_async`.\n\n        Args:\n            mem (ctypes.c_void_p or cupy.cuda.MemoryPointer): Source memory\n                pointer.\n            size (int): Size of the sequence in bytes.\n            stream (cupy.cuda.Stream): CUDA stream.\n                The default uses CUDA stream of the current context.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_23copy_from_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mem = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_from_async (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,&__pyx_n_s_size,&__pyx_n_s_stream,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_from_async", 0, 2, 3, 1); __PYX_ERR(0, 393, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_from_async") < 0)) __PYX_ERR(0, 393, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mem = values[0];
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L3_error)
    __pyx_v_stream = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_from_async", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 393, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_22copy_from_async(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_mem, __pyx_v_size, __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_22copy_from_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async __pyx_t_2;
  __Pyx_RefNannySetupContext("copy_from_async", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.stream = __pyx_v_stream;
  __pyx_t_1 = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer->copy_from_async(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_from_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":413
 *             self.copy_from_host_async(mem, size, stream)
 * 
 *     cpdef copy_to_host(self, mem, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence to the host memory.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_25copy_to_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  intptr_t __pyx_t_3;
  __Pyx_RefNannySetupContext("copy_to_host", 0);

  /* "cupy/cuda/memory.pyx":421
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpy(mem.value, self.ptr, size,
 *                            runtime.memcpyDeviceToHost)
 */
  __pyx_t_1 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":422
 *         """
 *         if size > 0:
 *             runtime.memcpy(mem.value, self.ptr, size,             # <<<<<<<<<<<<<<
 *                            runtime.memcpyDeviceToHost)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":423
 *         if size > 0:
 *             runtime.memcpy(mem.value, self.ptr, size,
 *                            runtime.memcpyDeviceToHost)             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy_to_host_async(self, mem, size_t size, stream=None):
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_7runtime_memcpy(__pyx_t_3, __pyx_v_self->ptr, __pyx_v_size, __pyx_e_4cupy_4cuda_7runtime_memcpyDeviceToHost, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":421
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpy(mem.value, self.ptr, size,
 *                            runtime.memcpyDeviceToHost)
 */
  }

  /* "cupy/cuda/memory.pyx":413
 *             self.copy_from_host_async(mem, size, stream)
 * 
 *     cpdef copy_to_host(self, mem, size_t size):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence to the host memory.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_to_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_25copy_to_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_24copy_to_host[] = "MemoryPointer.copy_to_host(self, mem, size_t size)\nCopies a memory sequence to the host memory.\n\n        Args:\n            mem (ctypes.c_void_p): Target memory pointer.\n            size (int): Size of the sequence in bytes.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_25copy_to_host(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mem = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_to_host (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_to_host", 1, 2, 2, 1); __PYX_ERR(0, 413, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_to_host") < 0)) __PYX_ERR(0, 413, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mem = values[0];
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_to_host", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 413, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_to_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_24copy_to_host(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_mem, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_24copy_to_host(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy_to_host", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_to_host", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":425
 *                            runtime.memcpyDeviceToHost)
 * 
 *     cpdef copy_to_host_async(self, mem, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence to the host memory asynchronously.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_27copy_to_host_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async *__pyx_optional_args) {
  PyObject *__pyx_v_stream = ((PyObject *)Py_None);
  PyObject *__pyx_v_stream_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  intptr_t __pyx_t_4;
  size_t __pyx_t_5;
  __Pyx_RefNannySetupContext("copy_to_host_async", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream = __pyx_optional_args->stream;
    }
  }

  /* "cupy/cuda/memory.pyx":436
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_stream == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":437
 *         """
 *         if stream is None:
 *             stream_ptr = stream_module.get_current_stream_ptr()             # <<<<<<<<<<<<<<
 *         else:
 *             stream_ptr = stream.ptr
 */
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":436
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":439
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 *             stream_ptr = stream.ptr             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             runtime.memcpyAsync(mem.value, self.ptr, size,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream, __pyx_n_s_ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":440
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpyAsync(mem.value, self.ptr, size,
 *                                 runtime.memcpyDeviceToHost, stream_ptr)
 */
  __pyx_t_2 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":441
 *             stream_ptr = stream.ptr
 *         if size > 0:
 *             runtime.memcpyAsync(mem.value, self.ptr, size,             # <<<<<<<<<<<<<<
 *                                 runtime.memcpyDeviceToHost, stream_ptr)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mem, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyInt_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":442
 *         if size > 0:
 *             runtime.memcpyAsync(mem.value, self.ptr, size,
 *                                 runtime.memcpyDeviceToHost, stream_ptr)             # <<<<<<<<<<<<<<
 * 
 *     cpdef memset(self, int value, size_t size):
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_stream_ptr); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 442, __pyx_L1_error)

    /* "cupy/cuda/memory.pyx":441
 *             stream_ptr = stream.ptr
 *         if size > 0:
 *             runtime.memcpyAsync(mem.value, self.ptr, size,             # <<<<<<<<<<<<<<
 *                                 runtime.memcpyDeviceToHost, stream_ptr)
 * 
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_memcpyAsync(__pyx_t_4, __pyx_v_self->ptr, __pyx_v_size, __pyx_e_4cupy_4cuda_7runtime_memcpyDeviceToHost, __pyx_t_5, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":440
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memcpyAsync(mem.value, self.ptr, size,
 *                                 runtime.memcpyDeviceToHost, stream_ptr)
 */
  }

  /* "cupy/cuda/memory.pyx":425
 *                            runtime.memcpyDeviceToHost)
 * 
 *     cpdef copy_to_host_async(self, mem, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Copies a memory sequence to the host memory asynchronously.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_to_host_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stream_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_27copy_to_host_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_26copy_to_host_async[] = "MemoryPointer.copy_to_host_async(self, mem, size_t size, stream=None)\nCopies a memory sequence to the host memory asynchronously.\n\n        Args:\n            mem (ctypes.c_void_p): Target memory pointer. It must be a pinned\n                memory.\n            size (int): Size of the sequence in bytes.\n            stream (cupy.cuda.Stream): CUDA stream.\n                The default uses CUDA stream of the current context.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_27copy_to_host_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mem = 0;
  size_t __pyx_v_size;
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_to_host_async (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mem,&__pyx_n_s_size,&__pyx_n_s_stream,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mem)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy_to_host_async", 0, 2, 3, 1); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_to_host_async") < 0)) __PYX_ERR(0, 425, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mem = values[0];
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L3_error)
    __pyx_v_stream = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_to_host_async", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 425, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_to_host_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_26copy_to_host_async(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_mem, __pyx_v_size, __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_26copy_to_host_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v_mem, size_t __pyx_v_size, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async __pyx_t_2;
  __Pyx_RefNannySetupContext("copy_to_host_async", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.stream = __pyx_v_stream;
  __pyx_t_1 = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer->copy_to_host_async(__pyx_v_self, __pyx_v_mem, __pyx_v_size, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.copy_to_host_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":444
 *                                 runtime.memcpyDeviceToHost, stream_ptr)
 * 
 *     cpdef memset(self, int value, size_t size):             # <<<<<<<<<<<<<<
 *         """Fills a memory sequence by constant byte value.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_29memset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("memset", 0);

  /* "cupy/cuda/memory.pyx":452
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memset(self.ptr, value, size)
 * 
 */
  __pyx_t_1 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":453
 *         """
 *         if size > 0:
 *             runtime.memset(self.ptr, value, size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef memset_async(self, int value, size_t size, stream=None):
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_7runtime_memset(__pyx_v_self->ptr, __pyx_v_value, __pyx_v_size, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":452
 * 
 *         """
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memset(self.ptr, value, size)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":444
 *                                 runtime.memcpyDeviceToHost, stream_ptr)
 * 
 *     cpdef memset(self, int value, size_t size):             # <<<<<<<<<<<<<<
 *         """Fills a memory sequence by constant byte value.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.memset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_29memset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_28memset[] = "MemoryPointer.memset(self, int value, size_t size)\nFills a memory sequence by constant byte value.\n\n        Args:\n            value (int): Value to fill.\n            size (int): Size of the sequence in bytes.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_29memset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_value;
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("memset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("memset", 1, 2, 2, 1); __PYX_ERR(0, 444, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "memset") < 0)) __PYX_ERR(0, 444, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_value = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("memset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 444, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.memset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_28memset(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_value, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_28memset(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("memset", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset(__pyx_v_self, __pyx_v_value, __pyx_v_size, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.memset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":455
 *             runtime.memset(self.ptr, value, size)
 * 
 *     cpdef memset_async(self, int value, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Fills a memory sequence by constant byte value asynchronously.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_31memset_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async *__pyx_optional_args) {
  PyObject *__pyx_v_stream = ((PyObject *)Py_None);
  PyObject *__pyx_v_stream_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("memset_async", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream = __pyx_optional_args->stream;
    }
  }

  /* "cupy/cuda/memory.pyx":465
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_stream == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":466
 *         """
 *         if stream is None:
 *             stream_ptr = stream_module.get_current_stream_ptr()             # <<<<<<<<<<<<<<
 *         else:
 *             stream_ptr = stream.ptr
 */
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":465
 * 
 *         """
 *         if stream is None:             # <<<<<<<<<<<<<<
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":468
 *             stream_ptr = stream_module.get_current_stream_ptr()
 *         else:
 *             stream_ptr = stream.ptr             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             runtime.memsetAsync(self.ptr, value, size, stream_ptr)
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream, __pyx_n_s_ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_stream_ptr = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":469
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memsetAsync(self.ptr, value, size, stream_ptr)
 * 
 */
  __pyx_t_2 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":470
 *             stream_ptr = stream.ptr
 *         if size > 0:
 *             runtime.memsetAsync(self.ptr, value, size, stream_ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_stream_ptr); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 470, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_7runtime_memsetAsync(__pyx_v_self->ptr, __pyx_v_value, __pyx_v_size, __pyx_t_4, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":469
 *         else:
 *             stream_ptr = stream.ptr
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             runtime.memsetAsync(self.ptr, value, size, stream_ptr)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":455
 *             runtime.memset(self.ptr, value, size)
 * 
 *     cpdef memset_async(self, int value, size_t size, stream=None):             # <<<<<<<<<<<<<<
 *         """Fills a memory sequence by constant byte value asynchronously.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.memset_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stream_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_31memset_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_30memset_async[] = "MemoryPointer.memset_async(self, int value, size_t size, stream=None)\nFills a memory sequence by constant byte value asynchronously.\n\n        Args:\n            value (int): Value to fill.\n            size (int): Size of the sequence in bytes.\n            stream (cupy.cuda.Stream): CUDA stream.\n                The default uses CUDA stream of the current context.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_31memset_async(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_value;
  size_t __pyx_v_size;
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("memset_async (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_size,&__pyx_n_s_stream,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("memset_async", 0, 2, 3, 1); __PYX_ERR(0, 455, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "memset_async") < 0)) __PYX_ERR(0, 455, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L3_error)
    __pyx_v_stream = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("memset_async", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 455, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.memset_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_30memset_async(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), __pyx_v_value, __pyx_v_size, __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_30memset_async(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, int __pyx_v_value, size_t __pyx_v_size, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async __pyx_t_2;
  __Pyx_RefNannySetupContext("memset_async", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.stream = __pyx_v_stream;
  __pyx_t_1 = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer->memset_async(__pyx_v_self, __pyx_v_value, __pyx_v_size, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.memset_async", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pxd":23
 * 
 *     cdef:
 *         readonly intptr_t ptr             # <<<<<<<<<<<<<<
 *         readonly int device_id
 *         readonly BaseMemory mem
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3ptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3ptr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_3ptr___get__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_3ptr___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.ptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pxd":24
 *     cdef:
 *         readonly intptr_t ptr
 *         readonly int device_id             # <<<<<<<<<<<<<<
 *         readonly BaseMemory mem
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_9device_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_9device_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_9device_id___get__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_9device_id___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.device_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pxd":25
 *         readonly intptr_t ptr
 *         readonly int device_id
 *         readonly BaseMemory mem             # <<<<<<<<<<<<<<
 * 
 *     cdef _init(self, BaseMemory mem, ptrdiff_t offset)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3mem_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3mem_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_3mem___get__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_3mem___get__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __pyx_r = ((PyObject *)__pyx_v_self->mem);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_32__reduce_cython__[] = "MemoryPointer.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_33__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_32__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_32__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.device_id, self.mem, self.ptr)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->mem));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self->mem));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.device_id, self.mem, self.ptr)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_3 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v__dict = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":7
 *     state = (self.device_id, self.mem, self.ptr)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_4 = (__pyx_v__dict != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v__dict);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.mem is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.device_id, self.mem, self.ptr)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.mem is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, None), state
 */
  /*else*/ {
    __pyx_t_5 = (((PyObject *)__pyx_v_self->mem) != Py_None);
    __pyx_v_use_setstate = __pyx_t_5;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.mem is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, None), state
 *     else:
 */
  __pyx_t_5 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_5) {

    /* "(tree fragment)":13
 *         use_setstate = self.mem is not None
 *     if use_setstate:
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_MemoryPointer); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_134903639);
    __Pyx_GIVEREF(__pyx_int_134903639);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_134903639);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 2, Py_None);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.mem is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, None), state
 *     else:
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MemoryPointer__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_MemoryPointer); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_134903639);
    __Pyx_GIVEREF(__pyx_int_134903639);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_134903639);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MemoryPointer__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_34__setstate_cython__[] = "MemoryPointer.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_35__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_34__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_13MemoryPointer_34__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MemoryPointer__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPointer__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MemoryPointer, (type(self), 0x80a7757, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MemoryPointer__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPointer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":473
 * 
 * 
 * cpdef MemoryPointer _malloc(size_t size):             # <<<<<<<<<<<<<<
 *     mem = Memory(size)
 *     return MemoryPointer(mem, 0)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_5_malloc(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory__malloc(size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v_mem = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_malloc", 0);

  /* "cupy/cuda/memory.pyx":474
 * 
 * cpdef MemoryPointer _malloc(size_t size):
 *     mem = Memory(size)             # <<<<<<<<<<<<<<
 *     return MemoryPointer(mem, 0)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_Memory), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mem = ((struct __pyx_obj_4cupy_4cuda_6memory_Memory *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":475
 * cpdef MemoryPointer _malloc(size_t size):
 *     mem = Memory(size)
 *     return MemoryPointer(mem, 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mem));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_mem));
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_0);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":473
 * 
 * 
 * cpdef MemoryPointer _malloc(size_t size):             # <<<<<<<<<<<<<<
 *     mem = Memory(size)
 *     return MemoryPointer(mem, 0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory._malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mem);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_5_malloc(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_4_malloc[] = "_malloc(size_t size) -> MemoryPointer";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_5_malloc(PyObject *__pyx_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_malloc (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_4_malloc(__pyx_self, ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_4_malloc(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_malloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory__malloc(__pyx_v_size, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":478
 * 
 * 
 * cpdef MemoryPointer malloc_managed(size_t size):             # <<<<<<<<<<<<<<
 *     """Allocate managed memory (unified memory).
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_7malloc_managed(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_malloc_managed(size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v_mem = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("malloc_managed", 0);

  /* "cupy/cuda/memory.pyx":500
 *     """
 * 
 *     mem = ManagedMemory(size)             # <<<<<<<<<<<<<<
 * #    print("new version")
 * #    print("??????????????")
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_ManagedMemory), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mem = ((struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":503
 * #    print("new version")
 * #    print("??????????????")
 *     mem.advise(3)             # <<<<<<<<<<<<<<
 *     #mem.advise(5)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_mem), __pyx_n_s_advise); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_int_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_int_3);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":506
 *     #mem.advise(5)
 * 
 *     return MemoryPointer(mem, 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mem));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_mem));
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_0);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":478
 * 
 * 
 * cpdef MemoryPointer malloc_managed(size_t size):             # <<<<<<<<<<<<<<
 *     """Allocate managed memory (unified memory).
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.malloc_managed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mem);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_7malloc_managed(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_6malloc_managed[] = "malloc_managed(size_t size) -> MemoryPointer\nAllocate managed memory (unified memory).\n\n    This method can be used as a CuPy memory allocator. The simplest way to\n    use a managed memory as the default allocator is the following code::\n\n        set_allocator(malloc_managed)\n\n    The advantage using managed memory in CuPy is that device memory\n    oversubscription is possible for GPUs that have a non-zero value for the\n    device attribute cudaDevAttrConcurrentManagedAccess.\n    CUDA >= 8.0 with GPUs later than or equal to Pascal is preferrable.\n\n    Read more at: https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#axzz4qygc1Ry1  # NOQA\n\n    Args:\n        size (int): Size of the memory allocation in bytes.\n\n    Returns:\n        ~cupy.cuda.MemoryPointer: Pointer to the allocated buffer.\n    ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_7malloc_managed(PyObject *__pyx_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("malloc_managed (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 478, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.malloc_managed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_6malloc_managed(__pyx_self, ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_6malloc_managed(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("malloc_managed", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_malloc_managed(__pyx_v_size, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.malloc_managed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":512
 * 
 * 
 * cpdef MemoryPointer alloc(size):             # <<<<<<<<<<<<<<
 *     """Calls the current allocator.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_9alloc(PyObject *__pyx_self, PyObject *__pyx_v_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_alloc(PyObject *__pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("alloc", 0);

  /* "cupy/cuda/memory.pyx":524
 * 
 *     """
 *     return _current_allocator(size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(__pyx_v_4cupy_4cuda_6memory__current_allocator);
  __pyx_t_2 = __pyx_v_4cupy_4cuda_6memory__current_allocator; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_size) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_size);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 524, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":512
 * 
 * 
 * cpdef MemoryPointer alloc(size):             # <<<<<<<<<<<<<<
 *     """Calls the current allocator.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.alloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_9alloc(PyObject *__pyx_self, PyObject *__pyx_v_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_8alloc[] = "alloc(size) -> MemoryPointer\nCalls the current allocator.\n\n    Use :func:`~cupy.cuda.set_allocator` to change the current allocator.\n\n    Args:\n        size (int): Size of the memory allocation.\n\n    Returns:\n        ~cupy.cuda.MemoryPointer: Pointer to the allocated buffer.\n\n    ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_9alloc(PyObject *__pyx_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alloc (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_8alloc(__pyx_self, ((PyObject *)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_8alloc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("alloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_alloc(__pyx_v_size, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.alloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":527
 * 
 * 
 * cpdef set_allocator(allocator=None):             # <<<<<<<<<<<<<<
 *     """Sets the current allocator for GPU memory.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_11set_allocator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_set_allocator(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_set_allocator *__pyx_optional_args) {
  PyObject *__pyx_v_allocator = ((PyObject *)Py_None);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("set_allocator", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_allocator = __pyx_optional_args->allocator;
    }
  }
  __Pyx_INCREF(__pyx_v_allocator);

  /* "cupy/cuda/memory.pyx":539
 *     """
 *     global _current_allocator
 *     if allocator is None:             # <<<<<<<<<<<<<<
 *         allocator = _malloc
 *     _current_allocator = allocator
 */
  __pyx_t_1 = (__pyx_v_allocator == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":540
 *     global _current_allocator
 *     if allocator is None:
 *         allocator = _malloc             # <<<<<<<<<<<<<<
 *     _current_allocator = allocator
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_malloc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_allocator, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":539
 *     """
 *     global _current_allocator
 *     if allocator is None:             # <<<<<<<<<<<<<<
 *         allocator = _malloc
 *     _current_allocator = allocator
 */
  }

  /* "cupy/cuda/memory.pyx":541
 *     if allocator is None:
 *         allocator = _malloc
 *     _current_allocator = allocator             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_allocator);
  __Pyx_XGOTREF(__pyx_v_4cupy_4cuda_6memory__current_allocator);
  __Pyx_DECREF_SET(__pyx_v_4cupy_4cuda_6memory__current_allocator, __pyx_v_allocator);
  __Pyx_GIVEREF(__pyx_v_allocator);

  /* "cupy/cuda/memory.pyx":527
 * 
 * 
 * cpdef set_allocator(allocator=None):             # <<<<<<<<<<<<<<
 *     """Sets the current allocator for GPU memory.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.set_allocator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_allocator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_11set_allocator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10set_allocator[] = "set_allocator(allocator=None)\nSets the current allocator for GPU memory.\n\n    Args:\n        allocator (function): CuPy memory allocator. It must have the same\n            interface as the :func:`cupy.cuda.alloc` function, which takes the\n            buffer size as an argument and returns the device buffer of that\n            size. When ``None`` is specified, raw memory allocator will be\n            used (i.e., memory pool is disabled).\n\n    ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_11set_allocator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocator = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_allocator (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocator,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocator);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_allocator") < 0)) __PYX_ERR(0, 527, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocator = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_allocator", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 527, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.set_allocator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10set_allocator(__pyx_self, __pyx_v_allocator);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10set_allocator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_allocator) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_set_allocator __pyx_t_2;
  __Pyx_RefNannySetupContext("set_allocator", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.allocator = __pyx_v_allocator;
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_set_allocator(0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.set_allocator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":558
 *         readonly object pool
 * 
 *     def __init__(self, _Chunk chunk, pool):             # <<<<<<<<<<<<<<
 *         self.ptr = chunk.ptr()
 *         self.size = chunk.size
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_12PooledMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_12PooledMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk = 0;
  PyObject *__pyx_v_pool = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_chunk,&__pyx_n_s_pool,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_chunk)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pool)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 558, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 558, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_chunk = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)values[0]);
    __pyx_v_pool = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 558, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.PooledMemory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chunk), __pyx_ptype_4cupy_4cuda_6memory__Chunk, 1, "chunk", 0))) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_12PooledMemory___init__(((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_v_self), __pyx_v_chunk, __pyx_v_pool);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_12PooledMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk, PyObject *__pyx_v_pool) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":559
 * 
 *     def __init__(self, _Chunk chunk, pool):
 *         self.ptr = chunk.ptr()             # <<<<<<<<<<<<<<
 *         self.size = chunk.size
 *         self.device_id = chunk.mem.device_id
 */
  __pyx_v_self->__pyx_base.ptr = __pyx_f_4cupy_4cuda_6memory_6_Chunk_ptr(__pyx_v_chunk, 0);

  /* "cupy/cuda/memory.pyx":560
 *     def __init__(self, _Chunk chunk, pool):
 *         self.ptr = chunk.ptr()
 *         self.size = chunk.size             # <<<<<<<<<<<<<<
 *         self.device_id = chunk.mem.device_id
 *         self.pool = pool
 */
  __pyx_t_1 = __pyx_v_chunk->size;
  __pyx_v_self->__pyx_base.size = __pyx_t_1;

  /* "cupy/cuda/memory.pyx":561
 *         self.ptr = chunk.ptr()
 *         self.size = chunk.size
 *         self.device_id = chunk.mem.device_id             # <<<<<<<<<<<<<<
 *         self.pool = pool
 * 
 */
  __pyx_t_2 = __pyx_v_chunk->mem->device_id;
  __pyx_v_self->__pyx_base.device_id = __pyx_t_2;

  /* "cupy/cuda/memory.pyx":562
 *         self.size = chunk.size
 *         self.device_id = chunk.mem.device_id
 *         self.pool = pool             # <<<<<<<<<<<<<<
 * 
 *     cpdef free(self):
 */
  __Pyx_INCREF(__pyx_v_pool);
  __Pyx_GIVEREF(__pyx_v_pool);
  __Pyx_GOTREF(__pyx_v_self->pool);
  __Pyx_DECREF(__pyx_v_self->pool);
  __pyx_v_self->pool = __pyx_v_pool;

  /* "cupy/cuda/memory.pyx":558
 *         readonly object pool
 * 
 *     def __init__(self, _Chunk chunk, pool):             # <<<<<<<<<<<<<<
 *         self.ptr = chunk.ptr()
 *         self.size = chunk.size
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":564
 *         self.pool = pool
 * 
 *     cpdef free(self):             # <<<<<<<<<<<<<<
 *         """Frees the memory buffer and returns it to the memory pool.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_3free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_12PooledMemory_free(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  intptr_t __pyx_v_ptr;
  PyObject *__pyx_v_pool = NULL;
  size_t __pyx_v_size;
  PyObject *__pyx_v_hooks = NULL;
  int __pyx_v_device_id;
  PyObject *__pyx_v_pmem_id = NULL;
  PyObject *__pyx_v_hooks_values = NULL;
  PyObject *__pyx_v_hook = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  intptr_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("free", 0);

  /* "cupy/cuda/memory.pyx":572
 *         """
 *         cdef intptr_t ptr
 *         ptr = self.ptr             # <<<<<<<<<<<<<<
 *         if ptr == 0:
 *             return
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.ptr;
  __pyx_v_ptr = __pyx_t_1;

  /* "cupy/cuda/memory.pyx":573
 *         cdef intptr_t ptr
 *         ptr = self.ptr
 *         if ptr == 0:             # <<<<<<<<<<<<<<
 *             return
 *         self.ptr = 0
 */
  __pyx_t_2 = ((__pyx_v_ptr == 0) != 0);
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":574
 *         ptr = self.ptr
 *         if ptr == 0:
 *             return             # <<<<<<<<<<<<<<
 *         self.ptr = 0
 *         pool = self.pool()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":573
 *         cdef intptr_t ptr
 *         ptr = self.ptr
 *         if ptr == 0:             # <<<<<<<<<<<<<<
 *             return
 *         self.ptr = 0
 */
  }

  /* "cupy/cuda/memory.pyx":575
 *         if ptr == 0:
 *             return
 *         self.ptr = 0             # <<<<<<<<<<<<<<
 *         pool = self.pool()
 *         if pool is None:
 */
  __pyx_v_self->__pyx_base.ptr = 0;

  /* "cupy/cuda/memory.pyx":576
 *             return
 *         self.ptr = 0
 *         pool = self.pool()             # <<<<<<<<<<<<<<
 *         if pool is None:
 *             return
 */
  __Pyx_INCREF(__pyx_v_self->pool);
  __pyx_t_4 = __pyx_v_self->pool; __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_pool = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":577
 *         self.ptr = 0
 *         pool = self.pool()
 *         if pool is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = (__pyx_v_pool == Py_None);
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (__pyx_t_6) {

    /* "cupy/cuda/memory.pyx":578
 *         pool = self.pool()
 *         if pool is None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         size = self.size
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":577
 *         self.ptr = 0
 *         pool = self.pool()
 *         if pool is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":580
 *             return
 * 
 *         size = self.size             # <<<<<<<<<<<<<<
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 */
  __pyx_t_7 = __pyx_v_self->__pyx_base.size;
  __pyx_v_size = __pyx_t_7;

  /* "cupy/cuda/memory.pyx":581
 * 
 *         size = self.size
 *         if memory_hook._has_memory_hooks():             # <<<<<<<<<<<<<<
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 */
  __pyx_t_6 = (__pyx_f_4cupy_4cuda_11memory_hook__has_memory_hooks(0) != 0);
  if (__pyx_t_6) {

    /* "cupy/cuda/memory.pyx":582
 *         size = self.size
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()             # <<<<<<<<<<<<<<
 *             if hooks:
 *                 device_id = self.device_id
 */
    __pyx_t_3 = __pyx_f_4cupy_4cuda_11memory_hook_get_memory_hooks(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_hooks = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cupy/cuda/memory.pyx":583
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:             # <<<<<<<<<<<<<<
 *                 device_id = self.device_id
 *                 pmem_id = id(self)
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_hooks); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 583, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "cupy/cuda/memory.pyx":584
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 *                 device_id = self.device_id             # <<<<<<<<<<<<<<
 *                 pmem_id = id(self)
 * 
 */
      __pyx_t_8 = __pyx_v_self->__pyx_base.device_id;
      __pyx_v_device_id = __pyx_t_8;

      /* "cupy/cuda/memory.pyx":585
 *             if hooks:
 *                 device_id = self.device_id
 *                 pmem_id = id(self)             # <<<<<<<<<<<<<<
 * 
 *                 # avoid six for performance
 */
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 585, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_pmem_id = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cupy/cuda/memory.pyx":588
 * 
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()             # <<<<<<<<<<<<<<
 *                 for hook in hooks_values:
 *                     hook.free_preprocess(device_id=device_id,
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hooks, __pyx_n_s_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_hooks_values = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cupy/cuda/memory.pyx":589
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                     hook.free_preprocess(device_id=device_id,
 *                                          mem_size=size,
 */
      if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
        __pyx_t_3 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 589, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 589, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 589, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 589, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 589, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_10(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 589, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "cupy/cuda/memory.pyx":590
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:
 *                     hook.free_preprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                          mem_size=size,
 *                                          mem_ptr=ptr,
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_free_preprocess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_device_id, __pyx_t_11) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "cupy/cuda/memory.pyx":591
 *                 for hook in hooks_values:
 *                     hook.free_preprocess(device_id=device_id,
 *                                          mem_size=size,             # <<<<<<<<<<<<<<
 *                                          mem_ptr=ptr,
 *                                          pmem_id=pmem_id)
 */
        __pyx_t_11 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 591, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_size, __pyx_t_11) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "cupy/cuda/memory.pyx":592
 *                     hook.free_preprocess(device_id=device_id,
 *                                          mem_size=size,
 *                                          mem_ptr=ptr,             # <<<<<<<<<<<<<<
 *                                          pmem_id=pmem_id)
 *                 try:
 */
        __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_ptr); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 592, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_ptr, __pyx_t_11) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "cupy/cuda/memory.pyx":593
 *                                          mem_size=size,
 *                                          mem_ptr=ptr,
 *                                          pmem_id=pmem_id)             # <<<<<<<<<<<<<<
 *                 try:
 *                     (<SingleDeviceMemoryPool>pool).free(ptr, size)
 */
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_pmem_id, __pyx_v_pmem_id) < 0) __PYX_ERR(0, 590, __pyx_L1_error)

        /* "cupy/cuda/memory.pyx":590
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:
 *                     hook.free_preprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                          mem_size=size,
 *                                          mem_ptr=ptr,
 */
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 590, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "cupy/cuda/memory.pyx":589
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                     hook.free_preprocess(device_id=device_id,
 *                                          mem_size=size,
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cupy/cuda/memory.pyx":594
 *                                          mem_ptr=ptr,
 *                                          pmem_id=pmem_id)
 *                 try:             # <<<<<<<<<<<<<<
 *                     (<SingleDeviceMemoryPool>pool).free(ptr, size)
 *                 finally:
 */
      /*try:*/ {

        /* "cupy/cuda/memory.pyx":595
 *                                          pmem_id=pmem_id)
 *                 try:
 *                     (<SingleDeviceMemoryPool>pool).free(ptr, size)             # <<<<<<<<<<<<<<
 *                 finally:
 *                     for hook in hooks_values:
 */
        __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_pool), __pyx_v_ptr, __pyx_v_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 595, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }

      /* "cupy/cuda/memory.pyx":597
 *                     (<SingleDeviceMemoryPool>pool).free(ptr, size)
 *                 finally:
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         hook.free_postprocess(device_id=device_id,
 *                                               mem_size=size,
 */
      /*finally:*/ {
        /*normal exit:*/{
          if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
            __pyx_t_3 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 597, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 597, __pyx_L1_error)
          }
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 597, __pyx_L1_error)
                #else
                __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 597, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              } else {
                if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 597, __pyx_L1_error)
                #else
                __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 597, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              }
            } else {
              __pyx_t_11 = __pyx_t_10(__pyx_t_3);
              if (unlikely(!__pyx_t_11)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 597, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_11);
            }
            __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_11);
            __pyx_t_11 = 0;

            /* "cupy/cuda/memory.pyx":598
 *                 finally:
 *                     for hook in hooks_values:
 *                         hook.free_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_free_postprocess); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 598, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_device_id, __pyx_t_4) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":599
 *                     for hook in hooks_values:
 *                         hook.free_postprocess(device_id=device_id,
 *                                               mem_size=size,             # <<<<<<<<<<<<<<
 *                                               mem_ptr=ptr,
 *                                               pmem_id=pmem_id)
 */
            __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 599, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_size, __pyx_t_4) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":600
 *                         hook.free_postprocess(device_id=device_id,
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,             # <<<<<<<<<<<<<<
 *                                               pmem_id=pmem_id)
 *                 return
 */
            __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_ptr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 600, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_ptr, __pyx_t_4) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":601
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,
 *                                               pmem_id=pmem_id)             # <<<<<<<<<<<<<<
 *                 return
 *         (<SingleDeviceMemoryPool>pool).free(ptr, size)
 */
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_pmem_id, __pyx_v_pmem_id) < 0) __PYX_ERR(0, 598, __pyx_L1_error)

            /* "cupy/cuda/memory.pyx":598
 *                 finally:
 *                     for hook in hooks_values:
 *                         hook.free_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":597
 *                     (<SingleDeviceMemoryPool>pool).free(ptr, size)
 *                 finally:
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         hook.free_postprocess(device_id=device_id,
 *                                               mem_size=size,
 */
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L11;
        }
        __pyx_L10_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_8 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
              __pyx_t_3 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
              __pyx_t_10 = NULL;
            } else {
              __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 597, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 597, __pyx_L15_error)
            }
            for (;;) {
              if (likely(!__pyx_t_10)) {
                if (likely(PyList_CheckExact(__pyx_t_3))) {
                  if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 597, __pyx_L15_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 597, __pyx_L15_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_10(__pyx_t_3);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 597, __pyx_L15_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "cupy/cuda/memory.pyx":598
 *                 finally:
 *                     for hook in hooks_values:
 *                         hook.free_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_free_postprocess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 598, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 598, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_device_id, __pyx_t_11) < 0) __PYX_ERR(0, 598, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

              /* "cupy/cuda/memory.pyx":599
 *                     for hook in hooks_values:
 *                         hook.free_postprocess(device_id=device_id,
 *                                               mem_size=size,             # <<<<<<<<<<<<<<
 *                                               mem_ptr=ptr,
 *                                               pmem_id=pmem_id)
 */
              __pyx_t_11 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 599, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_size, __pyx_t_11) < 0) __PYX_ERR(0, 598, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

              /* "cupy/cuda/memory.pyx":600
 *                         hook.free_postprocess(device_id=device_id,
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,             # <<<<<<<<<<<<<<
 *                                               pmem_id=pmem_id)
 *                 return
 */
              __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_ptr); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 600, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_11);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_ptr, __pyx_t_11) < 0) __PYX_ERR(0, 598, __pyx_L15_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

              /* "cupy/cuda/memory.pyx":601
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,
 *                                               pmem_id=pmem_id)             # <<<<<<<<<<<<<<
 *                 return
 *         (<SingleDeviceMemoryPool>pool).free(ptr, size)
 */
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_pmem_id, __pyx_v_pmem_id) < 0) __PYX_ERR(0, 598, __pyx_L15_error)

              /* "cupy/cuda/memory.pyx":598
 *                 finally:
 *                     for hook in hooks_values:
 *                         hook.free_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                               mem_size=size,
 *                                               mem_ptr=ptr,
 */
              __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 598, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

              /* "cupy/cuda/memory.pyx":597
 *                     (<SingleDeviceMemoryPool>pool).free(ptr, size)
 *                 finally:
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         hook.free_postprocess(device_id=device_id,
 *                                               mem_size=size,
 */
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L1_error;
          __pyx_L15_error:;
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          goto __pyx_L1_error;
        }
        __pyx_L11:;
      }

      /* "cupy/cuda/memory.pyx":602
 *                                               mem_ptr=ptr,
 *                                               pmem_id=pmem_id)
 *                 return             # <<<<<<<<<<<<<<
 *         (<SingleDeviceMemoryPool>pool).free(ptr, size)
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "cupy/cuda/memory.pyx":583
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:             # <<<<<<<<<<<<<<
 *                 device_id = self.device_id
 *                 pmem_id = id(self)
 */
    }

    /* "cupy/cuda/memory.pyx":581
 * 
 *         size = self.size
 *         if memory_hook._has_memory_hooks():             # <<<<<<<<<<<<<<
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 */
  }

  /* "cupy/cuda/memory.pyx":603
 *                                               pmem_id=pmem_id)
 *                 return
 *         (<SingleDeviceMemoryPool>pool).free(ptr, size)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_pool), __pyx_v_ptr, __pyx_v_size, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":564
 *         self.pool = pool
 * 
 *     cpdef free(self):             # <<<<<<<<<<<<<<
 *         """Frees the memory buffer and returns it to the memory pool.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.PooledMemory.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pool);
  __Pyx_XDECREF(__pyx_v_hooks);
  __Pyx_XDECREF(__pyx_v_pmem_id);
  __Pyx_XDECREF(__pyx_v_hooks_values);
  __Pyx_XDECREF(__pyx_v_hook);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_3free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_12PooledMemory_2free[] = "PooledMemory.free(self)\nFrees the memory buffer and returns it to the memory pool.\n\n        This function actually does not free the buffer. It just returns the\n        buffer to the memory pool for reuse.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_3free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_12PooledMemory_2free(((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_2free(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("free", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_12PooledMemory_free(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.PooledMemory.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":605
 *         (<SingleDeviceMemoryPool>pool).free(ptr, size)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if _exit_mode:
 *             return  # To avoid error at exit
 */

/* Python wrapper */
static void __pyx_pw_4cupy_4cuda_6memory_12PooledMemory_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cupy_4cuda_6memory_12PooledMemory_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cupy_4cuda_6memory_12PooledMemory_4__dealloc__(((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cupy_4cuda_6memory_12PooledMemory_4__dealloc__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cupy/cuda/memory.pyx":606
 * 
 *     def __dealloc__(self):
 *         if _exit_mode:             # <<<<<<<<<<<<<<
 *             return  # To avoid error at exit
 *         self.free()
 */
  __pyx_t_1 = (__pyx_v_4cupy_4cuda_6memory__exit_mode != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":607
 *     def __dealloc__(self):
 *         if _exit_mode:
 *             return  # To avoid error at exit             # <<<<<<<<<<<<<<
 *         self.free()
 * 
 */
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":606
 * 
 *     def __dealloc__(self):
 *         if _exit_mode:             # <<<<<<<<<<<<<<
 *             return  # To avoid error at exit
 *         self.free()
 */
  }

  /* "cupy/cuda/memory.pyx":608
 *         if _exit_mode:
 *             return  # To avoid error at exit
 *         self.free()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_f_4cupy_4cuda_6memory_12PooledMemory_free(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":605
 *         (<SingleDeviceMemoryPool>pool).free(ptr, size)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if _exit_mode:
 *             return  # To avoid error at exit
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("cupy.cuda.memory.PooledMemory.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "cupy/cuda/memory.pyx":556
 * 
 *     cdef:
 *         readonly object pool             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Chunk chunk, pool):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_4pool_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_4pool_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_12PooledMemory_4pool___get__(((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_4pool___get__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->pool);
  __pyx_r = __pyx_v_self->pool;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_12PooledMemory_6__reduce_cython__[] = "PooledMemory.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_12PooledMemory_6__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_6__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.device_id, self.pool, self.ptr, self.size)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->__pyx_base.ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.size); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->pool);
  __Pyx_GIVEREF(__pyx_v_self->pool);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_self->pool);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.device_id, self.pool, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self.device_id, self.pool, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.pool is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.device_id, self.pool, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.pool is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, None), state
 */
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->pool != Py_None);
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.pool is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self.pool is not None
 *     if use_setstate:
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_PooledMemory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_33037971);
    __Pyx_GIVEREF(__pyx_int_33037971);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_33037971);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.pool is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, None), state
 *     else:
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PooledMemory__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_PooledMemory); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_33037971);
    __Pyx_GIVEREF(__pyx_int_33037971);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_33037971);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.PooledMemory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PooledMemory__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_12PooledMemory_8__setstate_cython__[] = "PooledMemory.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_12PooledMemory_8__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_12PooledMemory_8__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PooledMemory__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_PooledMemory__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PooledMemory, (type(self), 0x1f81e93, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PooledMemory__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.PooledMemory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":614
 * 
 * 
 * cdef _compact_index(SingleDeviceMemoryPool pool, size_t stream_ptr, bint free):             # <<<<<<<<<<<<<<
 *     # need self._free_lock
 *     cdef list arena, new_arena
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory__compact_index(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_pool, size_t __pyx_v_stream_ptr, int __pyx_v_free) {
  PyObject *__pyx_v_arena = 0;
  PyObject *__pyx_v_new_arena = 0;
  PyObject *__pyx_v_free_list = 0;
  PyObject *__pyx_v_keep_list = 0;
  std::vector<size_t>  *__pyx_v_arena_index;
  std::vector<size_t>  __pyx_v_new_index;
  size_t __pyx_v_index;
  PyObject *__pyx_v_chunk = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  __Pyx_FakeReference<size_t> __pyx_t_14;
  __Pyx_RefNannySetupContext("_compact_index", 0);

  /* "cupy/cuda/memory.pyx":622
 *     cdef size_t index
 * 
 *     if stream_ptr not in pool._free:             # <<<<<<<<<<<<<<
 *         return
 *     new_arena = []
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_stream_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_pool->_free == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 622, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_pool->_free, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "cupy/cuda/memory.pyx":623
 * 
 *     if stream_ptr not in pool._free:
 *         return             # <<<<<<<<<<<<<<
 *     new_arena = []
 *     arena = pool._free[stream_ptr]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":622
 *     cdef size_t index
 * 
 *     if stream_ptr not in pool._free:             # <<<<<<<<<<<<<<
 *         return
 *     new_arena = []
 */
  }

  /* "cupy/cuda/memory.pyx":624
 *     if stream_ptr not in pool._free:
 *         return
 *     new_arena = []             # <<<<<<<<<<<<<<
 *     arena = pool._free[stream_ptr]
 *     arena_index = pool._arena_index(stream_ptr)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_arena = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":625
 *         return
 *     new_arena = []
 *     arena = pool._free[stream_ptr]             # <<<<<<<<<<<<<<
 *     arena_index = pool._arena_index(stream_ptr)
 *     for index, free_list in enumerate(arena):
 */
  if (unlikely(__pyx_v_pool->_free == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 625, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_stream_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_pool->_free, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 625, __pyx_L1_error)
  __pyx_v_arena = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cupy/cuda/memory.pyx":626
 *     new_arena = []
 *     arena = pool._free[stream_ptr]
 *     arena_index = pool._arena_index(stream_ptr)             # <<<<<<<<<<<<<<
 *     for index, free_list in enumerate(arena):
 *         if not free_list:
 */
  __pyx_v_arena_index = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_index(__pyx_v_pool, __pyx_v_stream_ptr);

  /* "cupy/cuda/memory.pyx":627
 *     arena = pool._free[stream_ptr]
 *     arena_index = pool._arena_index(stream_ptr)
 *     for index, free_list in enumerate(arena):             # <<<<<<<<<<<<<<
 *         if not free_list:
 *             continue
 */
  __pyx_t_5 = 0;
  __pyx_t_4 = __pyx_v_arena; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 627, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if (!(likely(PySet_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_free_list, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_v_index = __pyx_t_5;
    __pyx_t_5 = (__pyx_t_5 + 1);

    /* "cupy/cuda/memory.pyx":628
 *     arena_index = pool._arena_index(stream_ptr)
 *     for index, free_list in enumerate(arena):
 *         if not free_list:             # <<<<<<<<<<<<<<
 *             continue
 *         if free:
 */
    __pyx_t_3 = (__pyx_v_free_list != Py_None)&&(PySet_GET_SIZE(__pyx_v_free_list) != 0);
    __pyx_t_2 = ((!__pyx_t_3) != 0);
    if (__pyx_t_2) {

      /* "cupy/cuda/memory.pyx":629
 *     for index, free_list in enumerate(arena):
 *         if not free_list:
 *             continue             # <<<<<<<<<<<<<<
 *         if free:
 *             keep_list = set()
 */
      goto __pyx_L4_continue;

      /* "cupy/cuda/memory.pyx":628
 *     arena_index = pool._arena_index(stream_ptr)
 *     for index, free_list in enumerate(arena):
 *         if not free_list:             # <<<<<<<<<<<<<<
 *             continue
 *         if free:
 */
    }

    /* "cupy/cuda/memory.pyx":630
 *         if not free_list:
 *             continue
 *         if free:             # <<<<<<<<<<<<<<
 *             keep_list = set()
 *             for chunk in free_list:
 */
    __pyx_t_2 = (__pyx_v_free != 0);
    if (__pyx_t_2) {

      /* "cupy/cuda/memory.pyx":631
 *             continue
 *         if free:
 *             keep_list = set()             # <<<<<<<<<<<<<<
 *             for chunk in free_list:
 *                 if chunk.prev is not None or chunk.next is not None:
 */
      __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_keep_list, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "cupy/cuda/memory.pyx":632
 *         if free:
 *             keep_list = set()
 *             for chunk in free_list:             # <<<<<<<<<<<<<<
 *                 if chunk.prev is not None or chunk.next is not None:
 *                     keep_list.add(chunk)
 */
      __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_set_iterator(__pyx_v_free_list, 1, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 632, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_1);
      __pyx_t_1 = __pyx_t_10;
      __pyx_t_10 = 0;
      while (1) {
        __pyx_t_11 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_8, &__pyx_t_7, &__pyx_t_10, __pyx_t_9);
        if (unlikely(__pyx_t_11 == 0)) break;
        if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "cupy/cuda/memory.pyx":633
 *             keep_list = set()
 *             for chunk in free_list:
 *                 if chunk.prev is not None or chunk.next is not None:             # <<<<<<<<<<<<<<
 *                     keep_list.add(chunk)
 *             if len(keep_list) == 0:
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_prev); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = (__pyx_t_10 != Py_None);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = (__pyx_t_3 != 0);
        if (!__pyx_t_12) {
        } else {
          __pyx_t_2 = __pyx_t_12;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_chunk, __pyx_n_s_next); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 633, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = (__pyx_t_10 != Py_None);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_3 = (__pyx_t_12 != 0);
        __pyx_t_2 = __pyx_t_3;
        __pyx_L11_bool_binop_done:;
        if (__pyx_t_2) {

          /* "cupy/cuda/memory.pyx":634
 *             for chunk in free_list:
 *                 if chunk.prev is not None or chunk.next is not None:
 *                     keep_list.add(chunk)             # <<<<<<<<<<<<<<
 *             if len(keep_list) == 0:
 *                 continue
 */
          __pyx_t_13 = PySet_Add(__pyx_v_keep_list, __pyx_v_chunk); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 634, __pyx_L1_error)

          /* "cupy/cuda/memory.pyx":633
 *             keep_list = set()
 *             for chunk in free_list:
 *                 if chunk.prev is not None or chunk.next is not None:             # <<<<<<<<<<<<<<
 *                     keep_list.add(chunk)
 *             if len(keep_list) == 0:
 */
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cupy/cuda/memory.pyx":635
 *                 if chunk.prev is not None or chunk.next is not None:
 *                     keep_list.add(chunk)
 *             if len(keep_list) == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             free_list = keep_list
 */
      __pyx_t_8 = PySet_GET_SIZE(__pyx_v_keep_list); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 635, __pyx_L1_error)
      __pyx_t_2 = ((__pyx_t_8 == 0) != 0);
      if (__pyx_t_2) {

        /* "cupy/cuda/memory.pyx":636
 *                     keep_list.add(chunk)
 *             if len(keep_list) == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             free_list = keep_list
 * 
 */
        goto __pyx_L4_continue;

        /* "cupy/cuda/memory.pyx":635
 *                 if chunk.prev is not None or chunk.next is not None:
 *                     keep_list.add(chunk)
 *             if len(keep_list) == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             free_list = keep_list
 */
      }

      /* "cupy/cuda/memory.pyx":637
 *             if len(keep_list) == 0:
 *                 continue
 *             free_list = keep_list             # <<<<<<<<<<<<<<
 * 
 *         new_index.push_back(arena_index.at(index))
 */
      __Pyx_INCREF(__pyx_v_keep_list);
      __Pyx_DECREF_SET(__pyx_v_free_list, __pyx_v_keep_list);

      /* "cupy/cuda/memory.pyx":630
 *         if not free_list:
 *             continue
 *         if free:             # <<<<<<<<<<<<<<
 *             keep_list = set()
 *             for chunk in free_list:
 */
    }

    /* "cupy/cuda/memory.pyx":639
 *             free_list = keep_list
 * 
 *         new_index.push_back(arena_index.at(index))             # <<<<<<<<<<<<<<
 *         new_arena.append(free_list)
 *     if free and len(new_arena) == 0:
 */
    try {
      __pyx_t_14 = __pyx_v_arena_index->at(__pyx_v_index);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 639, __pyx_L1_error)
    }
    try {
      __pyx_v_new_index.push_back(__pyx_t_14);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 639, __pyx_L1_error)
    }

    /* "cupy/cuda/memory.pyx":640
 * 
 *         new_index.push_back(arena_index.at(index))
 *         new_arena.append(free_list)             # <<<<<<<<<<<<<<
 *     if free and len(new_arena) == 0:
 *         pool._index.erase(stream_ptr)
 */
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_new_arena, __pyx_v_free_list); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 640, __pyx_L1_error)

    /* "cupy/cuda/memory.pyx":627
 *     arena = pool._free[stream_ptr]
 *     arena_index = pool._arena_index(stream_ptr)
 *     for index, free_list in enumerate(arena):             # <<<<<<<<<<<<<<
 *         if not free_list:
 *             continue
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cupy/cuda/memory.pyx":641
 *         new_index.push_back(arena_index.at(index))
 *         new_arena.append(free_list)
 *     if free and len(new_arena) == 0:             # <<<<<<<<<<<<<<
 *         pool._index.erase(stream_ptr)
 *         pool._flag.erase(stream_ptr)
 */
  __pyx_t_3 = (__pyx_v_free != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_6 = PyList_GET_SIZE(__pyx_v_new_arena); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_6 == 0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cupy/cuda/memory.pyx":642
 *         new_arena.append(free_list)
 *     if free and len(new_arena) == 0:
 *         pool._index.erase(stream_ptr)             # <<<<<<<<<<<<<<
 *         pool._flag.erase(stream_ptr)
 *         del pool._free[stream_ptr]
 */
    (void)(__pyx_v_pool->_index.erase(__pyx_v_stream_ptr));

    /* "cupy/cuda/memory.pyx":643
 *     if free and len(new_arena) == 0:
 *         pool._index.erase(stream_ptr)
 *         pool._flag.erase(stream_ptr)             # <<<<<<<<<<<<<<
 *         del pool._free[stream_ptr]
 *     else:
 */
    (void)(__pyx_v_pool->_flag.erase(__pyx_v_stream_ptr));

    /* "cupy/cuda/memory.pyx":644
 *         pool._index.erase(stream_ptr)
 *         pool._flag.erase(stream_ptr)
 *         del pool._free[stream_ptr]             # <<<<<<<<<<<<<<
 *     else:
 *         arena_index.swap(new_index)
 */
    if (unlikely(__pyx_v_pool->_free == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 644, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_stream_ptr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyDict_DelItem(__pyx_v_pool->_free, __pyx_t_4) < 0)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cupy/cuda/memory.pyx":641
 *         new_index.push_back(arena_index.at(index))
 *         new_arena.append(free_list)
 *     if free and len(new_arena) == 0:             # <<<<<<<<<<<<<<
 *         pool._index.erase(stream_ptr)
 *         pool._flag.erase(stream_ptr)
 */
    goto __pyx_L14;
  }

  /* "cupy/cuda/memory.pyx":646
 *         del pool._free[stream_ptr]
 *     else:
 *         arena_index.swap(new_index)             # <<<<<<<<<<<<<<
 *         arena[:] = new_arena
 *         pool._arena_flag(stream_ptr).assign(new_index.size(), <int8_t>1)
 */
  /*else*/ {
    __pyx_v_arena_index->swap(__pyx_v_new_index);

    /* "cupy/cuda/memory.pyx":647
 *     else:
 *         arena_index.swap(new_index)
 *         arena[:] = new_arena             # <<<<<<<<<<<<<<
 *         pool._arena_flag(stream_ptr).assign(new_index.size(), <int8_t>1)
 * 
 */
    if (unlikely(__pyx_v_arena == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 647, __pyx_L1_error)
    }
    if (__Pyx_PyObject_SetSlice(__pyx_v_arena, __pyx_v_new_arena, 0, 0, NULL, NULL, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 647, __pyx_L1_error)

    /* "cupy/cuda/memory.pyx":648
 *         arena_index.swap(new_index)
 *         arena[:] = new_arena
 *         pool._arena_flag(stream_ptr).assign(new_index.size(), <int8_t>1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_flag(__pyx_v_pool, __pyx_v_stream_ptr)->assign(__pyx_v_new_index.size(), ((int8_t)1));
  }
  __pyx_L14:;

  /* "cupy/cuda/memory.pyx":614
 * 
 * 
 * cdef _compact_index(SingleDeviceMemoryPool pool, size_t stream_ptr, bint free):             # <<<<<<<<<<<<<<
 *     # need self._free_lock
 *     cdef list arena, new_arena
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cupy.cuda.memory._compact_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arena);
  __Pyx_XDECREF(__pyx_v_new_arena);
  __Pyx_XDECREF(__pyx_v_free_list);
  __Pyx_XDECREF(__pyx_v_keep_list);
  __Pyx_XDECREF(__pyx_v_chunk);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":651
 * 
 * 
 * cdef object _get_chunk(SingleDeviceMemoryPool pool, size_t size,             # <<<<<<<<<<<<<<
 *                        size_t stream_ptr):
 *     # need self._free_lock
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory__get_chunk(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_pool, size_t __pyx_v_size, size_t __pyx_v_stream_ptr) {
  PyObject *__pyx_v_free_list = 0;
  size_t __pyx_v_i;
  size_t __pyx_v_index;
  size_t __pyx_v_length;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk = 0;
  size_t __pyx_v_bin_index;
  PyObject *__pyx_v_arena = 0;
  std::vector<size_t>  *__pyx_v_a_index;
  std::vector<int8_t>  *__pyx_v_a_flag;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_remaining = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_FakeReference<int8_t> __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("_get_chunk", 0);

  /* "cupy/cuda/memory.pyx":657
 *     cdef size_t i, index, length
 *     cdef _Chunk chunk
 *     cdef size_t bin_index = _bin_index_from_size(size)             # <<<<<<<<<<<<<<
 *     cdef list arena = pool._arena(stream_ptr)
 *     a_index = pool._arena_index(stream_ptr)
 */
  __pyx_v_bin_index = __pyx_f_4cupy_4cuda_6memory__bin_index_from_size(__pyx_v_size, 0);

  /* "cupy/cuda/memory.pyx":658
 *     cdef _Chunk chunk
 *     cdef size_t bin_index = _bin_index_from_size(size)
 *     cdef list arena = pool._arena(stream_ptr)             # <<<<<<<<<<<<<<
 *     a_index = pool._arena_index(stream_ptr)
 *     a_flag = pool._arena_flag(stream_ptr)
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena(__pyx_v_pool, __pyx_v_stream_ptr, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_arena = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":659
 *     cdef size_t bin_index = _bin_index_from_size(size)
 *     cdef list arena = pool._arena(stream_ptr)
 *     a_index = pool._arena_index(stream_ptr)             # <<<<<<<<<<<<<<
 *     a_flag = pool._arena_flag(stream_ptr)
 *     index = <size_t>(
 */
  __pyx_v_a_index = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_index(__pyx_v_pool, __pyx_v_stream_ptr);

  /* "cupy/cuda/memory.pyx":660
 *     cdef list arena = pool._arena(stream_ptr)
 *     a_index = pool._arena_index(stream_ptr)
 *     a_flag = pool._arena_flag(stream_ptr)             # <<<<<<<<<<<<<<
 *     index = <size_t>(
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 */
  __pyx_v_a_flag = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_flag(__pyx_v_pool, __pyx_v_stream_ptr);

  /* "cupy/cuda/memory.pyx":661
 *     a_index = pool._arena_index(stream_ptr)
 *     a_flag = pool._arena_flag(stream_ptr)
 *     index = <size_t>(             # <<<<<<<<<<<<<<
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 */
  __pyx_v_index = ((size_t)(std::lower_bound<std::vector<size_t> ::iterator,size_t>(__pyx_v_a_index->begin(), __pyx_v_a_index->end(), __pyx_v_bin_index) - __pyx_v_a_index->begin()));

  /* "cupy/cuda/memory.pyx":664
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 *     length = a_index.size()             # <<<<<<<<<<<<<<
 *     for i in range(index, length):
 *         if a_flag.at(i) == 0:
 */
  __pyx_v_length = __pyx_v_a_index->size();

  /* "cupy/cuda/memory.pyx":665
 *         - a_index.begin())
 *     length = a_index.size()
 *     for i in range(index, length):             # <<<<<<<<<<<<<<
 *         if a_flag.at(i) == 0:
 *             continue
 */
  __pyx_t_2 = __pyx_v_length;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = __pyx_v_index; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "cupy/cuda/memory.pyx":666
 *     length = a_index.size()
 *     for i in range(index, length):
 *         if a_flag.at(i) == 0:             # <<<<<<<<<<<<<<
 *             continue
 *         free_list = arena[i]
 */
    try {
      __pyx_t_5 = __pyx_v_a_flag->at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 666, __pyx_L1_error)
    }
    __pyx_t_6 = ((__pyx_t_5 == 0) != 0);
    if (__pyx_t_6) {

      /* "cupy/cuda/memory.pyx":667
 *     for i in range(index, length):
 *         if a_flag.at(i) == 0:
 *             continue             # <<<<<<<<<<<<<<
 *         free_list = arena[i]
 *         chunk = free_list.pop()
 */
      goto __pyx_L3_continue;

      /* "cupy/cuda/memory.pyx":666
 *     length = a_index.size()
 *     for i in range(index, length):
 *         if a_flag.at(i) == 0:             # <<<<<<<<<<<<<<
 *             continue
 *         free_list = arena[i]
 */
    }

    /* "cupy/cuda/memory.pyx":668
 *         if a_flag.at(i) == 0:
 *             continue
 *         free_list = arena[i]             # <<<<<<<<<<<<<<
 *         chunk = free_list.pop()
 *         if len(free_list) == 0:
 */
    if (unlikely(__pyx_v_arena == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 668, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_arena, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PySet_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 668, __pyx_L1_error)
    __pyx_v_free_list = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cupy/cuda/memory.pyx":669
 *             continue
 *         free_list = arena[i]
 *         chunk = free_list.pop()             # <<<<<<<<<<<<<<
 *         if len(free_list) == 0:
 *             dereference(a_flag)[i] = 0
 */
    if (unlikely(__pyx_v_free_list == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
      __PYX_ERR(0, 669, __pyx_L1_error)
    }
    __pyx_t_1 = PySet_Pop(__pyx_v_free_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(0, 669, __pyx_L1_error)
    __pyx_v_chunk = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cupy/cuda/memory.pyx":670
 *         free_list = arena[i]
 *         chunk = free_list.pop()
 *         if len(free_list) == 0:             # <<<<<<<<<<<<<<
 *             dereference(a_flag)[i] = 0
 *             arena[i] = None
 */
    if (unlikely(__pyx_v_free_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 670, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_GET_SIZE(__pyx_v_free_list); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 670, __pyx_L1_error)
    __pyx_t_6 = ((__pyx_t_7 == 0) != 0);
    if (__pyx_t_6) {

      /* "cupy/cuda/memory.pyx":671
 *         chunk = free_list.pop()
 *         if len(free_list) == 0:
 *             dereference(a_flag)[i] = 0             # <<<<<<<<<<<<<<
 *             arena[i] = None
 *         if i - index >= _index_compaction_threshold:
 */
      ((*__pyx_v_a_flag)[__pyx_v_i]) = 0;

      /* "cupy/cuda/memory.pyx":672
 *         if len(free_list) == 0:
 *             dereference(a_flag)[i] = 0
 *             arena[i] = None             # <<<<<<<<<<<<<<
 *         if i - index >= _index_compaction_threshold:
 *             _compact_index(pool, stream_ptr, False)
 */
      if (unlikely(__pyx_v_arena == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 672, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_arena, __pyx_v_i, Py_None, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1) < 0)) __PYX_ERR(0, 672, __pyx_L1_error)

      /* "cupy/cuda/memory.pyx":670
 *         free_list = arena[i]
 *         chunk = free_list.pop()
 *         if len(free_list) == 0:             # <<<<<<<<<<<<<<
 *             dereference(a_flag)[i] = 0
 *             arena[i] = None
 */
    }

    /* "cupy/cuda/memory.pyx":673
 *             dereference(a_flag)[i] = 0
 *             arena[i] = None
 *         if i - index >= _index_compaction_threshold:             # <<<<<<<<<<<<<<
 *             _compact_index(pool, stream_ptr, False)
 *         remaining = chunk.split(size)
 */
    __pyx_t_6 = (((__pyx_v_i - __pyx_v_index) >= __pyx_v_4cupy_4cuda_6memory__index_compaction_threshold) != 0);
    if (__pyx_t_6) {

      /* "cupy/cuda/memory.pyx":674
 *             arena[i] = None
 *         if i - index >= _index_compaction_threshold:
 *             _compact_index(pool, stream_ptr, False)             # <<<<<<<<<<<<<<
 *         remaining = chunk.split(size)
 *         if remaining is not None:
 */
      __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory__compact_index(__pyx_v_pool, __pyx_v_stream_ptr, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cupy/cuda/memory.pyx":673
 *             dereference(a_flag)[i] = 0
 *             arena[i] = None
 *         if i - index >= _index_compaction_threshold:             # <<<<<<<<<<<<<<
 *             _compact_index(pool, stream_ptr, False)
 *         remaining = chunk.split(size)
 */
    }

    /* "cupy/cuda/memory.pyx":675
 *         if i - index >= _index_compaction_threshold:
 *             _compact_index(pool, stream_ptr, False)
 *         remaining = chunk.split(size)             # <<<<<<<<<<<<<<
 *         if remaining is not None:
 *             _append_to_free_list(arena, a_index, a_flag, remaining)
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_6_Chunk_split(__pyx_v_chunk, __pyx_v_size, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_remaining = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cupy/cuda/memory.pyx":676
 *             _compact_index(pool, stream_ptr, False)
 *         remaining = chunk.split(size)
 *         if remaining is not None:             # <<<<<<<<<<<<<<
 *             _append_to_free_list(arena, a_index, a_flag, remaining)
 *         assert chunk.stream_ptr == stream_ptr
 */
    __pyx_t_6 = (((PyObject *)__pyx_v_remaining) != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (__pyx_t_8) {

      /* "cupy/cuda/memory.pyx":677
 *         remaining = chunk.split(size)
 *         if remaining is not None:
 *             _append_to_free_list(arena, a_index, a_flag, remaining)             # <<<<<<<<<<<<<<
 *         assert chunk.stream_ptr == stream_ptr
 *         return chunk
 */
      __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory__append_to_free_list(__pyx_v_arena, __pyx_v_a_index, __pyx_v_a_flag, __pyx_v_remaining); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cupy/cuda/memory.pyx":676
 *             _compact_index(pool, stream_ptr, False)
 *         remaining = chunk.split(size)
 *         if remaining is not None:             # <<<<<<<<<<<<<<
 *             _append_to_free_list(arena, a_index, a_flag, remaining)
 *         assert chunk.stream_ptr == stream_ptr
 */
    }

    /* "cupy/cuda/memory.pyx":678
 *         if remaining is not None:
 *             _append_to_free_list(arena, a_index, a_flag, remaining)
 *         assert chunk.stream_ptr == stream_ptr             # <<<<<<<<<<<<<<
 *         return chunk
 *     return None
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_chunk->stream_ptr == __pyx_v_stream_ptr) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 678, __pyx_L1_error)
      }
    }
    #endif

    /* "cupy/cuda/memory.pyx":679
 *             _append_to_free_list(arena, a_index, a_flag, remaining)
 *         assert chunk.stream_ptr == stream_ptr
 *         return chunk             # <<<<<<<<<<<<<<
 *     return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_chunk));
    __pyx_r = ((PyObject *)__pyx_v_chunk);
    goto __pyx_L0;
    __pyx_L3_continue:;
  }

  /* "cupy/cuda/memory.pyx":680
 *         assert chunk.stream_ptr == stream_ptr
 *         return chunk
 *     return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":651
 * 
 * 
 * cdef object _get_chunk(SingleDeviceMemoryPool pool, size_t size,             # <<<<<<<<<<<<<<
 *                        size_t stream_ptr):
 *     # need self._free_lock
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._get_chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_free_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_chunk);
  __Pyx_XDECREF(__pyx_v_arena);
  __Pyx_XDECREF((PyObject *)__pyx_v_remaining);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":683
 * 
 * 
 * cdef BaseMemory _try_malloc(SingleDeviceMemoryPool pool, size_t size):             # <<<<<<<<<<<<<<
 *     try:
 *         return pool._alloc(size).mem
 */

static struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_f_4cupy_4cuda_6memory__try_malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_pool, size_t __pyx_v_size) {
  PyObject *__pyx_v_e = NULL;
  size_t __pyx_v_total;
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_t_24;
  char const *__pyx_t_25;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  char const *__pyx_t_32;
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_t_33 = NULL;
  char const *__pyx_t_34;
  __Pyx_RefNannySetupContext("_try_malloc", 0);

  /* "cupy/cuda/memory.pyx":684
 * 
 * cdef BaseMemory _try_malloc(SingleDeviceMemoryPool pool, size_t size):
 *     try:             # <<<<<<<<<<<<<<
 *         return pool._alloc(size).mem
 *     except runtime.CUDARuntimeError as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "cupy/cuda/memory.pyx":685
 * cdef BaseMemory _try_malloc(SingleDeviceMemoryPool pool, size_t size):
 *     try:
 *         return pool._alloc(size).mem             # <<<<<<<<<<<<<<
 *     except runtime.CUDARuntimeError as e:
 *         if e.status != runtime.errorMemoryAllocation:
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_4 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc(__pyx_v_pool, __pyx_v_size, 0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 685, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_4)->mem));
      __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_4)->mem;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L7_try_return;

      /* "cupy/cuda/memory.pyx":684
 * 
 * cdef BaseMemory _try_malloc(SingleDeviceMemoryPool pool, size_t size):
 *     try:             # <<<<<<<<<<<<<<
 *         return pool._alloc(size).mem
 *     except runtime.CUDARuntimeError as e:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cupy/cuda/memory.pyx":686
 *     try:
 *         return pool._alloc(size).mem
 *     except runtime.CUDARuntimeError as e:             # <<<<<<<<<<<<<<
 *         if e.status != runtime.errorMemoryAllocation:
 *             raise
 */
    __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_runtime); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 686, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_CUDARuntimeError); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 686, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_ErrRestore(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;
    if (__pyx_t_9) {
      __Pyx_AddTraceback("cupy.cuda.memory._try_malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 686, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_e = __pyx_t_5;
      /*try:*/ {

        /* "cupy/cuda/memory.pyx":687
 *         return pool._alloc(size).mem
 *     except runtime.CUDARuntimeError as e:
 *         if e.status != runtime.errorMemoryAllocation:             # <<<<<<<<<<<<<<
 *             raise
 *         pool.free_all_blocks()
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_status); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 687, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_7runtime_errorMemoryAllocation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 687, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 687, __pyx_L14_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 687, __pyx_L14_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(__pyx_t_11)) {

          /* "cupy/cuda/memory.pyx":688
 *     except runtime.CUDARuntimeError as e:
 *         if e.status != runtime.errorMemoryAllocation:
 *             raise             # <<<<<<<<<<<<<<
 *         pool.free_all_blocks()
 *         try:
 */
          __Pyx_GIVEREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5);
          __Pyx_XGIVEREF(__pyx_t_4);
          __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_5, __pyx_t_4);
          __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; 
          __PYX_ERR(0, 688, __pyx_L14_error)

          /* "cupy/cuda/memory.pyx":687
 *         return pool._alloc(size).mem
 *     except runtime.CUDARuntimeError as e:
 *         if e.status != runtime.errorMemoryAllocation:             # <<<<<<<<<<<<<<
 *             raise
 *         pool.free_all_blocks()
 */
        }

        /* "cupy/cuda/memory.pyx":689
 *         if e.status != runtime.errorMemoryAllocation:
 *             raise
 *         pool.free_all_blocks()             # <<<<<<<<<<<<<<
 *         try:
 *             return pool._alloc(size).mem
 */
        __pyx_t_10 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks(__pyx_v_pool, 0, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "cupy/cuda/memory.pyx":690
 *             raise
 *         pool.free_all_blocks()
 *         try:             # <<<<<<<<<<<<<<
 *             return pool._alloc(size).mem
 *         except runtime.CUDARuntimeError as e:
 */
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          /*try:*/ {

            /* "cupy/cuda/memory.pyx":691
 *         pool.free_all_blocks()
 *         try:
 *             return pool._alloc(size).mem             # <<<<<<<<<<<<<<
 *         except runtime.CUDARuntimeError as e:
 *             if e.status != runtime.errorMemoryAllocation:
 */
            __Pyx_XDECREF(((PyObject *)__pyx_r));
            __pyx_t_10 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc(__pyx_v_pool, __pyx_v_size, 0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 691, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_10)->mem));
            __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_10)->mem;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            goto __pyx_L21_try_return;

            /* "cupy/cuda/memory.pyx":690
 *             raise
 *         pool.free_all_blocks()
 *         try:             # <<<<<<<<<<<<<<
 *             return pool._alloc(size).mem
 *         except runtime.CUDARuntimeError as e:
 */
          }
          __pyx_L17_error:;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "cupy/cuda/memory.pyx":692
 *         try:
 *             return pool._alloc(size).mem
 *         except runtime.CUDARuntimeError as e:             # <<<<<<<<<<<<<<
 *             if e.status != runtime.errorMemoryAllocation:
 *                 raise
 */
          __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_7, &__pyx_t_8);
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_runtime); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 692, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_CUDARuntimeError); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 692, __pyx_L19_except_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_9 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_10, __pyx_t_16);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_ErrRestore(__pyx_t_10, __pyx_t_7, __pyx_t_8);
          __pyx_t_10 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0;
          if (__pyx_t_9) {
            __Pyx_AddTraceback("cupy.cuda.memory._try_malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_10) < 0) __PYX_ERR(0, 692, __pyx_L19_except_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_DECREF_SET(__pyx_v_e, __pyx_t_7);
            /*try:*/ {

              /* "cupy/cuda/memory.pyx":693
 *             return pool._alloc(size).mem
 *         except runtime.CUDARuntimeError as e:
 *             if e.status != runtime.errorMemoryAllocation:             # <<<<<<<<<<<<<<
 *                 raise
 *             gc.collect()
 */
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_status); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 693, __pyx_L30_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_7runtime_errorMemoryAllocation); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 693, __pyx_L30_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_17 = PyObject_RichCompare(__pyx_t_16, __pyx_t_15, Py_NE); __Pyx_XGOTREF(__pyx_t_17); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 693, __pyx_L30_error)
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 693, __pyx_L30_error)
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(__pyx_t_11)) {

                /* "cupy/cuda/memory.pyx":694
 *         except runtime.CUDARuntimeError as e:
 *             if e.status != runtime.errorMemoryAllocation:
 *                 raise             # <<<<<<<<<<<<<<
 *             gc.collect()
 *             pool.free_all_blocks()
 */
                __Pyx_GIVEREF(__pyx_t_8);
                __Pyx_GIVEREF(__pyx_t_7);
                __Pyx_XGIVEREF(__pyx_t_10);
                __Pyx_ErrRestoreWithState(__pyx_t_8, __pyx_t_7, __pyx_t_10);
                __pyx_t_8 = 0; __pyx_t_7 = 0; __pyx_t_10 = 0; 
                __PYX_ERR(0, 694, __pyx_L30_error)

                /* "cupy/cuda/memory.pyx":693
 *             return pool._alloc(size).mem
 *         except runtime.CUDARuntimeError as e:
 *             if e.status != runtime.errorMemoryAllocation:             # <<<<<<<<<<<<<<
 *                 raise
 *             gc.collect()
 */
              }

              /* "cupy/cuda/memory.pyx":695
 *             if e.status != runtime.errorMemoryAllocation:
 *                 raise
 *             gc.collect()             # <<<<<<<<<<<<<<
 *             pool.free_all_blocks()
 *             try:
 */
              __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_gc); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 695, __pyx_L30_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_collect); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 695, __pyx_L30_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_15 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_15)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_15);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                }
              }
              __pyx_t_17 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 695, __pyx_L30_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

              /* "cupy/cuda/memory.pyx":696
 *                 raise
 *             gc.collect()
 *             pool.free_all_blocks()             # <<<<<<<<<<<<<<
 *             try:
 *                 return pool._alloc(size).mem
 */
              __pyx_t_17 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks(__pyx_v_pool, 0, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 696, __pyx_L30_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

              /* "cupy/cuda/memory.pyx":697
 *             gc.collect()
 *             pool.free_all_blocks()
 *             try:             # <<<<<<<<<<<<<<
 *                 return pool._alloc(size).mem
 *             except runtime.CUDARuntimeError as e:
 */
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
                __Pyx_XGOTREF(__pyx_t_18);
                __Pyx_XGOTREF(__pyx_t_19);
                __Pyx_XGOTREF(__pyx_t_20);
                /*try:*/ {

                  /* "cupy/cuda/memory.pyx":698
 *             pool.free_all_blocks()
 *             try:
 *                 return pool._alloc(size).mem             # <<<<<<<<<<<<<<
 *             except runtime.CUDARuntimeError as e:
 *                 if e.status != runtime.errorMemoryAllocation:
 */
                  __Pyx_XDECREF(((PyObject *)__pyx_r));
                  __pyx_t_17 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc(__pyx_v_pool, __pyx_v_size, 0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 698, __pyx_L33_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_17)->mem));
                  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_17)->mem;
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  goto __pyx_L37_try_return;

                  /* "cupy/cuda/memory.pyx":697
 *             gc.collect()
 *             pool.free_all_blocks()
 *             try:             # <<<<<<<<<<<<<<
 *                 return pool._alloc(size).mem
 *             except runtime.CUDARuntimeError as e:
 */
                }
                __pyx_L33_error:;
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;

                /* "cupy/cuda/memory.pyx":699
 *             try:
 *                 return pool._alloc(size).mem
 *             except runtime.CUDARuntimeError as e:             # <<<<<<<<<<<<<<
 *                 if e.status != runtime.errorMemoryAllocation:
 *                     raise
 */
                __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
                __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_runtime); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 699, __pyx_L35_except_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_CUDARuntimeError); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 699, __pyx_L35_except_error)
                __Pyx_GOTREF(__pyx_t_22);
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __pyx_t_9 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_17, __pyx_t_22);
                __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                __Pyx_ErrRestore(__pyx_t_17, __pyx_t_16, __pyx_t_15);
                __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
                if (__pyx_t_9) {
                  __Pyx_AddTraceback("cupy.cuda.memory._try_malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0) __PYX_ERR(0, 699, __pyx_L35_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_GOTREF(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_DECREF_SET(__pyx_v_e, __pyx_t_16);
                  /*try:*/ {

                    /* "cupy/cuda/memory.pyx":700
 *                 return pool._alloc(size).mem
 *             except runtime.CUDARuntimeError as e:
 *                 if e.status != runtime.errorMemoryAllocation:             # <<<<<<<<<<<<<<
 *                     raise
 *     total = size + pool.total_bytes()
 */
                    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_status); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 700, __pyx_L46_error)
                    __Pyx_GOTREF(__pyx_t_22);
                    __pyx_t_21 = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_7runtime_errorMemoryAllocation); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 700, __pyx_L46_error)
                    __Pyx_GOTREF(__pyx_t_21);
                    __pyx_t_23 = PyObject_RichCompare(__pyx_t_22, __pyx_t_21, Py_NE); __Pyx_XGOTREF(__pyx_t_23); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 700, __pyx_L46_error)
                    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                    __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_23); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 700, __pyx_L46_error)
                    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                    if (unlikely(__pyx_t_11)) {

                      /* "cupy/cuda/memory.pyx":701
 *             except runtime.CUDARuntimeError as e:
 *                 if e.status != runtime.errorMemoryAllocation:
 *                     raise             # <<<<<<<<<<<<<<
 *     total = size + pool.total_bytes()
 *     raise OutOfMemoryError(size, total)
 */
                      __Pyx_GIVEREF(__pyx_t_15);
                      __Pyx_GIVEREF(__pyx_t_16);
                      __Pyx_XGIVEREF(__pyx_t_17);
                      __Pyx_ErrRestoreWithState(__pyx_t_15, __pyx_t_16, __pyx_t_17);
                      __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; 
                      __PYX_ERR(0, 701, __pyx_L46_error)

                      /* "cupy/cuda/memory.pyx":700
 *                 return pool._alloc(size).mem
 *             except runtime.CUDARuntimeError as e:
 *                 if e.status != runtime.errorMemoryAllocation:             # <<<<<<<<<<<<<<
 *                     raise
 *     total = size + pool.total_bytes()
 */
                    }
                  }

                  /* "cupy/cuda/memory.pyx":699
 *             try:
 *                 return pool._alloc(size).mem
 *             except runtime.CUDARuntimeError as e:             # <<<<<<<<<<<<<<
 *                 if e.status != runtime.errorMemoryAllocation:
 *                     raise
 */
                  /*finally:*/ {
                    /*normal exit:*/{
                      __Pyx_DECREF(__pyx_v_e);
                      __pyx_v_e = NULL;
                      goto __pyx_L47;
                    }
                    __pyx_L46_error:;
                    /*exception exit:*/{
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0;
                      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_29, &__pyx_t_30, &__pyx_t_31);
                      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_26, &__pyx_t_27, &__pyx_t_28) < 0)) __Pyx_ErrFetch(&__pyx_t_26, &__pyx_t_27, &__pyx_t_28);
                      __Pyx_XGOTREF(__pyx_t_26);
                      __Pyx_XGOTREF(__pyx_t_27);
                      __Pyx_XGOTREF(__pyx_t_28);
                      __Pyx_XGOTREF(__pyx_t_29);
                      __Pyx_XGOTREF(__pyx_t_30);
                      __Pyx_XGOTREF(__pyx_t_31);
                      __pyx_t_9 = __pyx_lineno; __pyx_t_24 = __pyx_clineno; __pyx_t_25 = __pyx_filename;
                      {
                        __Pyx_DECREF(__pyx_v_e);
                        __pyx_v_e = NULL;
                      }
                      if (PY_MAJOR_VERSION >= 3) {
                        __Pyx_XGIVEREF(__pyx_t_29);
                        __Pyx_XGIVEREF(__pyx_t_30);
                        __Pyx_XGIVEREF(__pyx_t_31);
                        __Pyx_ExceptionReset(__pyx_t_29, __pyx_t_30, __pyx_t_31);
                      }
                      __Pyx_XGIVEREF(__pyx_t_26);
                      __Pyx_XGIVEREF(__pyx_t_27);
                      __Pyx_XGIVEREF(__pyx_t_28);
                      __Pyx_ErrRestore(__pyx_t_26, __pyx_t_27, __pyx_t_28);
                      __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0;
                      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_24; __pyx_filename = __pyx_t_25;
                      goto __pyx_L35_except_error;
                    }
                    __pyx_L47:;
                  }
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                  goto __pyx_L34_exception_handled;
                }
                goto __pyx_L35_except_error;
                __pyx_L35_except_error:;

                /* "cupy/cuda/memory.pyx":697
 *             gc.collect()
 *             pool.free_all_blocks()
 *             try:             # <<<<<<<<<<<<<<
 *                 return pool._alloc(size).mem
 *             except runtime.CUDARuntimeError as e:
 */
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
                goto __pyx_L30_error;
                __pyx_L37_try_return:;
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
                goto __pyx_L29_return;
                __pyx_L34_exception_handled:;
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
              }
            }

            /* "cupy/cuda/memory.pyx":692
 *         try:
 *             return pool._alloc(size).mem
 *         except runtime.CUDARuntimeError as e:             # <<<<<<<<<<<<<<
 *             if e.status != runtime.errorMemoryAllocation:
 *                 raise
 */
            /*finally:*/ {
              /*normal exit:*/{
                __Pyx_XDECREF(__pyx_v_e);
                __pyx_v_e = NULL;
                goto __pyx_L31;
              }
              __pyx_L30_error:;
              /*exception exit:*/{
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_31 = 0; __pyx_t_30 = 0; __pyx_t_29 = 0;
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_31, &__pyx_t_30, &__pyx_t_29);
                if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
                __Pyx_XGOTREF(__pyx_t_20);
                __Pyx_XGOTREF(__pyx_t_19);
                __Pyx_XGOTREF(__pyx_t_18);
                __Pyx_XGOTREF(__pyx_t_31);
                __Pyx_XGOTREF(__pyx_t_30);
                __Pyx_XGOTREF(__pyx_t_29);
                __pyx_t_24 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_32 = __pyx_filename;
                {
                  __Pyx_XDECREF(__pyx_v_e);
                  __pyx_v_e = NULL;
                }
                if (PY_MAJOR_VERSION >= 3) {
                  __Pyx_XGIVEREF(__pyx_t_31);
                  __Pyx_XGIVEREF(__pyx_t_30);
                  __Pyx_XGIVEREF(__pyx_t_29);
                  __Pyx_ExceptionReset(__pyx_t_31, __pyx_t_30, __pyx_t_29);
                }
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_ErrRestore(__pyx_t_20, __pyx_t_19, __pyx_t_18);
                __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_31 = 0; __pyx_t_30 = 0; __pyx_t_29 = 0;
                __pyx_lineno = __pyx_t_24; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_32;
                goto __pyx_L19_except_error;
              }
              __pyx_L29_return: {
                __pyx_t_33 = __pyx_r;
                __pyx_r = 0;
                __Pyx_XDECREF(__pyx_v_e);
                __pyx_v_e = NULL;
                __pyx_r = __pyx_t_33;
                __pyx_t_33 = 0;
                goto __pyx_L20_except_return;
              }
              __pyx_L31:;
            }
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L18_exception_handled;
          }
          goto __pyx_L19_except_error;
          __pyx_L19_except_error:;

          /* "cupy/cuda/memory.pyx":690
 *             raise
 *         pool.free_all_blocks()
 *         try:             # <<<<<<<<<<<<<<
 *             return pool._alloc(size).mem
 *         except runtime.CUDARuntimeError as e:
 */
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L14_error;
          __pyx_L21_try_return:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L13_return;
          __pyx_L20_except_return:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          goto __pyx_L13_return;
          __pyx_L18_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        }
      }

      /* "cupy/cuda/memory.pyx":686
 *     try:
 *         return pool._alloc(size).mem
 *     except runtime.CUDARuntimeError as e:             # <<<<<<<<<<<<<<
 *         if e.status != runtime.errorMemoryAllocation:
 *             raise
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_XDECREF(__pyx_v_e);
          __pyx_v_e = NULL;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_29, &__pyx_t_30, &__pyx_t_31);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_29);
          __Pyx_XGOTREF(__pyx_t_30);
          __Pyx_XGOTREF(__pyx_t_31);
          __pyx_t_9 = __pyx_lineno; __pyx_t_24 = __pyx_clineno; __pyx_t_34 = __pyx_filename;
          {
            __Pyx_XDECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_29);
            __Pyx_XGIVEREF(__pyx_t_30);
            __Pyx_XGIVEREF(__pyx_t_31);
            __Pyx_ExceptionReset(__pyx_t_29, __pyx_t_30, __pyx_t_31);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0;
          __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_24; __pyx_filename = __pyx_t_34;
          goto __pyx_L5_except_error;
        }
        __pyx_L13_return: {
          __pyx_t_33 = __pyx_r;
          __pyx_r = 0;
          __Pyx_XDECREF(__pyx_v_e);
          __pyx_v_e = NULL;
          __pyx_r = __pyx_t_33;
          __pyx_t_33 = 0;
          goto __pyx_L6_except_return;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "cupy/cuda/memory.pyx":684
 * 
 * cdef BaseMemory _try_malloc(SingleDeviceMemoryPool pool, size_t size):
 *     try:             # <<<<<<<<<<<<<<
 *         return pool._alloc(size).mem
 *     except runtime.CUDARuntimeError as e:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  }

  /* "cupy/cuda/memory.pyx":702
 *                 if e.status != runtime.errorMemoryAllocation:
 *                     raise
 *     total = size + pool.total_bytes()             # <<<<<<<<<<<<<<
 *     raise OutOfMemoryError(size, total)
 * 
 */
  __pyx_v_total = (__pyx_v_size + __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_total_bytes(__pyx_v_pool, 0));

  /* "cupy/cuda/memory.pyx":703
 *                     raise
 *     total = size + pool.total_bytes()
 *     raise OutOfMemoryError(size, total)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_OutOfMemoryError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __Pyx_PyInt_FromSize_t(__pyx_v_total); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = NULL;
  __pyx_t_24 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_24 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_10};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_10};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_24, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_24, __pyx_t_10);
    __pyx_t_6 = 0;
    __pyx_t_10 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 703, __pyx_L1_error)

  /* "cupy/cuda/memory.pyx":683
 * 
 * 
 * cdef BaseMemory _try_malloc(SingleDeviceMemoryPool pool, size_t size):             # <<<<<<<<<<<<<<
 *     try:
 *         return pool._alloc(size).mem
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("cupy.cuda.memory._try_malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":706
 * 
 * 
 * cdef _append_to_free_list(list arena, vector.vector[size_t]* a_index,             # <<<<<<<<<<<<<<
 *                           vector.vector[int8_t]* a_flag, _Chunk chunk):
 *     # need self._free_lock
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory__append_to_free_list(PyObject *__pyx_v_arena, std::vector<size_t>  *__pyx_v_a_index, std::vector<int8_t>  *__pyx_v_a_flag, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk) {
  size_t __pyx_v_index;
  size_t __pyx_v_bin_index;
  PyObject *__pyx_v_free_list = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_FakeReference<size_t> __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_append_to_free_list", 0);

  /* "cupy/cuda/memory.pyx":711
 *     cdef size_t index, bin_index
 *     cdef set free_list
 *     bin_index = _bin_index_from_size(chunk.size)             # <<<<<<<<<<<<<<
 *     index = <size_t>(
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 */
  __pyx_v_bin_index = __pyx_f_4cupy_4cuda_6memory__bin_index_from_size(__pyx_v_chunk->size, 0);

  /* "cupy/cuda/memory.pyx":712
 *     cdef set free_list
 *     bin_index = _bin_index_from_size(chunk.size)
 *     index = <size_t>(             # <<<<<<<<<<<<<<
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 */
  __pyx_v_index = ((size_t)(std::lower_bound<std::vector<size_t> ::iterator,size_t>(__pyx_v_a_index->begin(), __pyx_v_a_index->end(), __pyx_v_bin_index) - __pyx_v_a_index->begin()));

  /* "cupy/cuda/memory.pyx":715
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 *     if index < a_index.size() and a_index.at(index) == bin_index:             # <<<<<<<<<<<<<<
 *         free_list = arena[index]
 *         if free_list is None:
 */
  __pyx_t_2 = ((__pyx_v_index < __pyx_v_a_index->size()) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  try {
    __pyx_t_3 = __pyx_v_a_index->at(__pyx_v_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 715, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_3 == __pyx_v_bin_index) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":716
 *         - a_index.begin())
 *     if index < a_index.size() and a_index.at(index) == bin_index:
 *         free_list = arena[index]             # <<<<<<<<<<<<<<
 *         if free_list is None:
 *             arena[index] = free_list = set()
 */
    if (unlikely(__pyx_v_arena == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 716, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_arena, __pyx_v_index, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(PySet_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 716, __pyx_L1_error)
    __pyx_v_free_list = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "cupy/cuda/memory.pyx":717
 *     if index < a_index.size() and a_index.at(index) == bin_index:
 *         free_list = arena[index]
 *         if free_list is None:             # <<<<<<<<<<<<<<
 *             arena[index] = free_list = set()
 *     else:
 */
    __pyx_t_1 = (__pyx_v_free_list == ((PyObject*)Py_None));
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "cupy/cuda/memory.pyx":718
 *         free_list = arena[index]
 *         if free_list is None:
 *             arena[index] = free_list = set()             # <<<<<<<<<<<<<<
 *     else:
 *         free_list = set()
 */
      __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 718, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__pyx_v_arena == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 718, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_arena, __pyx_v_index, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1) < 0)) __PYX_ERR(0, 718, __pyx_L1_error)
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_free_list, __pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "cupy/cuda/memory.pyx":717
 *     if index < a_index.size() and a_index.at(index) == bin_index:
 *         free_list = arena[index]
 *         if free_list is None:             # <<<<<<<<<<<<<<
 *             arena[index] = free_list = set()
 *     else:
 */
    }

    /* "cupy/cuda/memory.pyx":715
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 *     if index < a_index.size() and a_index.at(index) == bin_index:             # <<<<<<<<<<<<<<
 *         free_list = arena[index]
 *         if free_list is None:
 */
    goto __pyx_L3;
  }

  /* "cupy/cuda/memory.pyx":720
 *             arena[index] = free_list = set()
 *     else:
 *         free_list = set()             # <<<<<<<<<<<<<<
 *         a_index.insert(a_index.begin() + index, bin_index)
 *         a_flag.insert(a_flag.begin() + index, 0)
 */
  /*else*/ {
    __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_free_list = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "cupy/cuda/memory.pyx":721
 *     else:
 *         free_list = set()
 *         a_index.insert(a_index.begin() + index, bin_index)             # <<<<<<<<<<<<<<
 *         a_flag.insert(a_flag.begin() + index, 0)
 *         arena.insert(index, free_list)
 */
    try {
      __pyx_v_a_index->insert((__pyx_v_a_index->begin() + __pyx_v_index), __pyx_v_bin_index);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 721, __pyx_L1_error)
    }

    /* "cupy/cuda/memory.pyx":722
 *         free_list = set()
 *         a_index.insert(a_index.begin() + index, bin_index)
 *         a_flag.insert(a_flag.begin() + index, 0)             # <<<<<<<<<<<<<<
 *         arena.insert(index, free_list)
 *     free_list.add(chunk)
 */
    try {
      __pyx_v_a_flag->insert((__pyx_v_a_flag->begin() + __pyx_v_index), 0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 722, __pyx_L1_error)
    }

    /* "cupy/cuda/memory.pyx":723
 *         a_index.insert(a_index.begin() + index, bin_index)
 *         a_flag.insert(a_flag.begin() + index, 0)
 *         arena.insert(index, free_list)             # <<<<<<<<<<<<<<
 *     free_list.add(chunk)
 *     dereference(a_flag)[index] = 1
 */
    if (unlikely(__pyx_v_arena == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "insert");
      __PYX_ERR(0, 723, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_Insert(__pyx_v_arena, __pyx_v_index, __pyx_v_free_list); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 723, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cupy/cuda/memory.pyx":724
 *         a_flag.insert(a_flag.begin() + index, 0)
 *         arena.insert(index, free_list)
 *     free_list.add(chunk)             # <<<<<<<<<<<<<<
 *     dereference(a_flag)[index] = 1
 * 
 */
  if (unlikely(__pyx_v_free_list == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
    __PYX_ERR(0, 724, __pyx_L1_error)
  }
  __pyx_t_5 = PySet_Add(__pyx_v_free_list, ((PyObject *)__pyx_v_chunk)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 724, __pyx_L1_error)

  /* "cupy/cuda/memory.pyx":725
 *         arena.insert(index, free_list)
 *     free_list.add(chunk)
 *     dereference(a_flag)[index] = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((*__pyx_v_a_flag)[__pyx_v_index]) = 1;

  /* "cupy/cuda/memory.pyx":706
 * 
 * 
 * cdef _append_to_free_list(list arena, vector.vector[size_t]* a_index,             # <<<<<<<<<<<<<<
 *                           vector.vector[int8_t]* a_flag, _Chunk chunk):
 *     # need self._free_lock
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory._append_to_free_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_free_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":728
 * 
 * 
 * cdef bint _remove_from_free_list(list arena, vector.vector[size_t]* a_index,             # <<<<<<<<<<<<<<
 *                                  vector.vector[int8_t]* a_flag,
 *                                  _Chunk chunk) except *:
 */

static int __pyx_f_4cupy_4cuda_6memory__remove_from_free_list(PyObject *__pyx_v_arena, std::vector<size_t>  *__pyx_v_a_index, std::vector<int8_t>  *__pyx_v_a_flag, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk) {
  size_t __pyx_v_index;
  size_t __pyx_v_bin_index;
  PyObject *__pyx_v_free_list = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_FakeReference<size_t> __pyx_t_2;
  int __pyx_t_3;
  __Pyx_FakeReference<int8_t> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("_remove_from_free_list", 0);

  /* "cupy/cuda/memory.pyx":742
 *     cdef set free_list
 * 
 *     bin_index = _bin_index_from_size(chunk.size)             # <<<<<<<<<<<<<<
 *     if a_index.size() == 0:
 *         return False
 */
  __pyx_v_bin_index = __pyx_f_4cupy_4cuda_6memory__bin_index_from_size(__pyx_v_chunk->size, 0);

  /* "cupy/cuda/memory.pyx":743
 * 
 *     bin_index = _bin_index_from_size(chunk.size)
 *     if a_index.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     index = <size_t>(
 */
  __pyx_t_1 = ((__pyx_v_a_index->size() == 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":744
 *     bin_index = _bin_index_from_size(chunk.size)
 *     if a_index.size() == 0:
 *         return False             # <<<<<<<<<<<<<<
 *     index = <size_t>(
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":743
 * 
 *     bin_index = _bin_index_from_size(chunk.size)
 *     if a_index.size() == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     index = <size_t>(
 */
  }

  /* "cupy/cuda/memory.pyx":745
 *     if a_index.size() == 0:
 *         return False
 *     index = <size_t>(             # <<<<<<<<<<<<<<
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 */
  __pyx_v_index = ((size_t)(std::lower_bound<std::vector<size_t> ::iterator,size_t>(__pyx_v_a_index->begin(), __pyx_v_a_index->end(), __pyx_v_bin_index) - __pyx_v_a_index->begin()));

  /* "cupy/cuda/memory.pyx":748
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 *     if index == a_index.size():             # <<<<<<<<<<<<<<
 *         # Bin does not exist for the given chunk size.
 *         return False
 */
  __pyx_t_1 = ((__pyx_v_index == __pyx_v_a_index->size()) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":750
 *     if index == a_index.size():
 *         # Bin does not exist for the given chunk size.
 *         return False             # <<<<<<<<<<<<<<
 *     if a_index.at(index) != bin_index or a_flag.at(index) == 0:
 *         return False
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":748
 *         algorithm.lower_bound(a_index.begin(), a_index.end(), bin_index)
 *         - a_index.begin())
 *     if index == a_index.size():             # <<<<<<<<<<<<<<
 *         # Bin does not exist for the given chunk size.
 *         return False
 */
  }

  /* "cupy/cuda/memory.pyx":751
 *         # Bin does not exist for the given chunk size.
 *         return False
 *     if a_index.at(index) != bin_index or a_flag.at(index) == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     free_list = arena[index]
 */
  try {
    __pyx_t_2 = __pyx_v_a_index->at(__pyx_v_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 751, __pyx_L1_error)
  }
  __pyx_t_3 = ((__pyx_t_2 != __pyx_v_bin_index) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  try {
    __pyx_t_4 = __pyx_v_a_flag->at(__pyx_v_index);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 751, __pyx_L1_error)
  }
  __pyx_t_3 = ((__pyx_t_4 == 0) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":752
 *         return False
 *     if a_index.at(index) != bin_index or a_flag.at(index) == 0:
 *         return False             # <<<<<<<<<<<<<<
 *     free_list = arena[index]
 *     if chunk in free_list:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":751
 *         # Bin does not exist for the given chunk size.
 *         return False
 *     if a_index.at(index) != bin_index or a_flag.at(index) == 0:             # <<<<<<<<<<<<<<
 *         return False
 *     free_list = arena[index]
 */
  }

  /* "cupy/cuda/memory.pyx":753
 *     if a_index.at(index) != bin_index or a_flag.at(index) == 0:
 *         return False
 *     free_list = arena[index]             # <<<<<<<<<<<<<<
 *     if chunk in free_list:
 *         free_list.remove(chunk)
 */
  if (unlikely(__pyx_v_arena == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 753, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_arena, __pyx_v_index, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(PySet_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_5)->tp_name), 0))) __PYX_ERR(0, 753, __pyx_L1_error)
  __pyx_v_free_list = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cupy/cuda/memory.pyx":754
 *         return False
 *     free_list = arena[index]
 *     if chunk in free_list:             # <<<<<<<<<<<<<<
 *         free_list.remove(chunk)
 *         if len(free_list) == 0:
 */
  if (unlikely(__pyx_v_free_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 754, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PySet_ContainsTF(((PyObject *)__pyx_v_chunk), __pyx_v_free_list, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 754, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "cupy/cuda/memory.pyx":755
 *     free_list = arena[index]
 *     if chunk in free_list:
 *         free_list.remove(chunk)             # <<<<<<<<<<<<<<
 *         if len(free_list) == 0:
 *             arena[index] = None
 */
    if (unlikely(__pyx_v_free_list == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "remove");
      __PYX_ERR(0, 755, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PySet_Remove(__pyx_v_free_list, ((PyObject *)__pyx_v_chunk)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 755, __pyx_L1_error)

    /* "cupy/cuda/memory.pyx":756
 *     if chunk in free_list:
 *         free_list.remove(chunk)
 *         if len(free_list) == 0:             # <<<<<<<<<<<<<<
 *             arena[index] = None
 *             dereference(a_flag)[index] = 0
 */
    if (unlikely(__pyx_v_free_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 756, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_GET_SIZE(__pyx_v_free_list); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 756, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_7 == 0) != 0);
    if (__pyx_t_3) {

      /* "cupy/cuda/memory.pyx":757
 *         free_list.remove(chunk)
 *         if len(free_list) == 0:
 *             arena[index] = None             # <<<<<<<<<<<<<<
 *             dereference(a_flag)[index] = 0
 *         return True
 */
      if (unlikely(__pyx_v_arena == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 757, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_arena, __pyx_v_index, Py_None, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1) < 0)) __PYX_ERR(0, 757, __pyx_L1_error)

      /* "cupy/cuda/memory.pyx":758
 *         if len(free_list) == 0:
 *             arena[index] = None
 *             dereference(a_flag)[index] = 0             # <<<<<<<<<<<<<<
 *         return True
 *     return False
 */
      ((*__pyx_v_a_flag)[__pyx_v_index]) = 0;

      /* "cupy/cuda/memory.pyx":756
 *     if chunk in free_list:
 *         free_list.remove(chunk)
 *         if len(free_list) == 0:             # <<<<<<<<<<<<<<
 *             arena[index] = None
 *             dereference(a_flag)[index] = 0
 */
    }

    /* "cupy/cuda/memory.pyx":759
 *             arena[index] = None
 *             dereference(a_flag)[index] = 0
 *         return True             # <<<<<<<<<<<<<<
 *     return False
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":754
 *         return False
 *     free_list = arena[index]
 *     if chunk in free_list:             # <<<<<<<<<<<<<<
 *         free_list.remove(chunk)
 *         if len(free_list) == 0:
 */
  }

  /* "cupy/cuda/memory.pyx":760
 *             dereference(a_flag)[index] = 0
 *         return True
 *     return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":728
 * 
 * 
 * cdef bint _remove_from_free_list(list arena, vector.vector[size_t]* a_index,             # <<<<<<<<<<<<<<
 *                                  vector.vector[int8_t]* a_flag,
 *                                  _Chunk chunk) except *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory._remove_from_free_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_free_list);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":770
 * 
 * 
 * cpdef size_t _round_size(size_t size):             # <<<<<<<<<<<<<<
 *     """Rounds up the memory size to fit memory alignment of cudaMalloc."""
 *     # avoid 0 div checking
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_13_round_size(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory__round_size(size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_round_size", 0);

  /* "cupy/cuda/memory.pyx":773
 *     """Rounds up the memory size to fit memory alignment of cudaMalloc."""
 *     # avoid 0 div checking
 *     size = (size + ALLOCATION_UNIT_SIZE - 1) // ALLOCATION_UNIT_SIZE             # <<<<<<<<<<<<<<
 *     return size * ALLOCATION_UNIT_SIZE
 * 
 */
  __pyx_v_size = (((__pyx_v_size + 0x200) - 1) / 0x200);

  /* "cupy/cuda/memory.pyx":774
 *     # avoid 0 div checking
 *     size = (size + ALLOCATION_UNIT_SIZE - 1) // ALLOCATION_UNIT_SIZE
 *     return size * ALLOCATION_UNIT_SIZE             # <<<<<<<<<<<<<<
 * 
 * cpdef size_t _bin_index_from_size(size_t size):
 */
  __pyx_r = (__pyx_v_size * 0x200);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":770
 * 
 * 
 * cpdef size_t _round_size(size_t size):             # <<<<<<<<<<<<<<
 *     """Rounds up the memory size to fit memory alignment of cudaMalloc."""
 *     # avoid 0 div checking
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13_round_size(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_12_round_size[] = "_round_size(size_t size) -> size_t\nRounds up the memory size to fit memory alignment of cudaMalloc.";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_13_round_size(PyObject *__pyx_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_round_size (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 770, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._round_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_12_round_size(__pyx_self, ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_12_round_size(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_round_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory__round_size(__pyx_v_size, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._round_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":776
 *     return size * ALLOCATION_UNIT_SIZE
 * 
 * cpdef size_t _bin_index_from_size(size_t size):             # <<<<<<<<<<<<<<
 *     """Returns appropriate bins index from the memory size."""
 *     # avoid 0 div checking
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_15_bin_index_from_size(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory__bin_index_from_size(size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bin_index_from_size", 0);

  /* "cupy/cuda/memory.pyx":779
 *     """Returns appropriate bins index from the memory size."""
 *     # avoid 0 div checking
 *     return (size - 1) // ALLOCATION_UNIT_SIZE             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((__pyx_v_size - 1) / 0x200);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":776
 *     return size * ALLOCATION_UNIT_SIZE
 * 
 * cpdef size_t _bin_index_from_size(size_t size):             # <<<<<<<<<<<<<<
 *     """Returns appropriate bins index from the memory size."""
 *     # avoid 0 div checking
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_15_bin_index_from_size(PyObject *__pyx_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_14_bin_index_from_size[] = "_bin_index_from_size(size_t size) -> size_t\nReturns appropriate bins index from the memory size.";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_15_bin_index_from_size(PyObject *__pyx_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bin_index_from_size (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 776, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._bin_index_from_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_14_bin_index_from_size(__pyx_self, ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_14_bin_index_from_size(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_bin_index_from_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory__bin_index_from_size(__pyx_v_size, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._bin_index_from_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":818
 *         map.map[size_t, vector.vector[int8_t]] _flag
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._in_use = {}
 *         self._free = {}
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocator = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocator,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k_;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocator);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 818, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocator = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 818, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool___init__(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), __pyx_v_allocator);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool___init__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, PyObject *__pyx_v_allocator) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":819
 * 
 *     def __init__(self, allocator=_malloc):
 *         self._in_use = {}             # <<<<<<<<<<<<<<
 *         self._free = {}
 *         self._allocator = allocator
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_use);
  __Pyx_DECREF(__pyx_v_self->_in_use);
  __pyx_v_self->_in_use = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":820
 *     def __init__(self, allocator=_malloc):
 *         self._in_use = {}
 *         self._free = {}             # <<<<<<<<<<<<<<
 *         self._allocator = allocator
 *         self._weakref = weakref.ref(self)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_free);
  __Pyx_DECREF(__pyx_v_self->_free);
  __pyx_v_self->_free = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":821
 *         self._in_use = {}
 *         self._free = {}
 *         self._allocator = allocator             # <<<<<<<<<<<<<<
 *         self._weakref = weakref.ref(self)
 *         self._device_id = device.get_device_id()
 */
  __Pyx_INCREF(__pyx_v_allocator);
  __Pyx_GIVEREF(__pyx_v_allocator);
  __Pyx_GOTREF(__pyx_v_self->_allocator);
  __Pyx_DECREF(__pyx_v_self->_allocator);
  __pyx_v_self->_allocator = __pyx_v_allocator;

  /* "cupy/cuda/memory.pyx":822
 *         self._free = {}
 *         self._allocator = allocator
 *         self._weakref = weakref.ref(self)             # <<<<<<<<<<<<<<
 *         self._device_id = device.get_device_id()
 *         self._free_lock = rlock.create_fastrlock()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_weakref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ref); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_weakref);
  __Pyx_DECREF(__pyx_v_self->_weakref);
  __pyx_v_self->_weakref = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":823
 *         self._allocator = allocator
 *         self._weakref = weakref.ref(self)
 *         self._device_id = device.get_device_id()             # <<<<<<<<<<<<<<
 *         self._free_lock = rlock.create_fastrlock()
 *         self._in_use_lock = rlock.create_fastrlock()
 */
  __pyx_t_4 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_4 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 823, __pyx_L1_error)
  __pyx_v_self->_device_id = __pyx_t_4;

  /* "cupy/cuda/memory.pyx":824
 *         self._weakref = weakref.ref(self)
 *         self._device_id = device.get_device_id()
 *         self._free_lock = rlock.create_fastrlock()             # <<<<<<<<<<<<<<
 *         self._in_use_lock = rlock.create_fastrlock()
 * 
 */
  __pyx_t_1 = __pyx_f_9fastrlock_5rlock_create_fastrlock(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_free_lock);
  __Pyx_DECREF(__pyx_v_self->_free_lock);
  __pyx_v_self->_free_lock = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":825
 *         self._device_id = device.get_device_id()
 *         self._free_lock = rlock.create_fastrlock()
 *         self._in_use_lock = rlock.create_fastrlock()             # <<<<<<<<<<<<<<
 * 
 *     cpdef list _arena(self, size_t stream_ptr):
 */
  __pyx_t_1 = __pyx_f_9fastrlock_5rlock_create_fastrlock(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_use_lock);
  __Pyx_DECREF(__pyx_v_self->_in_use_lock);
  __pyx_v_self->_in_use_lock = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":818
 *         map.map[size_t, vector.vector[int8_t]] _flag
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._in_use = {}
 *         self._free = {}
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":827
 *         self._in_use_lock = rlock.create_fastrlock()
 * 
 *     cpdef list _arena(self, size_t stream_ptr):             # <<<<<<<<<<<<<<
 *         """Returns appropriate arena (list of bins) of a given stream.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_3_arena(PyObject *__pyx_v_self, PyObject *__pyx_arg_stream_ptr); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_arena", 0);

  /* "cupy/cuda/memory.pyx":834
 *         Caller is responsible to acquire `_free_lock`.
 *         """
 *         ret = self._free.get(stream_ptr, None)             # <<<<<<<<<<<<<<
 *         if ret is None:
 *             self._free[stream_ptr] = ret = []
 */
  if (unlikely(__pyx_v_self->_free == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(0, 834, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_stream_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_free, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ret = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":835
 *         """
 *         ret = self._free.get(stream_ptr, None)
 *         if ret is None:             # <<<<<<<<<<<<<<
 *             self._free[stream_ptr] = ret = []
 *         return ret
 */
  __pyx_t_3 = (__pyx_v_ret == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "cupy/cuda/memory.pyx":836
 *         ret = self._free.get(stream_ptr, None)
 *         if ret is None:
 *             self._free[stream_ptr] = ret = []             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_self->_free == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 836, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_stream_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_self->_free, __pyx_t_1, __pyx_t_2) < 0)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":835
 *         """
 *         ret = self._free.get(stream_ptr, None)
 *         if ret is None:             # <<<<<<<<<<<<<<
 *             self._free[stream_ptr] = ret = []
 *         return ret
 */
  }

  /* "cupy/cuda/memory.pyx":837
 *         if ret is None:
 *             self._free[stream_ptr] = ret = []
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cdef inline vector.vector[size_t]* _arena_index(self, size_t stream_ptr):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_ret))||((__pyx_v_ret) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_ret)->tp_name), 0))) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = ((PyObject*)__pyx_v_ret);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":827
 *         self._in_use_lock = rlock.create_fastrlock()
 * 
 *     cpdef list _arena(self, size_t stream_ptr):             # <<<<<<<<<<<<<<
 *         """Returns appropriate arena (list of bins) of a given stream.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._arena", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_3_arena(PyObject *__pyx_v_self, PyObject *__pyx_arg_stream_ptr); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_2_arena[] = "SingleDeviceMemoryPool._arena(self, size_t stream_ptr) -> list\nReturns appropriate arena (list of bins) of a given stream.\n\n        All free chunks in the stream belong to one of the bin in the arena.\n\n        Caller is responsible to acquire `_free_lock`.\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_3_arena(PyObject *__pyx_v_self, PyObject *__pyx_arg_stream_ptr) {
  size_t __pyx_v_stream_ptr;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_arena (wrapper)", 0);
  assert(__pyx_arg_stream_ptr); {
    __pyx_v_stream_ptr = __Pyx_PyInt_As_size_t(__pyx_arg_stream_ptr); if (unlikely((__pyx_v_stream_ptr == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._arena", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_2_arena(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), ((size_t)__pyx_v_stream_ptr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_2_arena(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_arena", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena(__pyx_v_self, __pyx_v_stream_ptr, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._arena", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":839
 *         return ret
 * 
 *     cdef inline vector.vector[size_t]* _arena_index(self, size_t stream_ptr):             # <<<<<<<<<<<<<<
 *         """Returns appropriate arena sparse index of a given stream.
 * 
 */

static CYTHON_INLINE std::vector<size_t>  *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_index(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr) {
  std::vector<size_t>  *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_arena_index", 0);

  /* "cupy/cuda/memory.pyx":850
 *         Caller is responsible to acquire `_free_lock`.
 *         """
 *         return &self._index[stream_ptr]             # <<<<<<<<<<<<<<
 * 
 *     cdef vector.vector[int8_t]* _arena_flag(self, size_t stream_ptr):
 */
  __pyx_r = (&(__pyx_v_self->_index[__pyx_v_stream_ptr]));
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":839
 *         return ret
 * 
 *     cdef inline vector.vector[size_t]* _arena_index(self, size_t stream_ptr):             # <<<<<<<<<<<<<<
 *         """Returns appropriate arena sparse index of a given stream.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":852
 *         return &self._index[stream_ptr]
 * 
 *     cdef vector.vector[int8_t]* _arena_flag(self, size_t stream_ptr):             # <<<<<<<<<<<<<<
 *         """Returns appropriate arena used flag list of a given stream.
 * 
 */

static std::vector<int8_t>  *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_flag(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_stream_ptr) {
  std::vector<int8_t>  *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_arena_flag", 0);

  /* "cupy/cuda/memory.pyx":857
 *         Caller is responsible to acquire `_free_lock`.
 *         """
 *         return &self._flag[stream_ptr]             # <<<<<<<<<<<<<<
 * 
 *     cpdef MemoryPointer _alloc(self, Py_ssize_t rounded_size):
 */
  __pyx_r = (&(__pyx_v_self->_flag[__pyx_v_stream_ptr]));
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":852
 *         return &self._index[stream_ptr]
 * 
 *     cdef vector.vector[int8_t]* _arena_flag(self, size_t stream_ptr):             # <<<<<<<<<<<<<<
 *         """Returns appropriate arena used flag list of a given stream.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":859
 *         return &self._flag[stream_ptr]
 * 
 *     cpdef MemoryPointer _alloc(self, Py_ssize_t rounded_size):             # <<<<<<<<<<<<<<
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_5_alloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_rounded_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, Py_ssize_t __pyx_v_rounded_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_hooks = NULL;
  PyObject *__pyx_v_memptr = NULL;
  int __pyx_v_device_id;
  PyObject *__pyx_v_hooks_values = NULL;
  PyObject *__pyx_v_hook = NULL;
  PyObject *__pyx_v_mem_ptr = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  char const *__pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("_alloc", 0);

  /* "cupy/cuda/memory.pyx":860
 * 
 *     cpdef MemoryPointer _alloc(self, Py_ssize_t rounded_size):
 *         if memory_hook._has_memory_hooks():             # <<<<<<<<<<<<<<
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 */
  __pyx_t_1 = (__pyx_f_4cupy_4cuda_11memory_hook__has_memory_hooks(0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":861
 *     cpdef MemoryPointer _alloc(self, Py_ssize_t rounded_size):
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()             # <<<<<<<<<<<<<<
 *             if hooks:
 *                 memptr = None
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_11memory_hook_get_memory_hooks(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_hooks = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":862
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:             # <<<<<<<<<<<<<<
 *                 memptr = None
 *                 device_id = self._device_id
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_hooks); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 862, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "cupy/cuda/memory.pyx":863
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 *                 memptr = None             # <<<<<<<<<<<<<<
 *                 device_id = self._device_id
 *                 # avoid six for performance
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_memptr = Py_None;

      /* "cupy/cuda/memory.pyx":864
 *             if hooks:
 *                 memptr = None
 *                 device_id = self._device_id             # <<<<<<<<<<<<<<
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 */
      __pyx_t_3 = __pyx_v_self->_device_id;
      __pyx_v_device_id = __pyx_t_3;

      /* "cupy/cuda/memory.pyx":866
 *                 device_id = self._device_id
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()             # <<<<<<<<<<<<<<
 *                 for hook in hooks_values:
 *                     hook.alloc_preprocess(device_id=device_id,
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hooks, __pyx_n_s_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_hooks_values = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "cupy/cuda/memory.pyx":867
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                     hook.alloc_preprocess(device_id=device_id,
 *                                           mem_size=rounded_size)
 */
      if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
        __pyx_t_2 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 867, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 867, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 867, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 867, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 867, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_7(__pyx_t_2);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 867, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "cupy/cuda/memory.pyx":868
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:
 *                     hook.alloc_preprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                           mem_size=rounded_size)
 *                 try:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_alloc_preprocess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_device_id, __pyx_t_8) < 0) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cupy/cuda/memory.pyx":869
 *                 for hook in hooks_values:
 *                     hook.alloc_preprocess(device_id=device_id,
 *                                           mem_size=rounded_size)             # <<<<<<<<<<<<<<
 *                 try:
 *                     memptr = self._allocator(rounded_size)
 */
        __pyx_t_8 = PyInt_FromSsize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_size, __pyx_t_8) < 0) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cupy/cuda/memory.pyx":868
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:
 *                     hook.alloc_preprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                           mem_size=rounded_size)
 *                 try:
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cupy/cuda/memory.pyx":867
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                     hook.alloc_preprocess(device_id=device_id,
 *                                           mem_size=rounded_size)
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cupy/cuda/memory.pyx":870
 *                     hook.alloc_preprocess(device_id=device_id,
 *                                           mem_size=rounded_size)
 *                 try:             # <<<<<<<<<<<<<<
 *                     memptr = self._allocator(rounded_size)
 *                 finally:
 */
      /*try:*/ {

        /* "cupy/cuda/memory.pyx":871
 *                                           mem_size=rounded_size)
 *                 try:
 *                     memptr = self._allocator(rounded_size)             # <<<<<<<<<<<<<<
 *                 finally:
 *                     for hook in hooks_values:
 */
        __pyx_t_8 = PyInt_FromSsize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 871, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_self->_allocator);
        __pyx_t_5 = __pyx_v_self->_allocator; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 871, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF_SET(__pyx_v_memptr, __pyx_t_2);
        __pyx_t_2 = 0;
      }

      /* "cupy/cuda/memory.pyx":873
 *                     memptr = self._allocator(rounded_size)
 *                 finally:
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,
 */
      /*finally:*/ {
        /*normal exit:*/{
          if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
            __pyx_t_2 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
            __pyx_t_7 = NULL;
          } else {
            __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 873, __pyx_L1_error)
          }
          for (;;) {
            if (likely(!__pyx_t_7)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 873, __pyx_L1_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 873, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              } else {
                if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 873, __pyx_L1_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 873, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              }
            } else {
              __pyx_t_5 = __pyx_t_7(__pyx_t_2);
              if (unlikely(!__pyx_t_5)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 873, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_5);
            }
            __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_5);
            __pyx_t_5 = 0;

            /* "cupy/cuda/memory.pyx":874
 *                 finally:
 *                     for hook in hooks_values:
 *                         mem_ptr = memptr.ptr if memptr is not None else 0             # <<<<<<<<<<<<<<
 *                         hook.alloc_postprocess(device_id=device_id,
 *                                                mem_size=rounded_size,
 */
            __pyx_t_1 = (__pyx_v_memptr != Py_None);
            if ((__pyx_t_1 != 0)) {
              __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_memptr, __pyx_n_s_ptr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 874, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_5 = __pyx_t_8;
              __pyx_t_8 = 0;
            } else {
              __Pyx_INCREF(__pyx_int_0);
              __pyx_t_5 = __pyx_int_0;
            }
            __Pyx_XDECREF_SET(__pyx_v_mem_ptr, __pyx_t_5);
            __pyx_t_5 = 0;

            /* "cupy/cuda/memory.pyx":875
 *                     for hook in hooks_values:
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                mem_size=rounded_size,
 *                                                mem_ptr=mem_ptr)
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_alloc_postprocess); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_8 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 875, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_device_id, __pyx_t_4) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":876
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,
 *                                                mem_size=rounded_size,             # <<<<<<<<<<<<<<
 *                                                mem_ptr=mem_ptr)
 *                 return memptr
 */
            __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 876, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_mem_size, __pyx_t_4) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":877
 *                         hook.alloc_postprocess(device_id=device_id,
 *                                                mem_size=rounded_size,
 *                                                mem_ptr=mem_ptr)             # <<<<<<<<<<<<<<
 *                 return memptr
 *         return self._allocator(rounded_size)
 */
            if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_mem_ptr, __pyx_v_mem_ptr) < 0) __PYX_ERR(0, 875, __pyx_L1_error)

            /* "cupy/cuda/memory.pyx":875
 *                     for hook in hooks_values:
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                mem_size=rounded_size,
 *                                                mem_ptr=mem_ptr)
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":873
 *                     memptr = self._allocator(rounded_size)
 *                 finally:
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,
 */
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L9;
        }
        __pyx_L8_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13) < 0)) __Pyx_ErrFetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __pyx_t_3 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_10 = __pyx_filename;
          {
            if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
              __pyx_t_2 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
              __pyx_t_7 = NULL;
            } else {
              __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 873, __pyx_L13_error)
            }
            for (;;) {
              if (likely(!__pyx_t_7)) {
                if (likely(PyList_CheckExact(__pyx_t_2))) {
                  if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 873, __pyx_L13_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 873, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 873, __pyx_L13_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 873, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_7(__pyx_t_2);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 873, __pyx_L13_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "cupy/cuda/memory.pyx":874
 *                 finally:
 *                     for hook in hooks_values:
 *                         mem_ptr = memptr.ptr if memptr is not None else 0             # <<<<<<<<<<<<<<
 *                         hook.alloc_postprocess(device_id=device_id,
 *                                                mem_size=rounded_size,
 */
              __pyx_t_1 = (__pyx_v_memptr != Py_None);
              if ((__pyx_t_1 != 0)) {
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_memptr, __pyx_n_s_ptr); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 874, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_4 = __pyx_t_8;
                __pyx_t_8 = 0;
              } else {
                __Pyx_INCREF(__pyx_int_0);
                __pyx_t_4 = __pyx_int_0;
              }
              __Pyx_XDECREF_SET(__pyx_v_mem_ptr, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "cupy/cuda/memory.pyx":875
 *                     for hook in hooks_values:
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                mem_size=rounded_size,
 *                                                mem_ptr=mem_ptr)
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_alloc_postprocess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_8 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 875, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_device_id, __pyx_t_5) < 0) __PYX_ERR(0, 875, __pyx_L13_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "cupy/cuda/memory.pyx":876
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,
 *                                                mem_size=rounded_size,             # <<<<<<<<<<<<<<
 *                                                mem_ptr=mem_ptr)
 *                 return memptr
 */
              __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_mem_size, __pyx_t_5) < 0) __PYX_ERR(0, 875, __pyx_L13_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "cupy/cuda/memory.pyx":877
 *                         hook.alloc_postprocess(device_id=device_id,
 *                                                mem_size=rounded_size,
 *                                                mem_ptr=mem_ptr)             # <<<<<<<<<<<<<<
 *                 return memptr
 *         return self._allocator(rounded_size)
 */
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_mem_ptr, __pyx_v_mem_ptr) < 0) __PYX_ERR(0, 875, __pyx_L13_error)

              /* "cupy/cuda/memory.pyx":875
 *                     for hook in hooks_values:
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                mem_size=rounded_size,
 *                                                mem_ptr=mem_ptr)
 */
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "cupy/cuda/memory.pyx":873
 *                     memptr = self._allocator(rounded_size)
 *                 finally:
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         mem_ptr = memptr.ptr if memptr is not None else 0
 *                         hook.alloc_postprocess(device_id=device_id,
 */
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          }
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_ErrRestore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
          __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
          __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_10;
          goto __pyx_L1_error;
          __pyx_L13_error:;
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          }
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
          goto __pyx_L1_error;
        }
        __pyx_L9:;
      }

      /* "cupy/cuda/memory.pyx":878
 *                                                mem_size=rounded_size,
 *                                                mem_ptr=mem_ptr)
 *                 return memptr             # <<<<<<<<<<<<<<
 *         return self._allocator(rounded_size)
 * 
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      if (!(likely(((__pyx_v_memptr) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_memptr, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_INCREF(__pyx_v_memptr);
      __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v_memptr);
      goto __pyx_L0;

      /* "cupy/cuda/memory.pyx":862
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:             # <<<<<<<<<<<<<<
 *                 memptr = None
 *                 device_id = self._device_id
 */
    }

    /* "cupy/cuda/memory.pyx":860
 * 
 *     cpdef MemoryPointer _alloc(self, Py_ssize_t rounded_size):
 *         if memory_hook._has_memory_hooks():             # <<<<<<<<<<<<<<
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 */
  }

  /* "cupy/cuda/memory.pyx":879
 *                                                mem_ptr=mem_ptr)
 *                 return memptr
 *         return self._allocator(rounded_size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->_allocator);
  __pyx_t_8 = __pyx_v_self->_allocator; __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 879, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":859
 *         return &self._flag[stream_ptr]
 * 
 *     cpdef MemoryPointer _alloc(self, Py_ssize_t rounded_size):             # <<<<<<<<<<<<<<
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._alloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hooks);
  __Pyx_XDECREF(__pyx_v_memptr);
  __Pyx_XDECREF(__pyx_v_hooks_values);
  __Pyx_XDECREF(__pyx_v_hook);
  __Pyx_XDECREF(__pyx_v_mem_ptr);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_5_alloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_rounded_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_4_alloc[] = "SingleDeviceMemoryPool._alloc(self, Py_ssize_t rounded_size) -> MemoryPointer";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_5_alloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_rounded_size) {
  Py_ssize_t __pyx_v_rounded_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_alloc (wrapper)", 0);
  assert(__pyx_arg_rounded_size); {
    __pyx_v_rounded_size = __Pyx_PyIndex_AsSsize_t(__pyx_arg_rounded_size); if (unlikely((__pyx_v_rounded_size == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._alloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_4_alloc(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), ((Py_ssize_t)__pyx_v_rounded_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_4_alloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, Py_ssize_t __pyx_v_rounded_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_alloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc(__pyx_v_self, __pyx_v_rounded_size, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._alloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":881
 *         return self._allocator(rounded_size)
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         rounded_size = _round_size(size)
 *         if memory_hook._has_memory_hooks():
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_7malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_rounded_size;
  PyObject *__pyx_v_hooks = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v_memptr = NULL;
  int __pyx_v_device_id;
  PyObject *__pyx_v_hooks_values = NULL;
  PyObject *__pyx_v_hook = NULL;
  PyObject *__pyx_v_mem_ptr = NULL;
  PyObject *__pyx_v_pmem_id = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("malloc", 0);

  /* "cupy/cuda/memory.pyx":882
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):
 *         rounded_size = _round_size(size)             # <<<<<<<<<<<<<<
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 */
  __pyx_v_rounded_size = __pyx_f_4cupy_4cuda_6memory__round_size(__pyx_v_size, 0);

  /* "cupy/cuda/memory.pyx":883
 *     cpdef MemoryPointer malloc(self, size_t size):
 *         rounded_size = _round_size(size)
 *         if memory_hook._has_memory_hooks():             # <<<<<<<<<<<<<<
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 */
  __pyx_t_1 = (__pyx_f_4cupy_4cuda_11memory_hook__has_memory_hooks(0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":884
 *         rounded_size = _round_size(size)
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()             # <<<<<<<<<<<<<<
 *             if hooks:
 *                 memptr = None
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_11memory_hook_get_memory_hooks(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_hooks = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":885
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:             # <<<<<<<<<<<<<<
 *                 memptr = None
 *                 device_id = self._device_id
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_hooks); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 885, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "cupy/cuda/memory.pyx":886
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 *                 memptr = None             # <<<<<<<<<<<<<<
 *                 device_id = self._device_id
 *                 # avoid six for performance
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_memptr = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)Py_None);

      /* "cupy/cuda/memory.pyx":887
 *             if hooks:
 *                 memptr = None
 *                 device_id = self._device_id             # <<<<<<<<<<<<<<
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 */
      __pyx_t_3 = __pyx_v_self->_device_id;
      __pyx_v_device_id = __pyx_t_3;

      /* "cupy/cuda/memory.pyx":889
 *                 device_id = self._device_id
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()             # <<<<<<<<<<<<<<
 *                 for hook in hooks_values:
 *                     hook.malloc_preprocess(device_id=device_id,
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hooks, __pyx_n_s_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_hooks_values = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "cupy/cuda/memory.pyx":890
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                     hook.malloc_preprocess(device_id=device_id,
 *                                            size=size,
 */
      if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
        __pyx_t_2 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 890, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 890, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 890, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 890, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 890, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 890, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_7(__pyx_t_2);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 890, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "cupy/cuda/memory.pyx":891
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:
 *                     hook.malloc_preprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                            size=size,
 *                                            mem_size=rounded_size)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_malloc_preprocess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_device_id, __pyx_t_8) < 0) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cupy/cuda/memory.pyx":892
 *                 for hook in hooks_values:
 *                     hook.malloc_preprocess(device_id=device_id,
 *                                            size=size,             # <<<<<<<<<<<<<<
 *                                            mem_size=rounded_size)
 *                 try:
 */
        __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 892, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_size, __pyx_t_8) < 0) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cupy/cuda/memory.pyx":893
 *                     hook.malloc_preprocess(device_id=device_id,
 *                                            size=size,
 *                                            mem_size=rounded_size)             # <<<<<<<<<<<<<<
 *                 try:
 *                     memptr = self._malloc(rounded_size)
 */
        __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 893, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_size, __pyx_t_8) < 0) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cupy/cuda/memory.pyx":891
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:
 *                     hook.malloc_preprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                            size=size,
 *                                            mem_size=rounded_size)
 */
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 891, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cupy/cuda/memory.pyx":890
 *                 # avoid six for performance
 *                 hooks_values = hooks.values()
 *                 for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                     hook.malloc_preprocess(device_id=device_id,
 *                                            size=size,
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cupy/cuda/memory.pyx":894
 *                                            size=size,
 *                                            mem_size=rounded_size)
 *                 try:             # <<<<<<<<<<<<<<
 *                     memptr = self._malloc(rounded_size)
 *                 finally:
 */
      /*try:*/ {

        /* "cupy/cuda/memory.pyx":895
 *                                            mem_size=rounded_size)
 *                 try:
 *                     memptr = self._malloc(rounded_size)             # <<<<<<<<<<<<<<
 *                 finally:
 *                     if memptr is None:
 */
        __pyx_t_2 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__malloc(__pyx_v_self, __pyx_v_rounded_size, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF_SET(__pyx_v_memptr, ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2));
        __pyx_t_2 = 0;
      }

      /* "cupy/cuda/memory.pyx":897
 *                     memptr = self._malloc(rounded_size)
 *                 finally:
 *                     if memptr is None:             # <<<<<<<<<<<<<<
 *                         mem_ptr = 0
 *                         pmem_id = 0
 */
      /*finally:*/ {
        /*normal exit:*/{
          __pyx_t_1 = (((PyObject *)__pyx_v_memptr) == Py_None);
          __pyx_t_9 = (__pyx_t_1 != 0);
          if (__pyx_t_9) {

            /* "cupy/cuda/memory.pyx":898
 *                 finally:
 *                     if memptr is None:
 *                         mem_ptr = 0             # <<<<<<<<<<<<<<
 *                         pmem_id = 0
 *                     else:
 */
            __Pyx_INCREF(__pyx_int_0);
            __pyx_v_mem_ptr = __pyx_int_0;

            /* "cupy/cuda/memory.pyx":899
 *                     if memptr is None:
 *                         mem_ptr = 0
 *                         pmem_id = 0             # <<<<<<<<<<<<<<
 *                     else:
 *                         mem_ptr = memptr.ptr
 */
            __Pyx_INCREF(__pyx_int_0);
            __pyx_v_pmem_id = __pyx_int_0;

            /* "cupy/cuda/memory.pyx":897
 *                     memptr = self._malloc(rounded_size)
 *                 finally:
 *                     if memptr is None:             # <<<<<<<<<<<<<<
 *                         mem_ptr = 0
 *                         pmem_id = 0
 */
            goto __pyx_L10;
          }

          /* "cupy/cuda/memory.pyx":901
 *                         pmem_id = 0
 *                     else:
 *                         mem_ptr = memptr.ptr             # <<<<<<<<<<<<<<
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:
 */
          /*else*/ {
            __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_memptr->ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_v_mem_ptr = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "cupy/cuda/memory.pyx":902
 *                     else:
 *                         mem_ptr = memptr.ptr
 *                         pmem_id = id(memptr.mem)             # <<<<<<<<<<<<<<
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,
 */
            __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_memptr->mem)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_v_pmem_id = __pyx_t_2;
            __pyx_t_2 = 0;
          }
          __pyx_L10:;

          /* "cupy/cuda/memory.pyx":903
 *                         mem_ptr = memptr.ptr
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,
 */
          if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
            __pyx_t_2 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
            __pyx_t_7 = NULL;
          } else {
            __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 903, __pyx_L1_error)
          }
          for (;;) {
            if (likely(!__pyx_t_7)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 903, __pyx_L1_error)
                #else
                __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 903, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                #endif
              } else {
                if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 903, __pyx_L1_error)
                #else
                __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 903, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                #endif
              }
            } else {
              __pyx_t_8 = __pyx_t_7(__pyx_t_2);
              if (unlikely(!__pyx_t_8)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 903, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_8);
            }
            __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_8);
            __pyx_t_8 = 0;

            /* "cupy/cuda/memory.pyx":904
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                 size=size,
 *                                                 mem_size=rounded_size,
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_malloc_postprocess); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 904, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_5 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_device_id, __pyx_t_4) < 0) __PYX_ERR(0, 904, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":905
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,             # <<<<<<<<<<<<<<
 *                                                 mem_size=rounded_size,
 *                                                 mem_ptr=mem_ptr,
 */
            __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_size, __pyx_t_4) < 0) __PYX_ERR(0, 904, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":906
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,
 *                                                 mem_size=rounded_size,             # <<<<<<<<<<<<<<
 *                                                 mem_ptr=mem_ptr,
 *                                                 pmem_id=pmem_id)
 */
            __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 906, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_size, __pyx_t_4) < 0) __PYX_ERR(0, 904, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":907
 *                                                 size=size,
 *                                                 mem_size=rounded_size,
 *                                                 mem_ptr=mem_ptr,             # <<<<<<<<<<<<<<
 *                                                 pmem_id=pmem_id)
 *                 return memptr
 */
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_ptr, __pyx_v_mem_ptr) < 0) __PYX_ERR(0, 904, __pyx_L1_error)

            /* "cupy/cuda/memory.pyx":908
 *                                                 mem_size=rounded_size,
 *                                                 mem_ptr=mem_ptr,
 *                                                 pmem_id=pmem_id)             # <<<<<<<<<<<<<<
 *                 return memptr
 *         return self._malloc(rounded_size)
 */
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_pmem_id, __pyx_v_pmem_id) < 0) __PYX_ERR(0, 904, __pyx_L1_error)

            /* "cupy/cuda/memory.pyx":904
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                 size=size,
 *                                                 mem_size=rounded_size,
 */
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "cupy/cuda/memory.pyx":903
 *                         mem_ptr = memptr.ptr
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,
 */
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L9;
        }
        __pyx_L8_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __pyx_t_3 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
          {

            /* "cupy/cuda/memory.pyx":897
 *                     memptr = self._malloc(rounded_size)
 *                 finally:
 *                     if memptr is None:             # <<<<<<<<<<<<<<
 *                         mem_ptr = 0
 *                         pmem_id = 0
 */
            __pyx_t_9 = (((PyObject *)__pyx_v_memptr) == Py_None);
            __pyx_t_1 = (__pyx_t_9 != 0);
            if (__pyx_t_1) {

              /* "cupy/cuda/memory.pyx":898
 *                 finally:
 *                     if memptr is None:
 *                         mem_ptr = 0             # <<<<<<<<<<<<<<
 *                         pmem_id = 0
 *                     else:
 */
              __Pyx_INCREF(__pyx_int_0);
              __pyx_v_mem_ptr = __pyx_int_0;

              /* "cupy/cuda/memory.pyx":899
 *                     if memptr is None:
 *                         mem_ptr = 0
 *                         pmem_id = 0             # <<<<<<<<<<<<<<
 *                     else:
 *                         mem_ptr = memptr.ptr
 */
              __Pyx_INCREF(__pyx_int_0);
              __pyx_v_pmem_id = __pyx_int_0;

              /* "cupy/cuda/memory.pyx":897
 *                     memptr = self._malloc(rounded_size)
 *                 finally:
 *                     if memptr is None:             # <<<<<<<<<<<<<<
 *                         mem_ptr = 0
 *                         pmem_id = 0
 */
              goto __pyx_L15;
            }

            /* "cupy/cuda/memory.pyx":901
 *                         pmem_id = 0
 *                     else:
 *                         mem_ptr = memptr.ptr             # <<<<<<<<<<<<<<
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:
 */
            /*else*/ {
              __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_memptr->ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_v_mem_ptr = __pyx_t_2;
              __pyx_t_2 = 0;

              /* "cupy/cuda/memory.pyx":902
 *                     else:
 *                         mem_ptr = memptr.ptr
 *                         pmem_id = id(memptr.mem)             # <<<<<<<<<<<<<<
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,
 */
              __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_memptr->mem)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 902, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_v_pmem_id = __pyx_t_2;
              __pyx_t_2 = 0;
            }
            __pyx_L15:;

            /* "cupy/cuda/memory.pyx":903
 *                         mem_ptr = memptr.ptr
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,
 */
            if (likely(PyList_CheckExact(__pyx_v_hooks_values)) || PyTuple_CheckExact(__pyx_v_hooks_values)) {
              __pyx_t_2 = __pyx_v_hooks_values; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
              __pyx_t_7 = NULL;
            } else {
              __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_hooks_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 903, __pyx_L14_error)
            }
            for (;;) {
              if (likely(!__pyx_t_7)) {
                if (likely(PyList_CheckExact(__pyx_t_2))) {
                  if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 903, __pyx_L14_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L14_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 903, __pyx_L14_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L14_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_7(__pyx_t_2);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 903, __pyx_L14_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_hook, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "cupy/cuda/memory.pyx":904
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                 size=size,
 *                                                 mem_size=rounded_size,
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_hook, __pyx_n_s_malloc_postprocess); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 904, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_device_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 904, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_device_id, __pyx_t_8) < 0) __PYX_ERR(0, 904, __pyx_L14_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "cupy/cuda/memory.pyx":905
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,             # <<<<<<<<<<<<<<
 *                                                 mem_size=rounded_size,
 *                                                 mem_ptr=mem_ptr,
 */
              __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 905, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_size, __pyx_t_8) < 0) __PYX_ERR(0, 904, __pyx_L14_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "cupy/cuda/memory.pyx":906
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,
 *                                                 mem_size=rounded_size,             # <<<<<<<<<<<<<<
 *                                                 mem_ptr=mem_ptr,
 *                                                 pmem_id=pmem_id)
 */
              __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_rounded_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 906, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_size, __pyx_t_8) < 0) __PYX_ERR(0, 904, __pyx_L14_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "cupy/cuda/memory.pyx":907
 *                                                 size=size,
 *                                                 mem_size=rounded_size,
 *                                                 mem_ptr=mem_ptr,             # <<<<<<<<<<<<<<
 *                                                 pmem_id=pmem_id)
 *                 return memptr
 */
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_mem_ptr, __pyx_v_mem_ptr) < 0) __PYX_ERR(0, 904, __pyx_L14_error)

              /* "cupy/cuda/memory.pyx":908
 *                                                 mem_size=rounded_size,
 *                                                 mem_ptr=mem_ptr,
 *                                                 pmem_id=pmem_id)             # <<<<<<<<<<<<<<
 *                 return memptr
 *         return self._malloc(rounded_size)
 */
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_pmem_id, __pyx_v_pmem_id) < 0) __PYX_ERR(0, 904, __pyx_L14_error)

              /* "cupy/cuda/memory.pyx":904
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:
 *                         hook.malloc_postprocess(device_id=device_id,             # <<<<<<<<<<<<<<
 *                                                 size=size,
 *                                                 mem_size=rounded_size,
 */
              __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 904, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "cupy/cuda/memory.pyx":903
 *                         mem_ptr = memptr.ptr
 *                         pmem_id = id(memptr.mem)
 *                     for hook in hooks_values:             # <<<<<<<<<<<<<<
 *                         hook.malloc_postprocess(device_id=device_id,
 *                                                 size=size,
 */
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          }
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
          __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
          goto __pyx_L1_error;
          __pyx_L14_error:;
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          }
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
          goto __pyx_L1_error;
        }
        __pyx_L9:;
      }

      /* "cupy/cuda/memory.pyx":909
 *                                                 mem_ptr=mem_ptr,
 *                                                 pmem_id=pmem_id)
 *                 return memptr             # <<<<<<<<<<<<<<
 *         return self._malloc(rounded_size)
 * 
 */
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(((PyObject *)__pyx_v_memptr));
      __pyx_r = __pyx_v_memptr;
      goto __pyx_L0;

      /* "cupy/cuda/memory.pyx":885
 *         if memory_hook._has_memory_hooks():
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:             # <<<<<<<<<<<<<<
 *                 memptr = None
 *                 device_id = self._device_id
 */
    }

    /* "cupy/cuda/memory.pyx":883
 *     cpdef MemoryPointer malloc(self, size_t size):
 *         rounded_size = _round_size(size)
 *         if memory_hook._has_memory_hooks():             # <<<<<<<<<<<<<<
 *             hooks = memory_hook.get_memory_hooks()
 *             if hooks:
 */
  }

  /* "cupy/cuda/memory.pyx":910
 *                                                 pmem_id=pmem_id)
 *                 return memptr
 *         return self._malloc(rounded_size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef MemoryPointer _malloc(self, size_t size):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__malloc(__pyx_v_self, __pyx_v_rounded_size, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":881
 *         return self._allocator(rounded_size)
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         rounded_size = _round_size(size)
 *         if memory_hook._has_memory_hooks():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hooks);
  __Pyx_XDECREF((PyObject *)__pyx_v_memptr);
  __Pyx_XDECREF(__pyx_v_hooks_values);
  __Pyx_XDECREF(__pyx_v_hook);
  __Pyx_XDECREF(__pyx_v_mem_ptr);
  __Pyx_XDECREF(__pyx_v_pmem_id);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_7malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_6malloc[] = "SingleDeviceMemoryPool.malloc(self, size_t size) -> MemoryPointer";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_7malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("malloc (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 881, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_6malloc(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_6malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("malloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_malloc(__pyx_v_self, __pyx_v_size, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":912
 *         return self._malloc(rounded_size)
 * 
 *     cpdef MemoryPointer _malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef _Chunk chunk
 *         cdef long current_thread
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_9_malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk = 0;
  long __pyx_v_current_thread;
  struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v_mem = 0;
  size_t __pyx_v_stream_ptr;
  struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v_pmem = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  char const *__pyx_t_15;
  __Pyx_RefNannySetupContext("_malloc", 0);

  /* "cupy/cuda/memory.pyx":917
 *         cdef BaseMemory mem
 *         cdef MemoryPointer ret
 *         if size == 0:             # <<<<<<<<<<<<<<
 *             return MemoryPointer(Memory(0), 0)
 * 
 */
  __pyx_t_1 = ((__pyx_v_size == 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":918
 *         cdef MemoryPointer ret
 *         if size == 0:
 *             return MemoryPointer(Memory(0), 0)             # <<<<<<<<<<<<<<
 * 
 *         current_thread = pythread.PyThread_get_thread_ident()
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_Memory), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 918, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cupy/cuda/memory.pyx":917
 *         cdef BaseMemory mem
 *         cdef MemoryPointer ret
 *         if size == 0:             # <<<<<<<<<<<<<<
 *             return MemoryPointer(Memory(0), 0)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":920
 *             return MemoryPointer(Memory(0), 0)
 * 
 *         current_thread = pythread.PyThread_get_thread_ident()             # <<<<<<<<<<<<<<
 *         stream_ptr = stream_module.get_current_stream_ptr()
 * 
 */
  __pyx_v_current_thread = PyThread_get_thread_ident();

  /* "cupy/cuda/memory.pyx":921
 * 
 *         current_thread = pythread.PyThread_get_thread_ident()
 *         stream_ptr = stream_module.get_current_stream_ptr()             # <<<<<<<<<<<<<<
 * 
 *         # find best-fit, or a smallest larger allocation
 */
  __pyx_v_stream_ptr = __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr();

  /* "cupy/cuda/memory.pyx":924
 * 
 *         # find best-fit, or a smallest larger allocation
 *         rlock.lock_fastrlock(self._free_lock, current_thread, True)             # <<<<<<<<<<<<<<
 *         try:
 *             chunk = _get_chunk(self, size, stream_ptr)
 */
  __pyx_t_2 = __pyx_v_self->_free_lock;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_2, __pyx_v_current_thread, 1); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":925
 *         # find best-fit, or a smallest larger allocation
 *         rlock.lock_fastrlock(self._free_lock, current_thread, True)
 *         try:             # <<<<<<<<<<<<<<
 *             chunk = _get_chunk(self, size, stream_ptr)
 *         finally:
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":926
 *         rlock.lock_fastrlock(self._free_lock, current_thread, True)
 *         try:
 *             chunk = _get_chunk(self, size, stream_ptr)             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_6memory__get_chunk(__pyx_v_self, __pyx_v_size, __pyx_v_stream_ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 926, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(0, 926, __pyx_L5_error)
    __pyx_v_chunk = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "cupy/cuda/memory.pyx":928
 *             chunk = _get_chunk(self, size, stream_ptr)
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)             # <<<<<<<<<<<<<<
 * 
 *         if chunk is None:
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_2 = __pyx_v_self->_free_lock;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_4 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        __pyx_t_2 = __pyx_v_self->_free_lock;
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_13 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_2); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 928, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
      __pyx_L8_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "cupy/cuda/memory.pyx":930
 *             rlock.unlock_fastrlock(self._free_lock)
 * 
 *         if chunk is None:             # <<<<<<<<<<<<<<
 *             mem = _try_malloc(self, size)
 *             chunk = _Chunk.__new__(_Chunk)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chunk) == Py_None);
  __pyx_t_14 = (__pyx_t_1 != 0);
  if (__pyx_t_14) {

    /* "cupy/cuda/memory.pyx":931
 * 
 *         if chunk is None:
 *             mem = _try_malloc(self, size)             # <<<<<<<<<<<<<<
 *             chunk = _Chunk.__new__(_Chunk)
 *             # cudaMalloc if a cache is not found
 */
    __pyx_t_2 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory__try_malloc(__pyx_v_self, __pyx_v_size)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":932
 *         if chunk is None:
 *             mem = _try_malloc(self, size)
 *             chunk = _Chunk.__new__(_Chunk)             # <<<<<<<<<<<<<<
 *             # cudaMalloc if a cache is not found
 *             chunk._init(mem, 0, size, stream_ptr)
 */
    __pyx_t_2 = ((PyObject *)__pyx_tp_new_4cupy_4cuda_6memory__Chunk(((PyTypeObject *)__pyx_ptype_4cupy_4cuda_6memory__Chunk), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_DECREF_SET(__pyx_v_chunk, ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":934
 *             chunk = _Chunk.__new__(_Chunk)
 *             # cudaMalloc if a cache is not found
 *             chunk._init(mem, 0, size, stream_ptr)             # <<<<<<<<<<<<<<
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 */
    __pyx_t_2 = __pyx_f_4cupy_4cuda_6memory_6_Chunk__init(__pyx_v_chunk, __pyx_v_mem, 0, __pyx_v_size, __pyx_v_stream_ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cupy/cuda/memory.pyx":930
 *             rlock.unlock_fastrlock(self._free_lock)
 * 
 *         if chunk is None:             # <<<<<<<<<<<<<<
 *             mem = _try_malloc(self, size)
 *             chunk = _Chunk.__new__(_Chunk)
 */
  }

  /* "cupy/cuda/memory.pyx":936
 *             chunk._init(mem, 0, size, stream_ptr)
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)             # <<<<<<<<<<<<<<
 *         try:
 *             self._in_use[chunk.ptr()] = chunk
 */
  __pyx_t_2 = __pyx_v_self->_in_use_lock;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_14 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_2, __pyx_v_current_thread, 1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":937
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 *         try:             # <<<<<<<<<<<<<<
 *             self._in_use[chunk.ptr()] = chunk
 *         finally:
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":938
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 *         try:
 *             self._in_use[chunk.ptr()] = chunk             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)
 */
    if (unlikely(__pyx_v_self->_in_use == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 938, __pyx_L11_error)
    }
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_f_4cupy_4cuda_6memory_6_Chunk_ptr(__pyx_v_chunk, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 938, __pyx_L11_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyDict_SetItem(__pyx_v_self->_in_use, __pyx_t_2, ((PyObject *)__pyx_v_chunk)) < 0)) __PYX_ERR(0, 938, __pyx_L11_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "cupy/cuda/memory.pyx":940
 *             self._in_use[chunk.ptr()] = chunk
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)             # <<<<<<<<<<<<<<
 *         pmem = PooledMemory(chunk, self._weakref)
 *         return MemoryPointer(pmem, 0)
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_2 = __pyx_v_self->_in_use_lock;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_5 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 940, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L12;
    }
    __pyx_L11_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __pyx_t_5 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
      {
        __pyx_t_2 = __pyx_v_self->_in_use_lock;
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_13 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_2); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 940, __pyx_L14_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_7 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_15;
      goto __pyx_L1_error;
      __pyx_L14_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = 0; __pyx_t_8 = 0; __pyx_t_7 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L12:;
  }

  /* "cupy/cuda/memory.pyx":941
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)
 *         pmem = PooledMemory(chunk, self._weakref)             # <<<<<<<<<<<<<<
 *         return MemoryPointer(pmem, 0)
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_chunk));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_chunk));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_chunk));
  __Pyx_INCREF(__pyx_v_self->_weakref);
  __Pyx_GIVEREF(__pyx_v_self->_weakref);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self->_weakref);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_PooledMemory), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pmem = ((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":942
 *             rlock.unlock_fastrlock(self._in_use_lock)
 *         pmem = PooledMemory(chunk, self._weakref)
 *         return MemoryPointer(pmem, 0)             # <<<<<<<<<<<<<<
 * 
 *     cpdef free(self, intptr_t ptr, size_t size):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_pmem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_pmem));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_pmem));
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":912
 *         return self._malloc(rounded_size)
 * 
 *     cpdef MemoryPointer _malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef _Chunk chunk
 *         cdef long current_thread
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chunk);
  __Pyx_XDECREF((PyObject *)__pyx_v_mem);
  __Pyx_XDECREF((PyObject *)__pyx_v_pmem);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_9_malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_8_malloc[] = "SingleDeviceMemoryPool._malloc(self, size_t size) -> MemoryPointer";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_9_malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_malloc (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 912, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_8_malloc(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_8_malloc(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_malloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__malloc(__pyx_v_self, __pyx_v_size, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":944
 *         return MemoryPointer(pmem, 0)
 * 
 *     cpdef free(self, intptr_t ptr, size_t size):             # <<<<<<<<<<<<<<
 *         cdef _Chunk chunk, c
 *         cdef long current_thread = pythread.PyThread_get_thread_ident()
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_11free(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, intptr_t __pyx_v_ptr, CYTHON_UNUSED size_t __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk = 0;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_c = 0;
  long __pyx_v_current_thread;
  size_t __pyx_v_stream_ptr;
  PyObject *__pyx_v_arena = NULL;
  std::vector<size_t>  *__pyx_v_a_index;
  std::vector<int8_t>  *__pyx_v_a_flag;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  size_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  char const *__pyx_t_19;
  __Pyx_RefNannySetupContext("free", 0);

  /* "cupy/cuda/memory.pyx":946
 *     cpdef free(self, intptr_t ptr, size_t size):
 *         cdef _Chunk chunk, c
 *         cdef long current_thread = pythread.PyThread_get_thread_ident()             # <<<<<<<<<<<<<<
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 */
  __pyx_v_current_thread = PyThread_get_thread_ident();

  /* "cupy/cuda/memory.pyx":948
 *         cdef long current_thread = pythread.PyThread_get_thread_ident()
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)             # <<<<<<<<<<<<<<
 *         try:
 *             chunk = self._in_use.pop(ptr)
 */
  __pyx_t_1 = __pyx_v_self->_in_use_lock;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_1, __pyx_v_current_thread, 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":949
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 *         try:             # <<<<<<<<<<<<<<
 *             chunk = self._in_use.pop(ptr)
 *         except KeyError:
 */
  /*try:*/ {
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "cupy/cuda/memory.pyx":950
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 *         try:
 *             chunk = self._in_use.pop(ptr)             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             raise RuntimeError('Cannot free out-of-pool memory')
 */
        if (unlikely(__pyx_v_self->_in_use == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "pop");
          __PYX_ERR(0, 950, __pyx_L6_error)
        }
        __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyDict_Pop(__pyx_v_self->_in_use, __pyx_t_1, ((PyObject *)NULL)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 950, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(0, 950, __pyx_L6_error)
        __pyx_v_chunk = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_6);
        __pyx_t_6 = 0;

        /* "cupy/cuda/memory.pyx":949
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 *         try:             # <<<<<<<<<<<<<<
 *             chunk = self._in_use.pop(ptr)
 *         except KeyError:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "cupy/cuda/memory.pyx":951
 *         try:
 *             chunk = self._in_use.pop(ptr)
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Cannot free out-of-pool memory')
 *         finally:
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
      if (__pyx_t_7) {
        __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_1, &__pyx_t_8) < 0) __PYX_ERR(0, 951, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_8);

        /* "cupy/cuda/memory.pyx":952
 *             chunk = self._in_use.pop(ptr)
 *         except KeyError:
 *             raise RuntimeError('Cannot free out-of-pool memory')             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)
 */
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 952, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 952, __pyx_L8_except_error)
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "cupy/cuda/memory.pyx":949
 * 
 *         rlock.lock_fastrlock(self._in_use_lock, current_thread, True)
 *         try:             # <<<<<<<<<<<<<<
 *             chunk = self._in_use.pop(ptr)
 *         except KeyError:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L4_error;
      __pyx_L11_try_end:;
    }
  }

  /* "cupy/cuda/memory.pyx":954
 *             raise RuntimeError('Cannot free out-of-pool memory')
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)             # <<<<<<<<<<<<<<
 *         stream_ptr = chunk.stream_ptr
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_8 = __pyx_v_self->_in_use_lock;
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_7 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_8); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_7 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
      {
        __pyx_t_8 = __pyx_v_self->_in_use_lock;
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_15 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_8); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 954, __pyx_L15_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
      goto __pyx_L1_error;
      __pyx_L15_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "cupy/cuda/memory.pyx":955
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)
 *         stream_ptr = chunk.stream_ptr             # <<<<<<<<<<<<<<
 * 
 *         rlock.lock_fastrlock(self._free_lock, current_thread, True)
 */
  __pyx_t_16 = __pyx_v_chunk->stream_ptr;
  __pyx_v_stream_ptr = __pyx_t_16;

  /* "cupy/cuda/memory.pyx":957
 *         stream_ptr = chunk.stream_ptr
 * 
 *         rlock.lock_fastrlock(self._free_lock, current_thread, True)             # <<<<<<<<<<<<<<
 *         try:
 *             arena = self._arena(stream_ptr)
 */
  __pyx_t_8 = __pyx_v_self->_free_lock;
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_2 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_8, __pyx_v_current_thread, 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "cupy/cuda/memory.pyx":958
 * 
 *         rlock.lock_fastrlock(self._free_lock, current_thread, True)
 *         try:             # <<<<<<<<<<<<<<
 *             arena = self._arena(stream_ptr)
 *             a_index = self._arena_index(stream_ptr)
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":959
 *         rlock.lock_fastrlock(self._free_lock, current_thread, True)
 *         try:
 *             arena = self._arena(stream_ptr)             # <<<<<<<<<<<<<<
 *             a_index = self._arena_index(stream_ptr)
 *             a_flag = self._arena_flag(stream_ptr)
 */
    __pyx_t_8 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena(__pyx_v_self, __pyx_v_stream_ptr, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 959, __pyx_L17_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_arena = ((PyObject*)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "cupy/cuda/memory.pyx":960
 *         try:
 *             arena = self._arena(stream_ptr)
 *             a_index = self._arena_index(stream_ptr)             # <<<<<<<<<<<<<<
 *             a_flag = self._arena_flag(stream_ptr)
 * 
 */
    __pyx_v_a_index = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_index(__pyx_v_self, __pyx_v_stream_ptr);

    /* "cupy/cuda/memory.pyx":961
 *             arena = self._arena(stream_ptr)
 *             a_index = self._arena_index(stream_ptr)
 *             a_flag = self._arena_flag(stream_ptr)             # <<<<<<<<<<<<<<
 * 
 *             c = chunk.next
 */
    __pyx_v_a_flag = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_flag(__pyx_v_self, __pyx_v_stream_ptr);

    /* "cupy/cuda/memory.pyx":963
 *             a_flag = self._arena_flag(stream_ptr)
 * 
 *             c = chunk.next             # <<<<<<<<<<<<<<
 *             if c is not None and _remove_from_free_list(arena, a_index,
 *                                                         a_flag, c):
 */
    __pyx_t_8 = ((PyObject *)__pyx_v_chunk->next);
    __Pyx_INCREF(__pyx_t_8);
    __pyx_v_c = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "cupy/cuda/memory.pyx":964
 * 
 *             c = chunk.next
 *             if c is not None and _remove_from_free_list(arena, a_index,             # <<<<<<<<<<<<<<
 *                                                         a_flag, c):
 *                 chunk.merge(c)
 */
    __pyx_t_17 = (((PyObject *)__pyx_v_c) != Py_None);
    __pyx_t_18 = (__pyx_t_17 != 0);
    if (__pyx_t_18) {
    } else {
      __pyx_t_2 = __pyx_t_18;
      goto __pyx_L20_bool_binop_done;
    }

    /* "cupy/cuda/memory.pyx":965
 *             c = chunk.next
 *             if c is not None and _remove_from_free_list(arena, a_index,
 *                                                         a_flag, c):             # <<<<<<<<<<<<<<
 *                 chunk.merge(c)
 * 
 */
    __pyx_t_18 = __pyx_f_4cupy_4cuda_6memory__remove_from_free_list(__pyx_v_arena, __pyx_v_a_index, __pyx_v_a_flag, __pyx_v_c); if (unlikely(__pyx_t_18 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 964, __pyx_L17_error)

    /* "cupy/cuda/memory.pyx":964
 * 
 *             c = chunk.next
 *             if c is not None and _remove_from_free_list(arena, a_index,             # <<<<<<<<<<<<<<
 *                                                         a_flag, c):
 *                 chunk.merge(c)
 */
    __pyx_t_17 = (__pyx_t_18 != 0);
    __pyx_t_2 = __pyx_t_17;
    __pyx_L20_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cupy/cuda/memory.pyx":966
 *             if c is not None and _remove_from_free_list(arena, a_index,
 *                                                         a_flag, c):
 *                 chunk.merge(c)             # <<<<<<<<<<<<<<
 * 
 *             c = chunk.prev
 */
      __pyx_t_8 = __pyx_f_4cupy_4cuda_6memory_6_Chunk_merge(__pyx_v_chunk, __pyx_v_c, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 966, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cupy/cuda/memory.pyx":964
 * 
 *             c = chunk.next
 *             if c is not None and _remove_from_free_list(arena, a_index,             # <<<<<<<<<<<<<<
 *                                                         a_flag, c):
 *                 chunk.merge(c)
 */
    }

    /* "cupy/cuda/memory.pyx":968
 *                 chunk.merge(c)
 * 
 *             c = chunk.prev             # <<<<<<<<<<<<<<
 *             if c is not None and _remove_from_free_list(arena, a_index,
 *                                                         a_flag, c):
 */
    __pyx_t_8 = ((PyObject *)__pyx_v_chunk->prev);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_c, ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "cupy/cuda/memory.pyx":969
 * 
 *             c = chunk.prev
 *             if c is not None and _remove_from_free_list(arena, a_index,             # <<<<<<<<<<<<<<
 *                                                         a_flag, c):
 *                 c.merge(chunk)
 */
    __pyx_t_17 = (((PyObject *)__pyx_v_c) != Py_None);
    __pyx_t_18 = (__pyx_t_17 != 0);
    if (__pyx_t_18) {
    } else {
      __pyx_t_2 = __pyx_t_18;
      goto __pyx_L23_bool_binop_done;
    }

    /* "cupy/cuda/memory.pyx":970
 *             c = chunk.prev
 *             if c is not None and _remove_from_free_list(arena, a_index,
 *                                                         a_flag, c):             # <<<<<<<<<<<<<<
 *                 c.merge(chunk)
 *                 chunk = c
 */
    __pyx_t_18 = __pyx_f_4cupy_4cuda_6memory__remove_from_free_list(__pyx_v_arena, __pyx_v_a_index, __pyx_v_a_flag, __pyx_v_c); if (unlikely(__pyx_t_18 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 969, __pyx_L17_error)

    /* "cupy/cuda/memory.pyx":969
 * 
 *             c = chunk.prev
 *             if c is not None and _remove_from_free_list(arena, a_index,             # <<<<<<<<<<<<<<
 *                                                         a_flag, c):
 *                 c.merge(chunk)
 */
    __pyx_t_17 = (__pyx_t_18 != 0);
    __pyx_t_2 = __pyx_t_17;
    __pyx_L23_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cupy/cuda/memory.pyx":971
 *             if c is not None and _remove_from_free_list(arena, a_index,
 *                                                         a_flag, c):
 *                 c.merge(chunk)             # <<<<<<<<<<<<<<
 *                 chunk = c
 * 
 */
      __pyx_t_8 = __pyx_f_4cupy_4cuda_6memory_6_Chunk_merge(__pyx_v_c, __pyx_v_chunk, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 971, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cupy/cuda/memory.pyx":972
 *                                                         a_flag, c):
 *                 c.merge(chunk)
 *                 chunk = c             # <<<<<<<<<<<<<<
 * 
 *             _append_to_free_list(arena, a_index, a_flag, chunk)
 */
      __Pyx_INCREF(((PyObject *)__pyx_v_c));
      __Pyx_DECREF_SET(__pyx_v_chunk, __pyx_v_c);

      /* "cupy/cuda/memory.pyx":969
 * 
 *             c = chunk.prev
 *             if c is not None and _remove_from_free_list(arena, a_index,             # <<<<<<<<<<<<<<
 *                                                         a_flag, c):
 *                 c.merge(chunk)
 */
    }

    /* "cupy/cuda/memory.pyx":974
 *                 chunk = c
 * 
 *             _append_to_free_list(arena, a_index, a_flag, chunk)             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)
 */
    __pyx_t_8 = __pyx_f_4cupy_4cuda_6memory__append_to_free_list(__pyx_v_arena, __pyx_v_a_index, __pyx_v_a_flag, __pyx_v_chunk); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 974, __pyx_L17_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "cupy/cuda/memory.pyx":976
 *             _append_to_free_list(arena, a_index, a_flag, chunk)
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)             # <<<<<<<<<<<<<<
 * 
 *     cpdef free_all_blocks(self, stream=None):
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_8 = __pyx_v_self->_free_lock;
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_10 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_8); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L18;
    }
    __pyx_L17_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __pyx_t_10 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
      {
        __pyx_t_8 = __pyx_v_self->_free_lock;
        __Pyx_INCREF(__pyx_t_8);
        __pyx_t_15 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_8); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 976, __pyx_L26_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      }
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
      __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_19;
      goto __pyx_L1_error;
      __pyx_L26_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L18:;
  }

  /* "cupy/cuda/memory.pyx":944
 *         return MemoryPointer(pmem, 0)
 * 
 *     cpdef free(self, intptr_t ptr, size_t size):             # <<<<<<<<<<<<<<
 *         cdef _Chunk chunk, c
 *         cdef long current_thread = pythread.PyThread_get_thread_ident()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chunk);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_arena);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_11free(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10free[] = "SingleDeviceMemoryPool.free(self, intptr_t ptr, size_t size)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_11free(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  intptr_t __pyx_v_ptr;
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptr,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ptr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("free", 1, 2, 2, 1); __PYX_ERR(0, 944, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "free") < 0)) __PYX_ERR(0, 944, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ptr = PyInt_AsSsize_t(values[0]); if (unlikely((__pyx_v_ptr == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 944, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("free", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 944, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10free(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), __pyx_v_ptr, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, intptr_t __pyx_v_ptr, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("free", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free(__pyx_v_self, __pyx_v_ptr, __pyx_v_size, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":978
 *             rlock.unlock_fastrlock(self._free_lock)
 * 
 *     cpdef free_all_blocks(self, stream=None):             # <<<<<<<<<<<<<<
 *         """Free all **non-split** chunks"""
 *         cdef size_t stream_ptr
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_13free_all_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks *__pyx_optional_args) {
  PyObject *__pyx_v_stream = ((PyObject *)Py_None);
  size_t __pyx_v_stream_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  size_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("free_all_blocks", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream = __pyx_optional_args->stream;
    }
  }

  /* "cupy/cuda/memory.pyx":982
 *         cdef size_t stream_ptr
 * 
 *         rlock.lock_fastrlock(self._free_lock, -1, True)             # <<<<<<<<<<<<<<
 *         try:
 *             # free blocks in all arenas
 */
  __pyx_t_1 = __pyx_v_self->_free_lock;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_1, -1L, 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":983
 * 
 *         rlock.lock_fastrlock(self._free_lock, -1, True)
 *         try:             # <<<<<<<<<<<<<<
 *             # free blocks in all arenas
 *             if stream is None:
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":985
 *         try:
 *             # free blocks in all arenas
 *             if stream is None:             # <<<<<<<<<<<<<<
 *                 for stream_ptr in list(self._free.iterkeys()):
 *                     _compact_index(self, stream_ptr, True)
 */
    __pyx_t_2 = (__pyx_v_stream == Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "cupy/cuda/memory.pyx":986
 *             # free blocks in all arenas
 *             if stream is None:
 *                 for stream_ptr in list(self._free.iterkeys()):             # <<<<<<<<<<<<<<
 *                     _compact_index(self, stream_ptr, True)
 *             else:
 */
      if (unlikely(__pyx_v_self->_free == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iterkeys");
        __PYX_ERR(0, 986, __pyx_L4_error)
      }
      __pyx_t_1 = __Pyx_PyDict_IterKeys(__pyx_v_self->_free); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 986, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 986, __pyx_L4_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 986, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_stream_ptr = __pyx_t_6;

        /* "cupy/cuda/memory.pyx":987
 *             if stream is None:
 *                 for stream_ptr in list(self._free.iterkeys()):
 *                     _compact_index(self, stream_ptr, True)             # <<<<<<<<<<<<<<
 *             else:
 *                 _compact_index(self, stream.ptr, True)
 */
        __pyx_t_4 = __pyx_f_4cupy_4cuda_6memory__compact_index(__pyx_v_self, __pyx_v_stream_ptr, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 987, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "cupy/cuda/memory.pyx":986
 *             # free blocks in all arenas
 *             if stream is None:
 *                 for stream_ptr in list(self._free.iterkeys()):             # <<<<<<<<<<<<<<
 *                     _compact_index(self, stream_ptr, True)
 *             else:
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "cupy/cuda/memory.pyx":985
 *         try:
 *             # free blocks in all arenas
 *             if stream is None:             # <<<<<<<<<<<<<<
 *                 for stream_ptr in list(self._free.iterkeys()):
 *                     _compact_index(self, stream_ptr, True)
 */
      goto __pyx_L6;
    }

    /* "cupy/cuda/memory.pyx":989
 *                     _compact_index(self, stream_ptr, True)
 *             else:
 *                 _compact_index(self, stream.ptr, True)             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream, __pyx_n_s_ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 989, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory__compact_index(__pyx_v_self, __pyx_t_6, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L6:;
  }

  /* "cupy/cuda/memory.pyx":991
 *                 _compact_index(self, stream.ptr, True)
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)             # <<<<<<<<<<<<<<
 * 
 *     cpdef free_all_free(self):
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_1 = __pyx_v_self->_free_lock;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_7 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 991, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_7 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        __pyx_t_1 = __pyx_v_self->_free_lock;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_16 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 991, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
      __pyx_L10_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "cupy/cuda/memory.pyx":978
 *             rlock.unlock_fastrlock(self._free_lock)
 * 
 *     cpdef free_all_blocks(self, stream=None):             # <<<<<<<<<<<<<<
 *         """Free all **non-split** chunks"""
 *         cdef size_t stream_ptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free_all_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_13free_all_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_12free_all_blocks[] = "SingleDeviceMemoryPool.free_all_blocks(self, stream=None)\nFree all **non-split** chunks";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_13free_all_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_all_blocks (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stream,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "free_all_blocks") < 0)) __PYX_ERR(0, 978, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_stream = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("free_all_blocks", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 978, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free_all_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_12free_all_blocks(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_12free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks __pyx_t_2;
  __Pyx_RefNannySetupContext("free_all_blocks", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.stream = __pyx_v_stream;
  __pyx_t_1 = __pyx_vtabptr_4cupy_4cuda_6memory_SingleDeviceMemoryPool->free_all_blocks(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free_all_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":993
 *             rlock.unlock_fastrlock(self._free_lock)
 * 
 *     cpdef free_all_free(self):             # <<<<<<<<<<<<<<
 *         warnings.warn(
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_15free_all_free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("free_all_free", 0);

  /* "cupy/cuda/memory.pyx":994
 * 
 *     cpdef free_all_free(self):
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":996
 *         warnings.warn(
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.free_all_blocks()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":997
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)
 *         self.free_all_blocks()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t n_free_blocks(self):
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks(__pyx_v_self, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":993
 *             rlock.unlock_fastrlock(self._free_lock)
 * 
 *     cpdef free_all_free(self):             # <<<<<<<<<<<<<<
 *         warnings.warn(
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free_all_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_15free_all_free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_14free_all_free[] = "SingleDeviceMemoryPool.free_all_free(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_15free_all_free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_all_free (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_14free_all_free(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_14free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("free_all_free", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_free(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free_all_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":999
 *         self.free_all_blocks()
 * 
 *     cpdef size_t n_free_blocks(self):             # <<<<<<<<<<<<<<
 *         cdef size_t n = 0
 *         cdef set free_list
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_17n_free_blocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_n;
  PyObject *__pyx_v_arena = NULL;
  PyObject *__pyx_v_v = NULL;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  __Pyx_RefNannySetupContext("n_free_blocks", 0);

  /* "cupy/cuda/memory.pyx":1000
 * 
 *     cpdef size_t n_free_blocks(self):
 *         cdef size_t n = 0             # <<<<<<<<<<<<<<
 *         cdef set free_list
 *         rlock.lock_fastrlock(self._free_lock, -1, True)
 */
  __pyx_v_n = 0;

  /* "cupy/cuda/memory.pyx":1002
 *         cdef size_t n = 0
 *         cdef set free_list
 *         rlock.lock_fastrlock(self._free_lock, -1, True)             # <<<<<<<<<<<<<<
 *         try:
 *             for arena in self._free.itervalues():
 */
  __pyx_t_1 = __pyx_v_self->_free_lock;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_1, -1L, 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":1003
 *         cdef set free_list
 *         rlock.lock_fastrlock(self._free_lock, -1, True)
 *         try:             # <<<<<<<<<<<<<<
 *             for arena in self._free.itervalues():
 *                 for v in arena:
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":1004
 *         rlock.lock_fastrlock(self._free_lock, -1, True)
 *         try:
 *             for arena in self._free.itervalues():             # <<<<<<<<<<<<<<
 *                 for v in arena:
 *                     if v is not None:
 */
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->_free == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "itervalues");
      __PYX_ERR(0, 1004, __pyx_L4_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->_free, 1, __pyx_n_s_itervalues, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1004, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_4, &__pyx_t_3, NULL, &__pyx_t_6, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1004, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_arena, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cupy/cuda/memory.pyx":1005
 *         try:
 *             for arena in self._free.itervalues():
 *                 for v in arena:             # <<<<<<<<<<<<<<
 *                     if v is not None:
 *                         n += len(v)
 */
      if (likely(PyList_CheckExact(__pyx_v_arena)) || PyTuple_CheckExact(__pyx_v_arena)) {
        __pyx_t_6 = __pyx_v_arena; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_arena); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1005, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1005, __pyx_L4_error)
      }
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1005, __pyx_L4_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1005, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1005, __pyx_L4_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1005, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_9(__pyx_t_6);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1005, __pyx_L4_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "cupy/cuda/memory.pyx":1006
 *             for arena in self._free.itervalues():
 *                 for v in arena:
 *                     if v is not None:             # <<<<<<<<<<<<<<
 *                         n += len(v)
 *         finally:
 */
        __pyx_t_2 = (__pyx_v_v != Py_None);
        __pyx_t_11 = (__pyx_t_2 != 0);
        if (__pyx_t_11) {

          /* "cupy/cuda/memory.pyx":1007
 *                 for v in arena:
 *                     if v is not None:
 *                         n += len(v)             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)
 */
          __pyx_t_12 = PyObject_Length(__pyx_v_v); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1007, __pyx_L4_error)
          __pyx_v_n = (__pyx_v_n + __pyx_t_12);

          /* "cupy/cuda/memory.pyx":1006
 *             for arena in self._free.itervalues():
 *                 for v in arena:
 *                     if v is not None:             # <<<<<<<<<<<<<<
 *                         n += len(v)
 *         finally:
 */
        }

        /* "cupy/cuda/memory.pyx":1005
 *         try:
 *             for arena in self._free.itervalues():
 *                 for v in arena:             # <<<<<<<<<<<<<<
 *                     if v is not None:
 *                         n += len(v)
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cupy/cuda/memory.pyx":1009
 *                         n += len(v)
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_1 = __pyx_v_self->_free_lock;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1009, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __pyx_t_5 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
      {
        __pyx_t_1 = __pyx_v_self->_free_lock;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_20 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 1009, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      }
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_13;
      goto __pyx_L1_error;
      __pyx_L12_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "cupy/cuda/memory.pyx":1010
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)
 *         return n             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t used_bytes(self):
 */
  __pyx_r = __pyx_v_n;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":999
 *         self.free_all_blocks()
 * 
 *     cpdef size_t n_free_blocks(self):             # <<<<<<<<<<<<<<
 *         cdef size_t n = 0
 *         cdef set free_list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("cupy.cuda.memory.SingleDeviceMemoryPool.n_free_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arena);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_17n_free_blocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_16n_free_blocks[] = "SingleDeviceMemoryPool.n_free_blocks(self) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_17n_free_blocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("n_free_blocks (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_16n_free_blocks(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_16n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("n_free_blocks", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_n_free_blocks(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.n_free_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1012
 *         return n
 * 
 *     cpdef size_t used_bytes(self):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 0
 *         cdef _Chunk chunk
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_19used_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_size;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk = 0;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("used_bytes", 0);

  /* "cupy/cuda/memory.pyx":1013
 * 
 *     cpdef size_t used_bytes(self):
 *         cdef size_t size = 0             # <<<<<<<<<<<<<<
 *         cdef _Chunk chunk
 *         rlock.lock_fastrlock(self._in_use_lock, -1, True)
 */
  __pyx_v_size = 0;

  /* "cupy/cuda/memory.pyx":1015
 *         cdef size_t size = 0
 *         cdef _Chunk chunk
 *         rlock.lock_fastrlock(self._in_use_lock, -1, True)             # <<<<<<<<<<<<<<
 *         try:
 *             for chunk in self._in_use.itervalues():
 */
  __pyx_t_1 = __pyx_v_self->_in_use_lock;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_1, -1L, 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":1016
 *         cdef _Chunk chunk
 *         rlock.lock_fastrlock(self._in_use_lock, -1, True)
 *         try:             # <<<<<<<<<<<<<<
 *             for chunk in self._in_use.itervalues():
 *                 size += chunk.size
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":1017
 *         rlock.lock_fastrlock(self._in_use_lock, -1, True)
 *         try:
 *             for chunk in self._in_use.itervalues():             # <<<<<<<<<<<<<<
 *                 size += chunk.size
 *         finally:
 */
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->_in_use == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "itervalues");
      __PYX_ERR(0, 1017, __pyx_L4_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->_in_use, 1, __pyx_n_s_itervalues, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1017, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_4, &__pyx_t_3, NULL, &__pyx_t_6, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1017, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(0, 1017, __pyx_L4_error)
      __Pyx_XDECREF_SET(__pyx_v_chunk, ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "cupy/cuda/memory.pyx":1018
 *         try:
 *             for chunk in self._in_use.itervalues():
 *                 size += chunk.size             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)
 */
      __pyx_v_size = (__pyx_v_size + __pyx_v_chunk->size);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cupy/cuda/memory.pyx":1020
 *                 size += chunk.size
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_1 = __pyx_v_self->_in_use_lock;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1020, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_5 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_8 = __pyx_filename;
      {
        __pyx_t_1 = __pyx_v_self->_in_use_lock;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_15 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1020, __pyx_L9_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_8;
      goto __pyx_L1_error;
      __pyx_L9_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "cupy/cuda/memory.pyx":1021
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t free_bytes(self):
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1012
 *         return n
 * 
 *     cpdef size_t used_bytes(self):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 0
 *         cdef _Chunk chunk
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("cupy.cuda.memory.SingleDeviceMemoryPool.used_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chunk);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_19used_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_18used_bytes[] = "SingleDeviceMemoryPool.used_bytes(self) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_19used_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("used_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_18used_bytes(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_18used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("used_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_used_bytes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.used_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1023
 *         return size
 * 
 *     cpdef size_t free_bytes(self):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 0
 *         cdef set free_list
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_21free_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_size;
  PyObject *__pyx_v_free_list = 0;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v_chunk = 0;
  PyObject *__pyx_v_arena = NULL;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  __Pyx_RefNannySetupContext("free_bytes", 0);

  /* "cupy/cuda/memory.pyx":1024
 * 
 *     cpdef size_t free_bytes(self):
 *         cdef size_t size = 0             # <<<<<<<<<<<<<<
 *         cdef set free_list
 *         cdef _Chunk chunk
 */
  __pyx_v_size = 0;

  /* "cupy/cuda/memory.pyx":1027
 *         cdef set free_list
 *         cdef _Chunk chunk
 *         rlock.lock_fastrlock(self._free_lock, -1, True)             # <<<<<<<<<<<<<<
 *         try:
 *             for arena in self._free.itervalues():
 */
  __pyx_t_1 = __pyx_v_self->_free_lock;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_9fastrlock_5rlock_lock_fastrlock(__pyx_t_1, -1L, 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":1028
 *         cdef _Chunk chunk
 *         rlock.lock_fastrlock(self._free_lock, -1, True)
 *         try:             # <<<<<<<<<<<<<<
 *             for arena in self._free.itervalues():
 *                 for free_list in arena:
 */
  /*try:*/ {

    /* "cupy/cuda/memory.pyx":1029
 *         rlock.lock_fastrlock(self._free_lock, -1, True)
 *         try:
 *             for arena in self._free.itervalues():             # <<<<<<<<<<<<<<
 *                 for free_list in arena:
 *                     if free_list is None:
 */
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->_free == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "itervalues");
      __PYX_ERR(0, 1029, __pyx_L4_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->_free, 1, __pyx_n_s_itervalues, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1029, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_4, &__pyx_t_3, NULL, &__pyx_t_6, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1029, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_arena, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cupy/cuda/memory.pyx":1030
 *         try:
 *             for arena in self._free.itervalues():
 *                 for free_list in arena:             # <<<<<<<<<<<<<<
 *                     if free_list is None:
 *                         continue
 */
      if (likely(PyList_CheckExact(__pyx_v_arena)) || PyTuple_CheckExact(__pyx_v_arena)) {
        __pyx_t_6 = __pyx_v_arena; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_arena); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1030, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1030, __pyx_L4_error)
      }
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1030, __pyx_L4_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1030, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1030, __pyx_L4_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1030, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_9(__pyx_t_6);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1030, __pyx_L4_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        if (!(likely(PySet_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 1030, __pyx_L4_error)
        __Pyx_XDECREF_SET(__pyx_v_free_list, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "cupy/cuda/memory.pyx":1031
 *             for arena in self._free.itervalues():
 *                 for free_list in arena:
 *                     if free_list is None:             # <<<<<<<<<<<<<<
 *                         continue
 *                     for chunk in free_list:
 */
        __pyx_t_2 = (__pyx_v_free_list == ((PyObject*)Py_None));
        __pyx_t_11 = (__pyx_t_2 != 0);
        if (__pyx_t_11) {

          /* "cupy/cuda/memory.pyx":1032
 *                 for free_list in arena:
 *                     if free_list is None:
 *                         continue             # <<<<<<<<<<<<<<
 *                     for chunk in free_list:
 *                         size += chunk.size
 */
          goto __pyx_L8_continue;

          /* "cupy/cuda/memory.pyx":1031
 *             for arena in self._free.itervalues():
 *                 for free_list in arena:
 *                     if free_list is None:             # <<<<<<<<<<<<<<
 *                         continue
 *                     for chunk in free_list:
 */
        }

        /* "cupy/cuda/memory.pyx":1033
 *                     if free_list is None:
 *                         continue
 *                     for chunk in free_list:             # <<<<<<<<<<<<<<
 *                         size += chunk.size
 *         finally:
 */
        __pyx_t_12 = 0;
        __pyx_t_14 = __Pyx_set_iterator(__pyx_v_free_list, 1, (&__pyx_t_13), (&__pyx_t_7)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1033, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_XDECREF(__pyx_t_10);
        __pyx_t_10 = __pyx_t_14;
        __pyx_t_14 = 0;
        while (1) {
          __pyx_t_15 = __Pyx_set_iter_next(__pyx_t_10, __pyx_t_13, &__pyx_t_12, &__pyx_t_14, __pyx_t_7);
          if (unlikely(__pyx_t_15 == 0)) break;
          if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 1033, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(0, 1033, __pyx_L4_error)
          __Pyx_XDECREF_SET(__pyx_v_chunk, ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_14));
          __pyx_t_14 = 0;

          /* "cupy/cuda/memory.pyx":1034
 *                         continue
 *                     for chunk in free_list:
 *                         size += chunk.size             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)
 */
          __pyx_v_size = (__pyx_v_size + __pyx_v_chunk->size);
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "cupy/cuda/memory.pyx":1030
 *         try:
 *             for arena in self._free.itervalues():
 *                 for free_list in arena:             # <<<<<<<<<<<<<<
 *                     if free_list is None:
 *                         continue
 */
        __pyx_L8_continue:;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "cupy/cuda/memory.pyx":1036
 *                         size += chunk.size
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)             # <<<<<<<<<<<<<<
 *         return size
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_1 = __pyx_v_self->_free_lock;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_5 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        __pyx_t_1 = __pyx_v_self->_free_lock;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_15 = __pyx_f_9fastrlock_5rlock_unlock_fastrlock(__pyx_t_1); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1036, __pyx_L14_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      }
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
      __pyx_L14_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      }
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "cupy/cuda/memory.pyx":1037
 *         finally:
 *             rlock.unlock_fastrlock(self._free_lock)
 *         return size             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t total_bytes(self):
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1023
 *         return size
 * 
 *     cpdef size_t free_bytes(self):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 0
 *         cdef set free_list
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_WriteUnraisable("cupy.cuda.memory.SingleDeviceMemoryPool.free_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_free_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_chunk);
  __Pyx_XDECREF(__pyx_v_arena);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_21free_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_20free_bytes[] = "SingleDeviceMemoryPool.free_bytes(self) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_21free_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_20free_bytes(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_20free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("free_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_bytes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.free_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1039
 *         return size
 * 
 *     cpdef size_t total_bytes(self):             # <<<<<<<<<<<<<<
 *         return self.used_bytes() + self.free_bytes()
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_23total_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_bytes", 0);

  /* "cupy/cuda/memory.pyx":1040
 * 
 *     cpdef size_t total_bytes(self):
 *         return self.used_bytes() + self.free_bytes()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_used_bytes(__pyx_v_self, 0) + __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_bytes(__pyx_v_self, 0));
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1039
 *         return size
 * 
 *     cpdef size_t total_bytes(self):             # <<<<<<<<<<<<<<
 *         return self.used_bytes() + self.free_bytes()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_23total_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_22total_bytes[] = "SingleDeviceMemoryPool.total_bytes(self) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_23total_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_22total_bytes(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_22total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("total_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_total_bytes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.total_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":811
 *         object _free_lock
 *         object _in_use_lock
 *         readonly int _device_id             # <<<<<<<<<<<<<<
 * 
 *         # Map from stream pointer to its arena index.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10_device_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10_device_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10_device_id___get__(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10_device_id___get__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool._device_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_24__reduce_cython__[] = "SingleDeviceMemoryPool.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_24__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_24__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._allocator, self._device_id, self._flag, self._free, self._free_lock, self._in_use, self._in_use_lock, self._index, self._weakref)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_device_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___(__pyx_v_self->_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___(__pyx_v_self->_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->_allocator);
  __Pyx_GIVEREF(__pyx_v_self->_allocator);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_self->_allocator);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_free);
  __Pyx_GIVEREF(__pyx_v_self->_free);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_self->_free);
  __Pyx_INCREF(__pyx_v_self->_free_lock);
  __Pyx_GIVEREF(__pyx_v_self->_free_lock);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_v_self->_free_lock);
  __Pyx_INCREF(__pyx_v_self->_in_use);
  __Pyx_GIVEREF(__pyx_v_self->_in_use);
  PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_v_self->_in_use);
  __Pyx_INCREF(__pyx_v_self->_in_use_lock);
  __Pyx_GIVEREF(__pyx_v_self->_in_use_lock);
  PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_v_self->_in_use_lock);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->_weakref);
  __Pyx_GIVEREF(__pyx_v_self->_weakref);
  PyTuple_SET_ITEM(__pyx_t_4, 8, __pyx_v_self->_weakref);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._allocator, self._device_id, self._flag, self._free, self._free_lock, self._in_use, self._in_use_lock, self._index, self._weakref)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self._allocator, self._device_id, self._flag, self._free, self._free_lock, self._in_use, self._in_use_lock, self._index, self._weakref)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._allocator is not None or self._free is not None or self._free_lock is not None or self._in_use is not None or self._in_use_lock is not None or self._weakref is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._allocator, self._device_id, self._flag, self._free, self._free_lock, self._in_use, self._in_use_lock, self._index, self._weakref)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._allocator is not None or self._free is not None or self._free_lock is not None or self._in_use is not None or self._in_use_lock is not None or self._weakref is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, None), state
 */
  /*else*/ {
    __pyx_t_5 = (__pyx_v_self->_allocator != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->_free != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_self->_free_lock != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->_in_use != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_7 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_6 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_self->_in_use_lock != Py_None);
    __pyx_t_7 = (__pyx_t_5 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->_weakref != Py_None);
    __pyx_t_5 = (__pyx_t_7 != 0);
    __pyx_t_6 = __pyx_t_5;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._allocator is not None or self._free is not None or self._free_lock is not None or self._in_use is not None or self._in_use_lock is not None or self._weakref is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self._allocator is not None or self._free is not None or self._free_lock is not None or self._in_use is not None or self._in_use_lock is not None or self._weakref is not None
 *     if use_setstate:
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_SingleDeviceMemor); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_247866700);
    __Pyx_GIVEREF(__pyx_int_247866700);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_247866700);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._allocator is not None or self._free is not None or self._free_lock is not None or self._in_use is not None or self._in_use_lock is not None or self._weakref is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, None), state
 *     else:
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SingleDeviceMemoryPool__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_SingleDeviceMemor); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_247866700);
    __Pyx_GIVEREF(__pyx_int_247866700);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_247866700);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SingleDeviceMemoryPool__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_26__setstate_cython__[] = "SingleDeviceMemoryPool.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_26__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_26__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SingleDeviceMemoryPool__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_SingleDeviceMemoryPool__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SingleDeviceMemoryPool, (type(self), 0xec6254c, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SingleDeviceMemoryPool__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.SingleDeviceMemoryPool.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1071
 *     """
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._pools = collections.defaultdict(
 *             lambda: SingleDeviceMemoryPool(allocator))
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_10MemoryPool_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_10MemoryPool_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocator = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocator,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__5;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocator);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1071, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocator = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1071, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool___init__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self), __pyx_v_allocator);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1073
 *     def __init__(self, allocator=_malloc):
 *         self._pools = collections.defaultdict(
 *             lambda: SingleDeviceMemoryPool(allocator))             # <<<<<<<<<<<<<<
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_8__init___lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_10MemoryPool_8__init___lambda = {"lambda", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_8__init___lambda, METH_NOARGS, 0};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_8__init___lambda(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self) {
  struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *__pyx_cur_scope;
  struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_allocator)) { __Pyx_RaiseClosureNameError("allocator"); __PYX_ERR(0, 1073, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_SingleDeviceMemoryPool), __pyx_cur_scope->__pyx_v_allocator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.__init__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1071
 *     """
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._pools = collections.defaultdict(
 *             lambda: SingleDeviceMemoryPool(allocator))
 */

static int __pyx_pf_4cupy_4cuda_6memory_10MemoryPool___init__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, PyObject *__pyx_v_allocator) {
  struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *__pyx_cur_scope;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *)__pyx_tp_new_4cupy_4cuda_6memory___pyx_scope_struct____init__(__pyx_ptype_4cupy_4cuda_6memory___pyx_scope_struct____init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1071, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_allocator = __pyx_v_allocator;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_allocator);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_allocator);

  /* "cupy/cuda/memory.pyx":1072
 * 
 *     def __init__(self, allocator=_malloc):
 *         self._pools = collections.defaultdict(             # <<<<<<<<<<<<<<
 *             lambda: SingleDeviceMemoryPool(allocator))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_collections); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1073
 *     def __init__(self, allocator=_malloc):
 *         self._pools = collections.defaultdict(
 *             lambda: SingleDeviceMemoryPool(allocator))             # <<<<<<<<<<<<<<
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_10MemoryPool_8__init___lambda, 0, __pyx_n_s_init___locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_cupy_cuda_memory, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":1072
 * 
 *     def __init__(self, allocator=_malloc):
 *         self._pools = collections.defaultdict(             # <<<<<<<<<<<<<<
 *             lambda: SingleDeviceMemoryPool(allocator))
 * 
 */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_pools);
  __Pyx_DECREF(__pyx_v_self->_pools);
  __pyx_v_self->_pools = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":1071
 *     """
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._pools = collections.defaultdict(
 *             lambda: SingleDeviceMemoryPool(allocator))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1075
 *             lambda: SingleDeviceMemoryPool(allocator))
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         """Allocates the memory, from the pool if possible.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_3malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_10MemoryPool_malloc(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, size_t __pyx_v_size, int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_mp = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("malloc", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_malloc_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_3malloc)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 1075, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1095
 * 
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]             # <<<<<<<<<<<<<<
 *         return mp.malloc(size)
 * 
 */
  __pyx_t_6 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1095, __pyx_L1_error)
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_pools, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mp = ((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1096
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]
 *         return mp.malloc(size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef free_all_blocks(self, stream=None):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_malloc(__pyx_v_mp, __pyx_v_size, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1075
 *             lambda: SingleDeviceMemoryPool(allocator))
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         """Allocates the memory, from the pool if possible.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mp);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_3malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_2malloc[] = "MemoryPool.malloc(self, size_t size) -> MemoryPointer\nAllocates the memory, from the pool if possible.\n\n        This method can be used as a CuPy memory allocator. The simplest way to\n        use a memory pool as the default allocator is the following code::\n\n            set_allocator(MemoryPool().malloc)\n\n        Also, the way to use a memory pool of Managed memory (Unified memory)\n        as the default allocator is the following code::\n\n            set_allocator(MemoryPool(malloc_managed).malloc)\n\n        Args:\n            size (int): Size of the memory buffer to allocate in bytes.\n\n        Returns:\n            ~cupy.cuda.MemoryPointer: Pointer to the allocated buffer.\n\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_3malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("malloc (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1075, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_2malloc(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self), ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_2malloc(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("malloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_10MemoryPool_malloc(__pyx_v_self, __pyx_v_size, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1098
 *         return mp.malloc(size)
 * 
 *     cpdef free_all_blocks(self, stream=None):             # <<<<<<<<<<<<<<
 *         """Release free blocks.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_5free_all_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks *__pyx_optional_args) {
  PyObject *__pyx_v_stream = ((PyObject *)Py_None);
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_mp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks __pyx_t_6;
  __Pyx_RefNannySetupContext("free_all_blocks", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stream = __pyx_optional_args->stream;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_free_all_blocks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_5free_all_blocks)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_stream) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_stream);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1106
 *                 arenas.
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]             # <<<<<<<<<<<<<<
 *         mp.free_all_blocks(stream=stream)
 * 
 */
  __pyx_t_5 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_5 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1106, __pyx_L1_error)
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_pools, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mp = ((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1107
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]
 *         mp.free_all_blocks(stream=stream)             # <<<<<<<<<<<<<<
 * 
 *     cpdef free_all_free(self):
 */
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.stream = __pyx_v_stream;
  __pyx_t_2 = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks(__pyx_v_mp, 0, &__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1098
 *         return mp.malloc(size)
 * 
 *     cpdef free_all_blocks(self, stream=None):             # <<<<<<<<<<<<<<
 *         """Release free blocks.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.free_all_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_5free_all_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_4free_all_blocks[] = "MemoryPool.free_all_blocks(self, stream=None)\nRelease free blocks.\n\n        Args:\n            stream (cupy.cuda.Stream): Release free blocks in the arena\n                of the given stream. The default releases blocks in all\n                arenas.\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_5free_all_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_all_blocks (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stream,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "free_all_blocks") < 0)) __PYX_ERR(0, 1098, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_stream = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("free_all_blocks", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1098, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.free_all_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_4free_all_blocks(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self), __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_4free_all_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks __pyx_t_2;
  __Pyx_RefNannySetupContext("free_all_blocks", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.stream = __pyx_v_stream;
  __pyx_t_1 = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPool->free_all_blocks(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.free_all_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1109
 *         mp.free_all_blocks(stream=stream)
 * 
 *     cpdef free_all_free(self):             # <<<<<<<<<<<<<<
 *         """(Deprecated) Use :meth:`free_all_blocks` instead."""
 *         warnings.warn(
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_7free_all_free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("free_all_free", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_free_all_free); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_7free_all_free)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1111
 *     cpdef free_all_free(self):
 *         """(Deprecated) Use :meth:`free_all_blocks` instead."""
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":1113
 *         warnings.warn(
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.free_all_blocks()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":1114
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)
 *         self.free_all_blocks()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t n_free_blocks(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self->__pyx_vtab)->free_all_blocks(__pyx_v_self, 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":1109
 *         mp.free_all_blocks(stream=stream)
 * 
 *     cpdef free_all_free(self):             # <<<<<<<<<<<<<<
 *         """(Deprecated) Use :meth:`free_all_blocks` instead."""
 *         warnings.warn(
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.free_all_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_7free_all_free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_6free_all_free[] = "MemoryPool.free_all_free(self)\n(Deprecated) Use :meth:`free_all_blocks` instead.";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_7free_all_free(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_all_free (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_6free_all_free(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_6free_all_free(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("free_all_free", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_all_free(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.free_all_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1116
 *         self.free_all_blocks()
 * 
 *     cpdef size_t n_free_blocks(self):             # <<<<<<<<<<<<<<
 *         """Count the total number of free blocks.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_9n_free_blocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_mp = NULL;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("n_free_blocks", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_free_blocks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_9n_free_blocks)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1116, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1122
 *             int: The total number of free blocks.
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]             # <<<<<<<<<<<<<<
 *         return mp.n_free_blocks()
 * 
 */
  __pyx_t_6 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L1_error)
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_pools, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mp = ((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1123
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]
 *         return mp.n_free_blocks()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t used_bytes(self):
 */
  __pyx_r = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_n_free_blocks(__pyx_v_mp, 0);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1116
 *         self.free_all_blocks()
 * 
 *     cpdef size_t n_free_blocks(self):             # <<<<<<<<<<<<<<
 *         """Count the total number of free blocks.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cupy.cuda.memory.MemoryPool.n_free_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_9n_free_blocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_8n_free_blocks[] = "MemoryPool.n_free_blocks(self) -> size_t\nCount the total number of free blocks.\n\n        Returns:\n            int: The total number of free blocks.\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_9n_free_blocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("n_free_blocks (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_8n_free_blocks(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_8n_free_blocks(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("n_free_blocks", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_10MemoryPool_n_free_blocks(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.n_free_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1125
 *         return mp.n_free_blocks()
 * 
 *     cpdef size_t used_bytes(self):             # <<<<<<<<<<<<<<
 *         """Get the total number of bytes used.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_11used_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_mp = NULL;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("used_bytes", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_used_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_11used_bytes)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1125, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1131
 *             int: The total number of bytes used.
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]             # <<<<<<<<<<<<<<
 *         return mp.used_bytes()
 * 
 */
  __pyx_t_6 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1131, __pyx_L1_error)
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_pools, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mp = ((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1132
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]
 *         return mp.used_bytes()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t free_bytes(self):
 */
  __pyx_r = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_used_bytes(__pyx_v_mp, 0);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1125
 *         return mp.n_free_blocks()
 * 
 *     cpdef size_t used_bytes(self):             # <<<<<<<<<<<<<<
 *         """Get the total number of bytes used.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cupy.cuda.memory.MemoryPool.used_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_11used_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_10used_bytes[] = "MemoryPool.used_bytes(self) -> size_t\nGet the total number of bytes used.\n\n        Returns:\n            int: The total number of bytes used.\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_11used_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("used_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_10used_bytes(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_10used_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("used_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_10MemoryPool_used_bytes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.used_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1134
 *         return mp.used_bytes()
 * 
 *     cpdef size_t free_bytes(self):             # <<<<<<<<<<<<<<
 *         """Get the total number of bytes acquired but not used in the pool.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_13free_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_mp = NULL;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("free_bytes", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_free_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_13free_bytes)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1140
 *             int: The total number of bytes acquired but not used in the pool.
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]             # <<<<<<<<<<<<<<
 *         return mp.free_bytes()
 * 
 */
  __pyx_t_6 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1140, __pyx_L1_error)
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_pools, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mp = ((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1141
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]
 *         return mp.free_bytes()             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t total_bytes(self):
 */
  __pyx_r = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_bytes(__pyx_v_mp, 0);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1134
 *         return mp.used_bytes()
 * 
 *     cpdef size_t free_bytes(self):             # <<<<<<<<<<<<<<
 *         """Get the total number of bytes acquired but not used in the pool.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cupy.cuda.memory.MemoryPool.free_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_13free_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_12free_bytes[] = "MemoryPool.free_bytes(self) -> size_t\nGet the total number of bytes acquired but not used in the pool.\n\n        Returns:\n            int: The total number of bytes acquired but not used in the pool.\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_13free_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_12free_bytes(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_12free_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("free_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_bytes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.free_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1143
 *         return mp.free_bytes()
 * 
 *     cpdef size_t total_bytes(self):             # <<<<<<<<<<<<<<
 *         """Get the total number of bytes acquired in the pool.
 * 
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_15total_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory_10MemoryPool_total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v_mp = NULL;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("total_bytes", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_total_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_15total_bytes)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1143, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1149
 *             int: The total number of bytes acquired in the pool.
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]             # <<<<<<<<<<<<<<
 *         return mp.total_bytes()
 * 
 */
  __pyx_t_6 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1149, __pyx_L1_error)
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->_pools, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mp = ((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":1150
 *         """
 *         mp = <SingleDeviceMemoryPool>self._pools[device.get_device_id()]
 *         return mp.total_bytes()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_total_bytes(__pyx_v_mp, 0);
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1143
 *         return mp.free_bytes()
 * 
 *     cpdef size_t total_bytes(self):             # <<<<<<<<<<<<<<
 *         """Get the total number of bytes acquired in the pool.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cupy.cuda.memory.MemoryPool.total_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mp);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_15total_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_14total_bytes[] = "MemoryPool.total_bytes(self) -> size_t\nGet the total number of bytes acquired in the pool.\n\n        Returns:\n            int: The total number of bytes acquired in the pool.\n        ";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_15total_bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("total_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_14total_bytes(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_14total_bytes(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("total_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory_10MemoryPool_total_bytes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.total_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_16__reduce_cython__[] = "MemoryPool.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_16__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_16__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._pools,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->_pools);
  __Pyx_GIVEREF(__pyx_v_self->_pools);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->_pools);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._pools,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self._pools,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._pools is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._pools,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._pools is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->_pools != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._pools is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self._pools is not None
 *     if use_setstate:
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_MemoryPool); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_6736645);
    __Pyx_GIVEREF(__pyx_int_6736645);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_6736645);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._pools is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, None), state
 *     else:
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MemoryPool__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_MemoryPool); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_6736645);
    __Pyx_GIVEREF(__pyx_int_6736645);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_6736645);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MemoryPool__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_18__setstate_cython__[] = "MemoryPool.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_10MemoryPool_18__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_10MemoryPool_18__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MemoryPool__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPool__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MemoryPool, (type(self), 0x066cb05, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MemoryPool__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.MemoryPool.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1157
 * 
 * 
 * cpdef size_t _call_malloc(intptr_t param, intptr_t malloc_func,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t size, int device_id):
 *     return <size_t>((<malloc_func_type>malloc_func)(<void*>param, size,
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_17_call_malloc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static size_t __pyx_f_4cupy_4cuda_6memory__call_malloc(intptr_t __pyx_v_param, intptr_t __pyx_v_malloc_func, Py_ssize_t __pyx_v_size, int __pyx_v_device_id, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_call_malloc", 0);

  /* "cupy/cuda/memory.pyx":1159
 * cpdef size_t _call_malloc(intptr_t param, intptr_t malloc_func,
 *                           Py_ssize_t size, int device_id):
 *     return <size_t>((<malloc_func_type>malloc_func)(<void*>param, size,             # <<<<<<<<<<<<<<
 *                                                     device_id))
 * 
 */
  __pyx_r = ((size_t)((__pyx_t_4cupy_4cuda_6memory_malloc_func_type)__pyx_v_malloc_func)(((void *)__pyx_v_param), __pyx_v_size, __pyx_v_device_id));
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1157
 * 
 * 
 * cpdef size_t _call_malloc(intptr_t param, intptr_t malloc_func,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t size, int device_id):
 *     return <size_t>((<malloc_func_type>malloc_func)(<void*>param, size,
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_17_call_malloc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_16_call_malloc[] = "_call_malloc(intptr_t param, intptr_t malloc_func, Py_ssize_t size, int device_id) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_17_call_malloc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  intptr_t __pyx_v_param;
  intptr_t __pyx_v_malloc_func;
  Py_ssize_t __pyx_v_size;
  int __pyx_v_device_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_call_malloc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param,&__pyx_n_s_malloc_func,&__pyx_n_s_size,&__pyx_n_s_device_id,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_malloc_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_call_malloc", 1, 4, 4, 1); __PYX_ERR(0, 1157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_call_malloc", 1, 4, 4, 2); __PYX_ERR(0, 1157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_call_malloc", 1, 4, 4, 3); __PYX_ERR(0, 1157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_call_malloc") < 0)) __PYX_ERR(0, 1157, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_param = PyInt_AsSsize_t(values[0]); if (unlikely((__pyx_v_param == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
    __pyx_v_malloc_func = PyInt_AsSsize_t(values[1]); if (unlikely((__pyx_v_malloc_func == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyIndex_AsSsize_t(values[2]); if (unlikely((__pyx_v_size == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L3_error)
    __pyx_v_device_id = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_device_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_call_malloc", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._call_malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_16_call_malloc(__pyx_self, __pyx_v_param, __pyx_v_malloc_func, __pyx_v_size, __pyx_v_device_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_16_call_malloc(CYTHON_UNUSED PyObject *__pyx_self, intptr_t __pyx_v_param, intptr_t __pyx_v_malloc_func, Py_ssize_t __pyx_v_size, int __pyx_v_device_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_call_malloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_f_4cupy_4cuda_6memory__call_malloc(__pyx_v_param, __pyx_v_malloc_func, __pyx_v_size, __pyx_v_device_id, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._call_malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1163
 * 
 * 
 * cpdef void _call_free(intptr_t param, intptr_t free_func, intptr_t ptr,             # <<<<<<<<<<<<<<
 *                       int device_id):
 *     (<free_func_type>free_func)(<void*>param, <void*>ptr, device_id)
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_19_call_free(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static void __pyx_f_4cupy_4cuda_6memory__call_free(intptr_t __pyx_v_param, intptr_t __pyx_v_free_func, intptr_t __pyx_v_ptr, int __pyx_v_device_id, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_call_free", 0);

  /* "cupy/cuda/memory.pyx":1165
 * cpdef void _call_free(intptr_t param, intptr_t free_func, intptr_t ptr,
 *                       int device_id):
 *     (<free_func_type>free_func)(<void*>param, <void*>ptr, device_id)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((__pyx_t_4cupy_4cuda_6memory_free_func_type)__pyx_v_free_func)(((void *)__pyx_v_param), ((void *)__pyx_v_ptr), __pyx_v_device_id);

  /* "cupy/cuda/memory.pyx":1163
 * 
 * 
 * cpdef void _call_free(intptr_t param, intptr_t free_func, intptr_t ptr,             # <<<<<<<<<<<<<<
 *                       int device_id):
 *     (<free_func_type>free_func)(<void*>param, <void*>ptr, device_id)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_19_call_free(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_18_call_free[] = "_call_free(intptr_t param, intptr_t free_func, intptr_t ptr, int device_id) -> void";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_19_call_free(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  intptr_t __pyx_v_param;
  intptr_t __pyx_v_free_func;
  intptr_t __pyx_v_ptr;
  int __pyx_v_device_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_call_free (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param,&__pyx_n_s_free_func,&__pyx_n_s_ptr,&__pyx_n_s_device_id,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_free_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_call_free", 1, 4, 4, 1); __PYX_ERR(0, 1163, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_call_free", 1, 4, 4, 2); __PYX_ERR(0, 1163, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_call_free", 1, 4, 4, 3); __PYX_ERR(0, 1163, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_call_free") < 0)) __PYX_ERR(0, 1163, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_param = PyInt_AsSsize_t(values[0]); if (unlikely((__pyx_v_param == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1163, __pyx_L3_error)
    __pyx_v_free_func = PyInt_AsSsize_t(values[1]); if (unlikely((__pyx_v_free_func == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1163, __pyx_L3_error)
    __pyx_v_ptr = PyInt_AsSsize_t(values[2]); if (unlikely((__pyx_v_ptr == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1163, __pyx_L3_error)
    __pyx_v_device_id = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_device_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1164, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_call_free", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1163, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory._call_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_18_call_free(__pyx_self, __pyx_v_param, __pyx_v_free_func, __pyx_v_ptr, __pyx_v_device_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_18_call_free(CYTHON_UNUSED PyObject *__pyx_self, intptr_t __pyx_v_param, intptr_t __pyx_v_free_func, intptr_t __pyx_v_ptr, int __pyx_v_device_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_call_free", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_4cupy_4cuda_6memory__call_free(__pyx_v_param, __pyx_v_free_func, __pyx_v_ptr, __pyx_v_device_id, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory._call_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1171
 * cdef class CFunctionAllocatorMemory(BaseMemory):
 * 
 *     def __init__(self, size_t size, intptr_t param,             # <<<<<<<<<<<<<<
 *                  intptr_t malloc_func, intptr_t free_func,
 *                  int device_id):
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_size;
  intptr_t __pyx_v_param;
  intptr_t __pyx_v_malloc_func;
  intptr_t __pyx_v_free_func;
  int __pyx_v_device_id;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,&__pyx_n_s_param,&__pyx_n_s_malloc_func,&__pyx_n_s_free_func,&__pyx_n_s_device_id,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); __PYX_ERR(0, 1171, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_malloc_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); __PYX_ERR(0, 1171, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_free_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); __PYX_ERR(0, 1171, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_device_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); __PYX_ERR(0, 1171, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1171, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_size = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1171, __pyx_L3_error)
    __pyx_v_param = PyInt_AsSsize_t(values[1]); if (unlikely((__pyx_v_param == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1171, __pyx_L3_error)
    __pyx_v_malloc_func = PyInt_AsSsize_t(values[2]); if (unlikely((__pyx_v_malloc_func == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1172, __pyx_L3_error)
    __pyx_v_free_func = PyInt_AsSsize_t(values[3]); if (unlikely((__pyx_v_free_func == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1172, __pyx_L3_error)
    __pyx_v_device_id = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_device_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1173, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1171, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocatorMemory.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory___init__(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *)__pyx_v_self), __pyx_v_size, __pyx_v_param, __pyx_v_malloc_func, __pyx_v_free_func, __pyx_v_device_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory___init__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self, size_t __pyx_v_size, intptr_t __pyx_v_param, intptr_t __pyx_v_malloc_func, intptr_t __pyx_v_free_func, int __pyx_v_device_id) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":1174
 *                  intptr_t malloc_func, intptr_t free_func,
 *                  int device_id):
 *         self._param = param             # <<<<<<<<<<<<<<
 *         self._free_func = free_func
 *         self.device_id = device_id
 */
  __pyx_v_self->_param = __pyx_v_param;

  /* "cupy/cuda/memory.pyx":1175
 *                  int device_id):
 *         self._param = param
 *         self._free_func = free_func             # <<<<<<<<<<<<<<
 *         self.device_id = device_id
 *         self.size = size
 */
  __pyx_v_self->_free_func = __pyx_v_free_func;

  /* "cupy/cuda/memory.pyx":1176
 *         self._param = param
 *         self._free_func = free_func
 *         self.device_id = device_id             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.ptr = 0
 */
  __pyx_v_self->__pyx_base.device_id = __pyx_v_device_id;

  /* "cupy/cuda/memory.pyx":1177
 *         self._free_func = free_func
 *         self.device_id = device_id
 *         self.size = size             # <<<<<<<<<<<<<<
 *         self.ptr = 0
 *         if size > 0:
 */
  __pyx_v_self->__pyx_base.size = __pyx_v_size;

  /* "cupy/cuda/memory.pyx":1178
 *         self.device_id = device_id
 *         self.size = size
 *         self.ptr = 0             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             self.ptr = _call_malloc(param, malloc_func, size, device_id)
 */
  __pyx_v_self->__pyx_base.ptr = 0;

  /* "cupy/cuda/memory.pyx":1179
 *         self.size = size
 *         self.ptr = 0
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             self.ptr = _call_malloc(param, malloc_func, size, device_id)
 * 
 */
  __pyx_t_1 = ((__pyx_v_size > 0) != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":1180
 *         self.ptr = 0
 *         if size > 0:
 *             self.ptr = _call_malloc(param, malloc_func, size, device_id)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.ptr = __pyx_f_4cupy_4cuda_6memory__call_malloc(__pyx_v_param, __pyx_v_malloc_func, __pyx_v_size, __pyx_v_device_id, 0);

    /* "cupy/cuda/memory.pyx":1179
 *         self.size = size
 *         self.ptr = 0
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             self.ptr = _call_malloc(param, malloc_func, size, device_id)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":1171
 * cdef class CFunctionAllocatorMemory(BaseMemory):
 * 
 *     def __init__(self, size_t size, intptr_t param,             # <<<<<<<<<<<<<<
 *                  intptr_t malloc_func, intptr_t free_func,
 *                  int device_id):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1182
 *             self.ptr = _call_malloc(param, malloc_func, size, device_id)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr:
 *             _call_free(self._param, self._free_func, self.ptr, self.device_id)
 */

/* Python wrapper */
static void __pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_2__dealloc__(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_2__dealloc__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cupy/cuda/memory.pyx":1183
 * 
 *     def __dealloc__(self):
 *         if self.ptr:             # <<<<<<<<<<<<<<
 *             _call_free(self._param, self._free_func, self.ptr, self.device_id)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.ptr != 0);
  if (__pyx_t_1) {

    /* "cupy/cuda/memory.pyx":1184
 *     def __dealloc__(self):
 *         if self.ptr:
 *             _call_free(self._param, self._free_func, self.ptr, self.device_id)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_f_4cupy_4cuda_6memory__call_free(__pyx_v_self->_param, __pyx_v_self->_free_func, __pyx_v_self->__pyx_base.ptr, __pyx_v_self->__pyx_base.device_id, 0);

    /* "cupy/cuda/memory.pyx":1183
 * 
 *     def __dealloc__(self):
 *         if self.ptr:             # <<<<<<<<<<<<<<
 *             _call_free(self._param, self._free_func, self.ptr, self.device_id)
 * 
 */
  }

  /* "cupy/cuda/memory.pyx":1182
 *             self.ptr = _call_malloc(param, malloc_func, size, device_id)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr:
 *             _call_free(self._param, self._free_func, self.ptr, self.device_id)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_4__reduce_cython__[] = "CFunctionAllocatorMemory.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_4__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_4__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._free_func, self._param, self.device_id, self.ptr, self.size)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->_free_func); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->_param); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.device_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_self->__pyx_base.ptr); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.size); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._free_func, self._param, self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_6 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v__dict = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "(tree fragment)":7
 *     state = (self._free_func, self._param, self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_7 = (__pyx_v__dict != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v__dict);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._free_func, self._param, self.device_id, self.ptr, self.size)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, None), state
 *     else:
 */
  __pyx_t_8 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_CFunctionAllocato); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_262405472);
    __Pyx_GIVEREF(__pyx_int_262405472);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_262405472);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_6, 2, Py_None);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, None), state
 *     else:
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CFunctionAllocatorMemory__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_CFunctionAllocato); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_262405472);
    __Pyx_GIVEREF(__pyx_int_262405472);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_262405472);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocatorMemory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CFunctionAllocatorMemory__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_6__setstate_cython__[] = "CFunctionAllocatorMemory.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_6__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_6__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CFunctionAllocatorMemory__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocatorMemory__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CFunctionAllocatorMemory, (type(self), 0xfa3fd60, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CFunctionAllocatorMemory__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocatorMemory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1215
 *     """
 * 
 *     def __init__(self, intptr_t param, intptr_t malloc_func,             # <<<<<<<<<<<<<<
 *                  intptr_t free_func, object owner):
 *         self._param = param
 */

/* Python wrapper */
static int __pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  intptr_t __pyx_v_param;
  intptr_t __pyx_v_malloc_func;
  intptr_t __pyx_v_free_func;
  PyObject *__pyx_v_owner = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_param,&__pyx_n_s_malloc_func,&__pyx_n_s_free_func,&__pyx_n_s_owner,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_param)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_malloc_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 1215, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_free_func)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 1215, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_owner)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 1215, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1215, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_param = PyInt_AsSsize_t(values[0]); if (unlikely((__pyx_v_param == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1215, __pyx_L3_error)
    __pyx_v_malloc_func = PyInt_AsSsize_t(values[1]); if (unlikely((__pyx_v_malloc_func == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1215, __pyx_L3_error)
    __pyx_v_free_func = PyInt_AsSsize_t(values[2]); if (unlikely((__pyx_v_free_func == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L3_error)
    __pyx_v_owner = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1215, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator___init__(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)__pyx_v_self), __pyx_v_param, __pyx_v_malloc_func, __pyx_v_free_func, __pyx_v_owner);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator___init__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, intptr_t __pyx_v_param, intptr_t __pyx_v_malloc_func, intptr_t __pyx_v_free_func, PyObject *__pyx_v_owner) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/memory.pyx":1217
 *     def __init__(self, intptr_t param, intptr_t malloc_func,
 *                  intptr_t free_func, object owner):
 *         self._param = param             # <<<<<<<<<<<<<<
 *         self._malloc_func = malloc_func
 *         self._free_func = free_func
 */
  __pyx_v_self->_param = __pyx_v_param;

  /* "cupy/cuda/memory.pyx":1218
 *                  intptr_t free_func, object owner):
 *         self._param = param
 *         self._malloc_func = malloc_func             # <<<<<<<<<<<<<<
 *         self._free_func = free_func
 *         self._owner = owner
 */
  __pyx_v_self->_malloc_func = __pyx_v_malloc_func;

  /* "cupy/cuda/memory.pyx":1219
 *         self._param = param
 *         self._malloc_func = malloc_func
 *         self._free_func = free_func             # <<<<<<<<<<<<<<
 *         self._owner = owner
 * 
 */
  __pyx_v_self->_free_func = __pyx_v_free_func;

  /* "cupy/cuda/memory.pyx":1220
 *         self._malloc_func = malloc_func
 *         self._free_func = free_func
 *         self._owner = owner             # <<<<<<<<<<<<<<
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):
 */
  __Pyx_INCREF(__pyx_v_owner);
  __Pyx_GIVEREF(__pyx_v_owner);
  __Pyx_GOTREF(__pyx_v_self->_owner);
  __Pyx_DECREF(__pyx_v_self->_owner);
  __pyx_v_self->_owner = __pyx_v_owner;

  /* "cupy/cuda/memory.pyx":1215
 *     """
 * 
 *     def __init__(self, intptr_t param, intptr_t malloc_func,             # <<<<<<<<<<<<<<
 *                  intptr_t free_func, object owner):
 *         self._param = param
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/memory.pyx":1222
 *         self._owner = owner
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         mem = CFunctionAllocatorMemory(size, self._param, self._malloc_func,
 *                                        self._free_func, device.get_device_id())
 */

static PyObject *__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_3malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_f_4cupy_4cuda_6memory_18CFunctionAllocator_malloc(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, size_t __pyx_v_size, int __pyx_skip_dispatch) {
  struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v_mem = NULL;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("malloc", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_malloc_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_3malloc)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer))))) __PYX_ERR(0, 1222, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cupy/cuda/memory.pyx":1223
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):
 *         mem = CFunctionAllocatorMemory(size, self._param, self._malloc_func,             # <<<<<<<<<<<<<<
 *                                        self._free_func, device.get_device_id())
 *         return MemoryPointer(mem, 0)
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->_param); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_self->_malloc_func); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "cupy/cuda/memory.pyx":1224
 *     cpdef MemoryPointer malloc(self, size_t size):
 *         mem = CFunctionAllocatorMemory(size, self._param, self._malloc_func,
 *                                        self._free_func, device.get_device_id())             # <<<<<<<<<<<<<<
 *         return MemoryPointer(mem, 0)
 */
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_self->_free_func); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_f_4cupy_4cuda_6device_get_device_id(0); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "cupy/cuda/memory.pyx":1223
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):
 *         mem = CFunctionAllocatorMemory(size, self._param, self._malloc_func,             # <<<<<<<<<<<<<<
 *                                        self._free_func, device.get_device_id())
 *         return MemoryPointer(mem, 0)
 */
  __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_CFunctionAllocatorMemory), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_mem = ((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cupy/cuda/memory.pyx":1225
 *         mem = CFunctionAllocatorMemory(size, self._param, self._malloc_func,
 *                                        self._free_func, device.get_device_id())
 *         return MemoryPointer(mem, 0)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_mem));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_mem));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_mem));
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer), __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cupy/cuda/memory.pyx":1222
 *         self._owner = owner
 * 
 *     cpdef MemoryPointer malloc(self, size_t size):             # <<<<<<<<<<<<<<
 *         mem = CFunctionAllocatorMemory(size, self._param, self._malloc_func,
 *                                        self._free_func, device.get_device_id())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocator.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mem);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_3malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_18CFunctionAllocator_2malloc[] = "CFunctionAllocator.malloc(self, size_t size) -> MemoryPointer";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_3malloc(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("malloc (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_size_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1222, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocator.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_2malloc(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)__pyx_v_self), ((size_t)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_2malloc(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, size_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("malloc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4cupy_4cuda_6memory_18CFunctionAllocator_malloc(__pyx_v_self, __pyx_v_size, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocator.malloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_18CFunctionAllocator_4__reduce_cython__[] = "CFunctionAllocator.__reduce_cython__(self)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_4__reduce_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_4__reduce_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._free_func, self._malloc_func, self._owner, self._param)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->_free_func); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->_malloc_func); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_self->_param); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_owner);
  __Pyx_GIVEREF(__pyx_v_self->_owner);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_self->_owner);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._free_func, self._malloc_func, self._owner, self._param)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_4 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v__dict = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":7
 *     state = (self._free_func, self._malloc_func, self._owner, self._param)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_5 = (__pyx_v__dict != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v__dict);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._free_func, self._malloc_func, self._owner, self._param)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, None), state
 */
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->_owner != Py_None);
    __pyx_v_use_setstate = __pyx_t_6;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, None), state
 *     else:
 */
  __pyx_t_6 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":13
 *         use_setstate = self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_CFunctionAllocato_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_216866913);
    __Pyx_GIVEREF(__pyx_int_216866913);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_216866913);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 2, Py_None);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, None), state
 *     else:
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CFunctionAllocator__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyx_unpickle_CFunctionAllocato_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_216866913);
    __Pyx_GIVEREF(__pyx_int_216866913);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_216866913);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CFunctionAllocator__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_18CFunctionAllocator_6__setstate_cython__[] = "CFunctionAllocator.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_6__setstate_cython__(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_18CFunctionAllocator_6__setstate_cython__(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_CFunctionAllocator__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocator__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_CFunctionAllocator, (type(self), 0xced2061, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_CFunctionAllocator__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.memory.CFunctionAllocator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BaseMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_21__pyx_unpickle_BaseMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_20__pyx_unpickle_BaseMemory[] = "__pyx_unpickle_BaseMemory(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_21__pyx_unpickle_BaseMemory = {"__pyx_unpickle_BaseMemory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_21__pyx_unpickle_BaseMemory, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_20__pyx_unpickle_BaseMemory};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_21__pyx_unpickle_BaseMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseMemory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseMemory", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseMemory", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_BaseMemory") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseMemory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_BaseMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_20__pyx_unpickle_BaseMemory(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_20__pyx_unpickle_BaseMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseMemory", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xeeb5490) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = BaseMemory.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xeeb5490:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = BaseMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xee, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = BaseMemory.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_BaseMemory), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = BaseMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = BaseMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_BaseMemory__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = BaseMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_BaseMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_BaseMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseMemory__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->device_id = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ptr = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->size = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 3) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_BaseMemory__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Memory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_23__pyx_unpickle_Memory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_22__pyx_unpickle_Memory[] = "__pyx_unpickle_Memory(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_23__pyx_unpickle_Memory = {"__pyx_unpickle_Memory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_23__pyx_unpickle_Memory, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_22__pyx_unpickle_Memory};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_23__pyx_unpickle_Memory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Memory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Memory", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Memory", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Memory") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Memory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_Memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_22__pyx_unpickle_Memory(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_22__pyx_unpickle_Memory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Memory", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xeeb5490) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = Memory.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xeeb5490:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Memory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xee, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = Memory.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Memory__set_state(<Memory> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_Memory), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = Memory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Memory__set_state(<Memory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Memory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Memory__set_state(<Memory> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Memory__set_state(Memory __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_Memory__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_Memory *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = Memory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Memory__set_state(<Memory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Memory__set_state(<Memory> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Memory__set_state(Memory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Memory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_Memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Memory__set_state(<Memory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Memory__set_state(Memory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_Memory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_Memory *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Memory__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Memory__set_state(Memory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.device_id = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ptr = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.size = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Memory__set_state(Memory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 3) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Memory__set_state(Memory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Memory__set_state(<Memory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Memory__set_state(Memory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_Memory__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_UnownedMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_25__pyx_unpickle_UnownedMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_24__pyx_unpickle_UnownedMemory[] = "__pyx_unpickle_UnownedMemory(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_25__pyx_unpickle_UnownedMemory = {"__pyx_unpickle_UnownedMemory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_25__pyx_unpickle_UnownedMemory, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_24__pyx_unpickle_UnownedMemory};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_25__pyx_unpickle_UnownedMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_UnownedMemory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UnownedMemory", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UnownedMemory", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_UnownedMemory") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_UnownedMemory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_UnownedMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_24__pyx_unpickle_UnownedMemory(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_24__pyx_unpickle_UnownedMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_UnownedMemory", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x383c807:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x383c807) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x383c807:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = UnownedMemory.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x383c807:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = UnownedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x38, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x383c807:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = UnownedMemory.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_UnownedMemory), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = UnownedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = UnownedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_UnownedMemory__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x383c807 = (_owner, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = UnownedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_UnownedMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_UnownedMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_UnownedMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_UnownedMemory__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_owner);
  __Pyx_DECREF(__pyx_v___pyx_result->_owner);
  __pyx_v___pyx_result->_owner = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.device_id = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ptr = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.size = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 4) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_UnownedMemory__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ManagedMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_27__pyx_unpickle_ManagedMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_26__pyx_unpickle_ManagedMemory[] = "__pyx_unpickle_ManagedMemory(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_27__pyx_unpickle_ManagedMemory = {"__pyx_unpickle_ManagedMemory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_27__pyx_unpickle_ManagedMemory, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_26__pyx_unpickle_ManagedMemory};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_27__pyx_unpickle_ManagedMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ManagedMemory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ManagedMemory", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ManagedMemory", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ManagedMemory") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ManagedMemory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_ManagedMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_26__pyx_unpickle_ManagedMemory(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_26__pyx_unpickle_ManagedMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ManagedMemory", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xeeb5490) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = ManagedMemory.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xeeb5490:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ManagedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xee, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xeeb5490:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = ManagedMemory.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ManagedMemory__set_state(<ManagedMemory> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_ManagedMemory), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = ManagedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ManagedMemory__set_state(<ManagedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = ManagedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ManagedMemory__set_state(<ManagedMemory> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ManagedMemory__set_state(ManagedMemory __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_ManagedMemory__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xeeb5490 = (device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = ManagedMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ManagedMemory__set_state(<ManagedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ManagedMemory__set_state(<ManagedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ManagedMemory__set_state(ManagedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ManagedMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_ManagedMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ManagedMemory__set_state(<ManagedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ManagedMemory__set_state(ManagedMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_ManagedMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ManagedMemory__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ManagedMemory__set_state(ManagedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.device_id = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ptr = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.size = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ManagedMemory__set_state(ManagedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 3) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ManagedMemory__set_state(ManagedMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ManagedMemory__set_state(<ManagedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ManagedMemory__set_state(ManagedMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_ManagedMemory__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle__Chunk(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_29__pyx_unpickle__Chunk(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_28__pyx_unpickle__Chunk[] = "__pyx_unpickle__Chunk(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_29__pyx_unpickle__Chunk = {"__pyx_unpickle__Chunk", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_29__pyx_unpickle__Chunk, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_28__pyx_unpickle__Chunk};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_29__pyx_unpickle__Chunk(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle__Chunk (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__Chunk", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__Chunk", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle__Chunk") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle__Chunk", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle__Chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_28__pyx_unpickle__Chunk(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_28__pyx_unpickle__Chunk(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle__Chunk", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x786f073:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x786f073) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x786f073:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))" % __pyx_checksum)
 *     __pyx_result = _Chunk.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x786f073:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = _Chunk.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x78, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x786f073:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))" % __pyx_checksum)
 *     __pyx_result = _Chunk.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory__Chunk), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))" % __pyx_checksum)
 *     __pyx_result = _Chunk.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = _Chunk.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle__Chunk__set_state(((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x786f073 = (mem, next, offset, prev, size, stream_ptr))" % __pyx_checksum)
 *     __pyx_result = _Chunk.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle__Chunk(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle__Chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle__Chunk__set_state(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ptrdiff_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle__Chunk__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cupy_4cuda_6memory_BaseMemory))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->mem));
  __pyx_v___pyx_result->mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->next);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->next));
  __pyx_v___pyx_result->next = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_ptrdiff_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (ptrdiff_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->offset = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cupy_4cuda_6memory__Chunk))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->prev);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->prev));
  __pyx_v___pyx_result->prev = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->size = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->stream_ptr = __pyx_t_3;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 6) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[6])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[6])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle__Chunk__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_MemoryPointer(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_31__pyx_unpickle_MemoryPointer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_30__pyx_unpickle_MemoryPointer[] = "__pyx_unpickle_MemoryPointer(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_31__pyx_unpickle_MemoryPointer = {"__pyx_unpickle_MemoryPointer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_31__pyx_unpickle_MemoryPointer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_30__pyx_unpickle_MemoryPointer};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_31__pyx_unpickle_MemoryPointer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_MemoryPointer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MemoryPointer", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MemoryPointer", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_MemoryPointer") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MemoryPointer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_MemoryPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_30__pyx_unpickle_MemoryPointer(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_30__pyx_unpickle_MemoryPointer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MemoryPointer", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x80a7757:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x80a7757) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x80a7757:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))" % __pyx_checksum)
 *     __pyx_result = MemoryPointer.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x80a7757:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = MemoryPointer.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x80, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x80a7757:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))" % __pyx_checksum)
 *     __pyx_result = MemoryPointer.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MemoryPointer__set_state(<MemoryPointer> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPointer), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))" % __pyx_checksum)
 *     __pyx_result = MemoryPointer.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MemoryPointer__set_state(<MemoryPointer> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = MemoryPointer.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MemoryPointer__set_state(<MemoryPointer> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPointer__set_state(MemoryPointer __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPointer__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x80a7757 = (device_id, mem, ptr))" % __pyx_checksum)
 *     __pyx_result = MemoryPointer.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MemoryPointer__set_state(<MemoryPointer> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MemoryPointer__set_state(<MemoryPointer> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_MemoryPointer__set_state(MemoryPointer __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.mem = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MemoryPointer(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_MemoryPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_MemoryPointer__set_state(<MemoryPointer> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPointer__set_state(MemoryPointer __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.mem = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPointer__set_state(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MemoryPointer__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPointer__set_state(MemoryPointer __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.mem = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->device_id = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cupy_4cuda_6memory_BaseMemory))))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->mem));
  __pyx_v___pyx_result->mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ptr = __pyx_t_3;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_MemoryPointer__set_state(MemoryPointer __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.mem = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 3) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "(tree fragment)":14
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.mem = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_MemoryPointer__set_state(MemoryPointer __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.mem = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_MemoryPointer__set_state(<MemoryPointer> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPointer__set_state(MemoryPointer __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.mem = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_MemoryPointer__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PooledMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_33__pyx_unpickle_PooledMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_32__pyx_unpickle_PooledMemory[] = "__pyx_unpickle_PooledMemory(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_33__pyx_unpickle_PooledMemory = {"__pyx_unpickle_PooledMemory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_33__pyx_unpickle_PooledMemory, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_32__pyx_unpickle_PooledMemory};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_33__pyx_unpickle_PooledMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PooledMemory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PooledMemory", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PooledMemory", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PooledMemory") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PooledMemory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_PooledMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_32__pyx_unpickle_PooledMemory(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_32__pyx_unpickle_PooledMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PooledMemory", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1f81e93:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x1f81e93) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1f81e93:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))" % __pyx_checksum)
 *     __pyx_result = PooledMemory.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x1f81e93:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PooledMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x1f, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x1f81e93:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))" % __pyx_checksum)
 *     __pyx_result = PooledMemory.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_PooledMemory), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))" % __pyx_checksum)
 *     __pyx_result = PooledMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PooledMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_PooledMemory__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x1f81e93 = (device_id, pool, ptr, size))" % __pyx_checksum)
 *     __pyx_result = PooledMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PooledMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_PooledMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_PooledMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  intptr_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PooledMemory__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.device_id = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->pool);
  __Pyx_DECREF(__pyx_v___pyx_result->pool);
  __pyx_v___pyx_result->pool = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ptr = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.size = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 4) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_PooledMemory__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_SingleDeviceMemoryPool(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_35__pyx_unpickle_SingleDeviceMemoryPool(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_34__pyx_unpickle_SingleDeviceMemoryPool[] = "__pyx_unpickle_SingleDeviceMemoryPool(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_35__pyx_unpickle_SingleDeviceMemoryPool = {"__pyx_unpickle_SingleDeviceMemoryPool", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_35__pyx_unpickle_SingleDeviceMemoryPool, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_34__pyx_unpickle_SingleDeviceMemoryPool};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_35__pyx_unpickle_SingleDeviceMemoryPool(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_SingleDeviceMemoryPool (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SingleDeviceMemoryPool", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SingleDeviceMemoryPool", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_SingleDeviceMemoryPool") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SingleDeviceMemoryPool", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_SingleDeviceMemoryPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_34__pyx_unpickle_SingleDeviceMemoryPool(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_34__pyx_unpickle_SingleDeviceMemoryPool(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SingleDeviceMemoryPool", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xec6254c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xec6254c) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xec6254c:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))" % __pyx_checksum)
 *     __pyx_result = SingleDeviceMemoryPool.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xec6254c:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = SingleDeviceMemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xec, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xec6254c:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))" % __pyx_checksum)
 *     __pyx_result = SingleDeviceMemoryPool.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SingleDeviceMemoryPool__set_state(<SingleDeviceMemoryPool> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_SingleDeviceMemoryPool), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))" % __pyx_checksum)
 *     __pyx_result = SingleDeviceMemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SingleDeviceMemoryPool__set_state(<SingleDeviceMemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = SingleDeviceMemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SingleDeviceMemoryPool__set_state(<SingleDeviceMemoryPool> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_SingleDeviceMemoryPool__set_state(SingleDeviceMemoryPool __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_SingleDeviceMemoryPool__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xec6254c = (_allocator, _device_id, _flag, _free, _free_lock, _in_use, _in_use_lock, _index, _weakref))" % __pyx_checksum)
 *     __pyx_result = SingleDeviceMemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SingleDeviceMemoryPool__set_state(<SingleDeviceMemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SingleDeviceMemoryPool__set_state(<SingleDeviceMemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_SingleDeviceMemoryPool__set_state(SingleDeviceMemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._allocator = __pyx_state[0]; __pyx_result._device_id = __pyx_state[1]; __pyx_result._flag = __pyx_state[2]; __pyx_result._free = __pyx_state[3]; __pyx_result._free_lock = __pyx_state[4]; __pyx_result._in_use = __pyx_state[5]; __pyx_result._in_use_lock = __pyx_state[6]; __pyx_result._index = __pyx_state[7]; __pyx_result._weakref = __pyx_state[8]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SingleDeviceMemoryPool(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_SingleDeviceMemoryPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_SingleDeviceMemoryPool__set_state(<SingleDeviceMemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SingleDeviceMemoryPool__set_state(SingleDeviceMemoryPool __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._allocator = __pyx_state[0]; __pyx_result._device_id = __pyx_state[1]; __pyx_result._flag = __pyx_state[2]; __pyx_result._free = __pyx_state[3]; __pyx_result._free_lock = __pyx_state[4]; __pyx_result._in_use = __pyx_state[5]; __pyx_result._in_use_lock = __pyx_state[6]; __pyx_result._index = __pyx_state[7]; __pyx_result._weakref = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_SingleDeviceMemoryPool__set_state(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::map<size_t,std::vector<int8_t> >  __pyx_t_3;
  std::map<size_t,std::vector<size_t> >  __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SingleDeviceMemoryPool__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_SingleDeviceMemoryPool__set_state(SingleDeviceMemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._allocator = __pyx_state[0]; __pyx_result._device_id = __pyx_state[1]; __pyx_result._flag = __pyx_state[2]; __pyx_result._free = __pyx_state[3]; __pyx_result._free_lock = __pyx_state[4]; __pyx_result._in_use = __pyx_state[5]; __pyx_result._in_use_lock = __pyx_state[6]; __pyx_result._index = __pyx_state[7]; __pyx_result._weakref = __pyx_state[8]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_allocator);
  __Pyx_DECREF(__pyx_v___pyx_result->_allocator);
  __pyx_v___pyx_result->_allocator = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_device_id = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_flag = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_free);
  __Pyx_DECREF(__pyx_v___pyx_result->_free);
  __pyx_v___pyx_result->_free = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_free_lock);
  __Pyx_DECREF(__pyx_v___pyx_result->_free_lock);
  __pyx_v___pyx_result->_free_lock = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_in_use);
  __Pyx_DECREF(__pyx_v___pyx_result->_in_use);
  __pyx_v___pyx_result->_in_use = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_in_use_lock);
  __Pyx_DECREF(__pyx_v___pyx_result->_in_use_lock);
  __pyx_v___pyx_result->_in_use_lock = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_index = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_weakref);
  __Pyx_DECREF(__pyx_v___pyx_result->_weakref);
  __pyx_v___pyx_result->_weakref = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_SingleDeviceMemoryPool__set_state(SingleDeviceMemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._allocator = __pyx_state[0]; __pyx_result._device_id = __pyx_state[1]; __pyx_result._flag = __pyx_state[2]; __pyx_result._free = __pyx_state[3]; __pyx_result._free_lock = __pyx_state[4]; __pyx_result._in_use = __pyx_state[5]; __pyx_result._in_use_lock = __pyx_state[6]; __pyx_result._index = __pyx_state[7]; __pyx_result._weakref = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 9) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result._allocator = __pyx_state[0]; __pyx_result._device_id = __pyx_state[1]; __pyx_result._flag = __pyx_state[2]; __pyx_result._free = __pyx_state[3]; __pyx_result._free_lock = __pyx_state[4]; __pyx_result._in_use = __pyx_state[5]; __pyx_result._in_use_lock = __pyx_state[6]; __pyx_result._index = __pyx_state[7]; __pyx_result._weakref = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[9])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_SingleDeviceMemoryPool__set_state(SingleDeviceMemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._allocator = __pyx_state[0]; __pyx_result._device_id = __pyx_state[1]; __pyx_result._flag = __pyx_state[2]; __pyx_result._free = __pyx_state[3]; __pyx_result._free_lock = __pyx_state[4]; __pyx_result._in_use = __pyx_state[5]; __pyx_result._in_use_lock = __pyx_state[6]; __pyx_result._index = __pyx_state[7]; __pyx_result._weakref = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[9])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_SingleDeviceMemoryPool__set_state(<SingleDeviceMemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SingleDeviceMemoryPool__set_state(SingleDeviceMemoryPool __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._allocator = __pyx_state[0]; __pyx_result._device_id = __pyx_state[1]; __pyx_result._flag = __pyx_state[2]; __pyx_result._free = __pyx_state[3]; __pyx_result._free_lock = __pyx_state[4]; __pyx_result._in_use = __pyx_state[5]; __pyx_result._in_use_lock = __pyx_state[6]; __pyx_result._index = __pyx_state[7]; __pyx_result._weakref = __pyx_state[8]
 *     if len(__pyx_state) > 9 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_SingleDeviceMemoryPool__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_MemoryPool(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_37__pyx_unpickle_MemoryPool(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_36__pyx_unpickle_MemoryPool[] = "__pyx_unpickle_MemoryPool(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_37__pyx_unpickle_MemoryPool = {"__pyx_unpickle_MemoryPool", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_37__pyx_unpickle_MemoryPool, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_36__pyx_unpickle_MemoryPool};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_37__pyx_unpickle_MemoryPool(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_MemoryPool (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MemoryPool", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MemoryPool", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_MemoryPool") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MemoryPool", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_MemoryPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_36__pyx_unpickle_MemoryPool(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_36__pyx_unpickle_MemoryPool(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MemoryPool", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x066cb05:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x066cb05 = (_pools))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x066cb05) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x066cb05:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x066cb05 = (_pools))" % __pyx_checksum)
 *     __pyx_result = MemoryPool.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x066cb05:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x066cb05 = (_pools))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = MemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x06, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x066cb05:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x066cb05 = (_pools))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x066cb05 = (_pools))" % __pyx_checksum)
 *     __pyx_result = MemoryPool.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_MemoryPool), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x066cb05 = (_pools))" % __pyx_checksum)
 *     __pyx_result = MemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = MemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPool__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x066cb05 = (_pools))" % __pyx_checksum)
 *     __pyx_result = MemoryPool.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._pools = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MemoryPool(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_MemoryPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._pools = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_MemoryPool__set_state(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MemoryPool__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._pools = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_pools);
  __Pyx_DECREF(__pyx_v___pyx_result->_pools);
  __pyx_v___pyx_result->_pools = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._pools = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result._pools = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):
 *     __pyx_result._pools = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._pools = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_MemoryPool__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_CFunctionAllocatorMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_39__pyx_unpickle_CFunctionAllocatorMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_38__pyx_unpickle_CFunctionAllocatorMemory[] = "__pyx_unpickle_CFunctionAllocatorMemory(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_39__pyx_unpickle_CFunctionAllocatorMemory = {"__pyx_unpickle_CFunctionAllocatorMemory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_39__pyx_unpickle_CFunctionAllocatorMemory, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_38__pyx_unpickle_CFunctionAllocatorMemory};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_39__pyx_unpickle_CFunctionAllocatorMemory(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_CFunctionAllocatorMemory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CFunctionAllocatorMemory", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CFunctionAllocatorMemory", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_CFunctionAllocatorMemory") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CFunctionAllocatorMemory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_CFunctionAllocatorMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_38__pyx_unpickle_CFunctionAllocatorMemory(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_38__pyx_unpickle_CFunctionAllocatorMemory(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CFunctionAllocatorMemory", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xfa3fd60:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xfa3fd60) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xfa3fd60:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocatorMemory.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xfa3fd60:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = CFunctionAllocatorMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xfa, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xfa3fd60:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocatorMemory.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CFunctionAllocatorMemory__set_state(<CFunctionAllocatorMemory> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_CFunctionAllocatorMemory), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocatorMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CFunctionAllocatorMemory__set_state(<CFunctionAllocatorMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = CFunctionAllocatorMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CFunctionAllocatorMemory__set_state(<CFunctionAllocatorMemory> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocatorMemory__set_state(CFunctionAllocatorMemory __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocatorMemory__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xfa3fd60 = (_free_func, _param, device_id, ptr, size))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocatorMemory.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CFunctionAllocatorMemory__set_state(<CFunctionAllocatorMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CFunctionAllocatorMemory__set_state(<CFunctionAllocatorMemory> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_CFunctionAllocatorMemory__set_state(CFunctionAllocatorMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._param = __pyx_state[1]; __pyx_result.device_id = __pyx_state[2]; __pyx_result.ptr = __pyx_state[3]; __pyx_result.size = __pyx_state[4]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CFunctionAllocatorMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_CFunctionAllocatorMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_CFunctionAllocatorMemory__set_state(<CFunctionAllocatorMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocatorMemory__set_state(CFunctionAllocatorMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._param = __pyx_state[1]; __pyx_result.device_id = __pyx_state[2]; __pyx_result.ptr = __pyx_state[3]; __pyx_result.size = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocatorMemory__set_state(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  intptr_t __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CFunctionAllocatorMemory__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocatorMemory__set_state(CFunctionAllocatorMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._param = __pyx_state[1]; __pyx_result.device_id = __pyx_state[2]; __pyx_result.ptr = __pyx_state[3]; __pyx_result.size = __pyx_state[4]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_free_func = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_param = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.device_id = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.ptr = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.size = __pyx_t_4;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_CFunctionAllocatorMemory__set_state(CFunctionAllocatorMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._param = __pyx_state[1]; __pyx_result.device_id = __pyx_state[2]; __pyx_result.ptr = __pyx_state[3]; __pyx_result.size = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_6 > 5) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "(tree fragment)":14
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._param = __pyx_state[1]; __pyx_result.device_id = __pyx_state[2]; __pyx_result.ptr = __pyx_state[3]; __pyx_result.size = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[5])             # <<<<<<<<<<<<<<
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_update); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_CFunctionAllocatorMemory__set_state(CFunctionAllocatorMemory __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._param = __pyx_state[1]; __pyx_result.device_id = __pyx_state[2]; __pyx_result.ptr = __pyx_state[3]; __pyx_result.size = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[5])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_CFunctionAllocatorMemory__set_state(<CFunctionAllocatorMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocatorMemory__set_state(CFunctionAllocatorMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._param = __pyx_state[1]; __pyx_result.device_id = __pyx_state[2]; __pyx_result.ptr = __pyx_state[3]; __pyx_result.size = __pyx_state[4]
 *     if len(__pyx_state) > 5 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_CFunctionAllocatorMemory__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_CFunctionAllocator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_6memory_41__pyx_unpickle_CFunctionAllocator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_6memory_40__pyx_unpickle_CFunctionAllocator[] = "__pyx_unpickle_CFunctionAllocator(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_6memory_41__pyx_unpickle_CFunctionAllocator = {"__pyx_unpickle_CFunctionAllocator", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_41__pyx_unpickle_CFunctionAllocator, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_40__pyx_unpickle_CFunctionAllocator};
static PyObject *__pyx_pw_4cupy_4cuda_6memory_41__pyx_unpickle_CFunctionAllocator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_CFunctionAllocator (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CFunctionAllocator", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CFunctionAllocator", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_CFunctionAllocator") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_CFunctionAllocator", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_CFunctionAllocator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_6memory_40__pyx_unpickle_CFunctionAllocator(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_6memory_40__pyx_unpickle_CFunctionAllocator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CFunctionAllocator", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xced2061:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xced2061) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xced2061:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocator.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xced2061:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = CFunctionAllocator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xce, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xced2061:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocator.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CFunctionAllocator__set_state(<CFunctionAllocator> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4cupy_4cuda_6memory_CFunctionAllocator), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CFunctionAllocator__set_state(<CFunctionAllocator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = CFunctionAllocator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CFunctionAllocator__set_state(<CFunctionAllocator> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocator__set_state(CFunctionAllocator __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocator__set_state(((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xced2061 = (_free_func, _malloc_func, _owner, _param))" % __pyx_checksum)
 *     __pyx_result = CFunctionAllocator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_CFunctionAllocator__set_state(<CFunctionAllocator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_CFunctionAllocator__set_state(<CFunctionAllocator> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_CFunctionAllocator__set_state(CFunctionAllocator __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._malloc_func = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]; __pyx_result._param = __pyx_state[3]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CFunctionAllocator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_CFunctionAllocator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_CFunctionAllocator__set_state(<CFunctionAllocator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocator__set_state(CFunctionAllocator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._malloc_func = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]; __pyx_result._param = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4cupy_4cuda_6memory___pyx_unpickle_CFunctionAllocator__set_state(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  intptr_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_CFunctionAllocator__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocator__set_state(CFunctionAllocator __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._malloc_func = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]; __pyx_result._param = __pyx_state[3]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_free_func = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_malloc_func = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_owner);
  __Pyx_DECREF(__pyx_v___pyx_result->_owner);
  __pyx_v___pyx_result->_owner = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((intptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_param = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_CFunctionAllocator__set_state(CFunctionAllocator __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._malloc_func = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]; __pyx_result._param = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 4) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._malloc_func = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]; __pyx_result._param = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_CFunctionAllocator__set_state(CFunctionAllocator __pyx_result, tuple __pyx_state):
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._malloc_func = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]; __pyx_result._param = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[4])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_CFunctionAllocator__set_state(<CFunctionAllocator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_CFunctionAllocator__set_state(CFunctionAllocator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._free_func = __pyx_state[0]; __pyx_result._malloc_func = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]; __pyx_result._param = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cupy.cuda.memory.__pyx_unpickle_CFunctionAllocator__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int8_t")
 * cdef object __pyx_convert_vector_to_py_int8_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int8_t(const std::vector<int8_t>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int8_t", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int8_t")
 * cdef object __pyx_convert_vector_to_py_int8_t(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int8_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int8_t")
 * cdef object __pyx_convert_vector_to_py_int8_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int8_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___")
 * cdef object __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___(std::map<size_t,std::vector<int8_t> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<size_t,std::vector<int8_t> > ::value_type const *__pyx_v_key_value;
  std::map<size_t,std::vector<int8_t> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___")
 * cdef object __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_int8_t(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___")
 * cdef object __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_int8_t_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int8_t")
 * cdef vector[X] __pyx_convert_vector_from_py_int8_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int8_t>  __pyx_convert_vector_from_py_int8_t(PyObject *__pyx_v_o) {
  std::vector<int8_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int8_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int8_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int8_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int8_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int8_t(__pyx_v_item); if (unlikely((__pyx_t_5 == ((int8_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int8_t)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int8_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int8_t")
 * cdef vector[X] __pyx_convert_vector_from_py_int8_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int8_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

static std::map<size_t,std::vector<int8_t> >  __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_d = 0;
  std::map<size_t,std::vector<int8_t> >  __pyx_v_m;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<size_t,std::vector<int8_t> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  size_t __pyx_t_8;
  std::vector<int8_t>  __pyx_t_9;
  __Pyx_RefNannySetupContext("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___", 0);

  /* "map.from_py":175
 * @cname("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___(object o) except *:
 *     cdef dict d = o             # <<<<<<<<<<<<<<
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_o))||((__pyx_v_o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_o)->tp_name), 0))) __PYX_ERR(2, 175, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_o;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.from_py":177
 *     cdef dict d = o
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():             # <<<<<<<<<<<<<<
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(2, 177, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(2, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "map.from_py":178
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_key); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 178, __pyx_L1_error)
    __pyx_t_9 = __pyx_convert_vector_from_py_int8_t(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 178, __pyx_L1_error)
    __pyx_v_m.insert(std::pair<size_t,std::vector<int8_t> > (((size_t)__pyx_t_8), ((std::vector<int8_t> )__pyx_t_9)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "map.from_py":179
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("map.from_py.__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_int8_t_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_size_t")
 * cdef object __pyx_convert_vector_to_py_size_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_size_t(const std::vector<size_t>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_size_t", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_size_t")
 * cdef object __pyx_convert_vector_to_py_size_t(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_FromSize_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_size_t")
 * cdef object __pyx_convert_vector_to_py_size_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___")
 * cdef object __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___(std::map<size_t,std::vector<size_t> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<size_t,std::vector<size_t> > ::value_type const *__pyx_v_key_value;
  std::map<size_t,std::vector<size_t> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___")
 * cdef object __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_size_t(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(2, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___")
 * cdef object __pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_size_t____std_3a__3a_vector_3c_size_t_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_size_t")
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<size_t>  __pyx_convert_vector_from_py_size_t(PyObject *__pyx_v_o) {
  std::vector<size_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<size_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_size_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_item); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((size_t)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_size_t")
 * cdef vector[X] __pyx_convert_vector_from_py_size_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

static std::map<size_t,std::vector<size_t> >  __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_d = 0;
  std::map<size_t,std::vector<size_t> >  __pyx_v_m;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<size_t,std::vector<size_t> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  size_t __pyx_t_8;
  std::vector<size_t>  __pyx_t_9;
  __Pyx_RefNannySetupContext("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___", 0);

  /* "map.from_py":175
 * @cname("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___(object o) except *:
 *     cdef dict d = o             # <<<<<<<<<<<<<<
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_o))||((__pyx_v_o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_o)->tp_name), 0))) __PYX_ERR(2, 175, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_o;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.from_py":177
 *     cdef dict d = o
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():             # <<<<<<<<<<<<<<
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(2, 177, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(2, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "map.from_py":178
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_key); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 178, __pyx_L1_error)
    __pyx_t_9 = __pyx_convert_vector_from_py_size_t(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 178, __pyx_L1_error)
    __pyx_v_m.insert(std::pair<size_t,std::vector<size_t> > (((size_t)__pyx_t_8), ((std::vector<size_t> )__pyx_t_9)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "map.from_py":179
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("map.from_py.__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_BaseMemory(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_BaseMemory(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_device(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_6device_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_ptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3ptr_1__get__(o);
}

static int __pyx_setprop_4cupy_4cuda_6memory_10BaseMemory_ptr(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3ptr_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_4size_1__get__(o);
}

static int __pyx_setprop_4cupy_4cuda_6memory_10BaseMemory_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_4size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_device_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_9device_id_1__get__(o);
}

static int __pyx_setprop_4cupy_4cuda_6memory_10BaseMemory_device_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_9device_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_BaseMemory[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_3__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_10BaseMemory_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10BaseMemory_5__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_10BaseMemory_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cupy_4cuda_6memory_BaseMemory[] = {
  {(char *)"device", __pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_device, 0, (char *)0, 0},
  {(char *)"ptr", __pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_ptr, __pyx_setprop_4cupy_4cuda_6memory_10BaseMemory_ptr, (char *)"ptr: 'intptr_t'", 0},
  {(char *)"size", __pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_size, __pyx_setprop_4cupy_4cuda_6memory_10BaseMemory_size, (char *)"size: 'size_t'", 0},
  {(char *)"device_id", __pyx_getprop_4cupy_4cuda_6memory_10BaseMemory_device_id, __pyx_setprop_4cupy_4cuda_6memory_10BaseMemory_device_id, (char *)"device_id: 'int'", 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BaseMemory = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_1__int__, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_4cupy_4cuda_6memory_10BaseMemory_1__int__, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_BaseMemory = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.BaseMemory", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_BaseMemory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BaseMemory, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Memory on a CUDA device.\n\n    Attributes:\n        ~Memory.ptr (int): Pointer to the place within the buffer.\n        ~Memory.size (int): Size of the memory allocation in bytes.\n        ~Memory.device (~cupy.cuda.Device): Device whose memory the pointer\n            refers to.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_BaseMemory, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cupy_4cuda_6memory_BaseMemory, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_BaseMemory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPointer __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer;

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_MemoryPointer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer;
  p->mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_MemoryPointer(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *p = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mem);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4cupy_4cuda_6memory_MemoryPointer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *p = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)o;
  if (p->mem) {
    e = (*v)(((PyObject *)p->mem), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cupy_4cuda_6memory_MemoryPointer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *p = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_device(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_6device_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_ptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3ptr_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_device_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_9device_id_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_mem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3mem_1__get__(o);
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_MemoryPointer[] = {
  {"copy_from_device", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_13copy_from_device, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_12copy_from_device},
  {"copy_from_device_async", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_15copy_from_device_async, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_14copy_from_device_async},
  {"copy_from_host", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_17copy_from_host, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_16copy_from_host},
  {"copy_from_host_async", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_19copy_from_host_async, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_18copy_from_host_async},
  {"copy_from", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_21copy_from, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_20copy_from},
  {"copy_from_async", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_23copy_from_async, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_22copy_from_async},
  {"copy_to_host", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_25copy_to_host, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_24copy_to_host},
  {"copy_to_host_async", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_27copy_to_host_async, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_26copy_to_host_async},
  {"memset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_29memset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_28memset},
  {"memset_async", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_31memset_async, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_30memset_async},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_33__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_32__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_35__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_34__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cupy_4cuda_6memory_MemoryPointer[] = {
  {(char *)"device", __pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_device, 0, (char *)0, 0},
  {(char *)"ptr", __pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_ptr, 0, (char *)0, 0},
  {(char *)"device_id", __pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_device_id, 0, (char *)0, 0},
  {(char *)"mem", __pyx_getprop_4cupy_4cuda_6memory_13MemoryPointer_mem, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MemoryPointer = {
  __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_5__add__, /*nb_add*/
  __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_9__sub__, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3__int__, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_3__int__, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_7__iadd__, /*nb_inplace_add*/
  __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_11__isub__, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_MemoryPointer = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.MemoryPointer", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_MemoryPointer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MemoryPointer, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "MemoryPointer(BaseMemory mem, ptrdiff_t offset)\nPointer to a point on a device memory.\n\n    An instance of this class holds a reference to the original memory buffer\n    and a pointer to a place within this buffer.\n\n    Args:\n        mem (~cupy.cuda.BaseMemory): The device memory buffer.\n        offset (int): An offset from the head of the buffer to the place this\n            pointer refers.\n\n    Attributes:\n        ~MemoryPointer.device (~cupy.cuda.Device): Device whose memory the\n            pointer refers to.\n        ~MemoryPointer.mem (~cupy.cuda.BaseMemory): The device memory buffer.\n        ~MemoryPointer.ptr (int): Pointer to the place within the buffer.\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cupy_4cuda_6memory_MemoryPointer, /*tp_traverse*/
  __pyx_tp_clear_4cupy_4cuda_6memory_MemoryPointer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_MemoryPointer, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cupy_4cuda_6memory_MemoryPointer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_13MemoryPointer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_MemoryPointer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_MemoryPool __pyx_vtable_4cupy_4cuda_6memory_MemoryPool;

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_MemoryPool(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPool;
  p->_pools = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_MemoryPool(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *p = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_pools);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4cupy_4cuda_6memory_MemoryPool(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *p = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)o;
  if (p->_pools) {
    e = (*v)(p->_pools, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cupy_4cuda_6memory_MemoryPool(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *p = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *)o;
  tmp = ((PyObject*)p->_pools);
  p->_pools = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_MemoryPool[] = {
  {"malloc", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_3malloc, METH_O, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_2malloc},
  {"free_all_blocks", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_5free_all_blocks, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_4free_all_blocks},
  {"free_all_free", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_7free_all_free, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_6free_all_free},
  {"n_free_blocks", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_9n_free_blocks, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_8n_free_blocks},
  {"used_bytes", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_11used_bytes, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_10used_bytes},
  {"free_bytes", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_13free_bytes, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_12free_bytes},
  {"total_bytes", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_15total_bytes, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_14total_bytes},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_17__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_16__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_10MemoryPool_19__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_10MemoryPool_18__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_MemoryPool = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.MemoryPool", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_MemoryPool, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "MemoryPool(allocator=_malloc)\nMemory pool for all GPU devices on the host.\n\n    A memory pool preserves any allocations even if they are freed by the user.\n    Freed memory buffers are held by the memory pool as *free blocks*, and they\n    are reused for further memory allocations of the same sizes. The allocated\n    blocks are managed for each device, so one instance of this class can be\n    used for multiple devices.\n\n    .. note::\n       When the allocation is skipped by reusing the pre-allocated block, it\n       does not call ``cudaMalloc`` and therefore CPU-GPU synchronization does\n       not occur. It makes interleaves of memory allocations and kernel\n       invocations very fast.\n\n    .. note::\n       The memory pool holds allocated blocks without freeing as much as\n       possible. It makes the program hold most of the device memory, which may\n       make other CUDA programs running in parallel out-of-memory situation.\n\n    Args:\n        allocator (function): The base CuPy memory allocator. It is used for\n            allocating new blocks when the blocks of the required size are all\n            in use.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cupy_4cuda_6memory_MemoryPool, /*tp_traverse*/
  __pyx_tp_clear_4cupy_4cuda_6memory_MemoryPool, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_MemoryPool, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_10MemoryPool_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_MemoryPool, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_CFunctionAllocatorMemory(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4cupy_4cuda_6memory_BaseMemory(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_CFunctionAllocatorMemory(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_4cupy_4cuda_6memory_BaseMemory(o);
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_CFunctionAllocatorMemory[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_5__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_7__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.CFunctionAllocatorMemory", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocatorMemory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_CFunctionAllocatorMemory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "CFunctionAllocatorMemory(size_t size, intptr_t param, intptr_t malloc_func, intptr_t free_func, int device_id)", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_CFunctionAllocatorMemory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_24CFunctionAllocatorMemory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_CFunctionAllocatorMemory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_CFunctionAllocator __pyx_vtable_4cupy_4cuda_6memory_CFunctionAllocator;

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_CFunctionAllocator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cupy_4cuda_6memory_CFunctionAllocator;
  p->_owner = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_CFunctionAllocator(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *p = (struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_owner);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4cupy_4cuda_6memory_CFunctionAllocator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *p = (struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)o;
  if (p->_owner) {
    e = (*v)(p->_owner, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cupy_4cuda_6memory_CFunctionAllocator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *p = (struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *)o;
  tmp = ((PyObject*)p->_owner);
  p->_owner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_CFunctionAllocator[] = {
  {"malloc", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_3malloc, METH_O, __pyx_doc_4cupy_4cuda_6memory_18CFunctionAllocator_2malloc},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_5__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_18CFunctionAllocator_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_7__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_18CFunctionAllocator_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_CFunctionAllocator = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.CFunctionAllocator", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_CFunctionAllocator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "CFunctionAllocator(intptr_t param, intptr_t malloc_func, intptr_t free_func, owner)\nAllocator with C function pointers to allocation routines.\n\n    This allocator keeps raw pointers to a *param* object along with functions\n    pointers to *malloc* and *free*, delegating the actual allocation to\n    external sources while only handling the timing of the resource allocation\n    and deallocation.\n\n    *malloc* should follow the signature ``void*(*malloc)(void*, size_t, int)``\n    returning the pointer to the allocated memory given the pointer to\n    *param*, the number of bytes to allocate and the device id on which the\n    allocation should take place.\n\n    Similarly, *free* should follow the signature\n    ``void(*free)(void*, void*, int)`` with no return, taking the pointer to\n    *param*, the pointer to the allocated memory and the device id on which the\n    memory was allocated.\n\n    Args:\n        param (int): Address of *param*.\n        malloc_func (int): Address of *malloc*.\n        free_func (int): Address of *free*.\n        owner (object): Reference to the owner object to keep the param and\n            the functions alive.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cupy_4cuda_6memory_CFunctionAllocator, /*tp_traverse*/
  __pyx_tp_clear_4cupy_4cuda_6memory_CFunctionAllocator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_CFunctionAllocator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_18CFunctionAllocator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_CFunctionAllocator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_Memory(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4cupy_4cuda_6memory_BaseMemory(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_Memory(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cupy_4cuda_6memory_6Memory_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_4cupy_4cuda_6memory_BaseMemory(o);
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_Memory[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_6Memory_5__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_6Memory_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_6Memory_7__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_6Memory_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_Memory = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.Memory", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_Memory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_Memory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Memory(size_t size)\nMemory allocation on a CUDA device.\n\n    This class provides an RAII interface of the CUDA memory allocation.\n\n    Args:\n        size (int): Size of the memory allocation in bytes.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_Memory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_6Memory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_Memory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_UnownedMemory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *p;
  PyObject *o = __pyx_tp_new_4cupy_4cuda_6memory_BaseMemory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)o);
  p->_owner = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_UnownedMemory(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *p = (struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_owner);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_4cupy_4cuda_6memory_BaseMemory(o);
}

static int __pyx_tp_traverse_4cupy_4cuda_6memory_UnownedMemory(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *p = (struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)o;
  e = ((likely(__pyx_ptype_4cupy_4cuda_6memory_BaseMemory)) ? ((__pyx_ptype_4cupy_4cuda_6memory_BaseMemory->tp_traverse) ? __pyx_ptype_4cupy_4cuda_6memory_BaseMemory->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_4cupy_4cuda_6memory_UnownedMemory)); if (e) return e;
  if (p->_owner) {
    e = (*v)(p->_owner, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cupy_4cuda_6memory_UnownedMemory(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *p = (struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory *)o;
  if (likely(__pyx_ptype_4cupy_4cuda_6memory_BaseMemory)) { if (__pyx_ptype_4cupy_4cuda_6memory_BaseMemory->tp_clear) __pyx_ptype_4cupy_4cuda_6memory_BaseMemory->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_4cupy_4cuda_6memory_UnownedMemory);
  tmp = ((PyObject*)p->_owner);
  p->_owner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_13UnownedMemory__owner(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_6_owner_1__get__(o);
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_UnownedMemory[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_3__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_13UnownedMemory_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_5__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_13UnownedMemory_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cupy_4cuda_6memory_UnownedMemory[] = {
  {(char *)"_owner", __pyx_getprop_4cupy_4cuda_6memory_13UnownedMemory__owner, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_UnownedMemory = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.UnownedMemory", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_UnownedMemory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_UnownedMemory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "UnownedMemory(intptr_t ptr, size_t size, owner, int device_id=-1)\nCUDA memory that is not owned by CuPy.\n\n    Args:\n        ptr (int): Pointer to the buffer.\n        size (int): Size of the buffer.\n        owner (object): Reference to the owner object to keep the memory\n            alive.\n        device_id (int): CUDA device ID of the buffer. If omitted, the device\n            associated to the pointer is retrieved.\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cupy_4cuda_6memory_UnownedMemory, /*tp_traverse*/
  __pyx_tp_clear_4cupy_4cuda_6memory_UnownedMemory, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_UnownedMemory, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cupy_4cuda_6memory_UnownedMemory, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_13UnownedMemory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_UnownedMemory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_ManagedMemory(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4cupy_4cuda_6memory_BaseMemory(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_ManagedMemory[] = {
  {"prefetch", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_3prefetch, METH_O, __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_2prefetch},
  {"advise", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_5advise, METH_O, __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_4advise},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_7__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_9__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_13ManagedMemory_8__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_ManagedMemory = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.ManagedMemory", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_ManagedMemory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_BaseMemory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ManagedMemory(size_t size)\nManaged memory (Unified memory) allocation on a CUDA device.\n\n    This class provides an RAII interface of the CUDA managed memory\n    allocation.\n\n    Args:\n        size (int): Size of the memory allocation in bytes.\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_ManagedMemory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_13ManagedMemory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_ManagedMemory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory__Chunk __pyx_vtable_4cupy_4cuda_6memory__Chunk;

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory__Chunk(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cupy_4cuda_6memory__Chunk;
  p->mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)Py_None); Py_INCREF(Py_None);
  p->prev = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)Py_None); Py_INCREF(Py_None);
  p->next = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory__Chunk(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *p = (struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->mem);
  Py_CLEAR(p->prev);
  Py_CLEAR(p->next);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4cupy_4cuda_6memory__Chunk(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *p = (struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)o;
  if (p->mem) {
    e = (*v)(((PyObject *)p->mem), a); if (e) return e;
  }
  if (p->prev) {
    e = (*v)(((PyObject *)p->prev), a); if (e) return e;
  }
  if (p->next) {
    e = (*v)(((PyObject *)p->next), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cupy_4cuda_6memory__Chunk(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cupy_4cuda_6memory__Chunk *p = (struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->prev);
  p->prev = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->next);
  p->next = ((struct __pyx_obj_4cupy_4cuda_6memory__Chunk *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_6_Chunk_mem(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_3mem_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_6_Chunk_offset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_6offset_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_6_Chunk_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4size_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_6_Chunk_stream_ptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_10stream_ptr_1__get__(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_6_Chunk_prev(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_1__get__(o);
}

static int __pyx_setprop_4cupy_4cuda_6memory_6_Chunk_prev(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_3__set__(o, v);
  }
  else {
    return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4prev_5__del__(o);
  }
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_6_Chunk_next(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_1__get__(o);
}

static int __pyx_setprop_4cupy_4cuda_6memory_6_Chunk_next(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_3__set__(o, v);
  }
  else {
    return __pyx_pw_4cupy_4cuda_6memory_6_Chunk_4next_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory__Chunk[] = {
  {"ptr", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_6_Chunk_3ptr, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_6_Chunk_2ptr},
  {"split", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_6_Chunk_5split, METH_O, __pyx_doc_4cupy_4cuda_6memory_6_Chunk_4split},
  {"merge", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_6_Chunk_7merge, METH_O, __pyx_doc_4cupy_4cuda_6memory_6_Chunk_6merge},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_6_Chunk_9__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_6_Chunk_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_6_Chunk_11__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_6_Chunk_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cupy_4cuda_6memory__Chunk[] = {
  {(char *)"mem", __pyx_getprop_4cupy_4cuda_6memory_6_Chunk_mem, 0, (char *)0, 0},
  {(char *)"offset", __pyx_getprop_4cupy_4cuda_6memory_6_Chunk_offset, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop_4cupy_4cuda_6memory_6_Chunk_size, 0, (char *)0, 0},
  {(char *)"stream_ptr", __pyx_getprop_4cupy_4cuda_6memory_6_Chunk_stream_ptr, 0, (char *)0, 0},
  {(char *)"prev", __pyx_getprop_4cupy_4cuda_6memory_6_Chunk_prev, __pyx_setprop_4cupy_4cuda_6memory_6_Chunk_prev, (char *)"prev: cupy.cuda.memory._Chunk", 0},
  {(char *)"next", __pyx_getprop_4cupy_4cuda_6memory_6_Chunk_next, __pyx_setprop_4cupy_4cuda_6memory_6_Chunk_next, (char *)"next: cupy.cuda.memory._Chunk", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory__Chunk = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory._Chunk", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory__Chunk), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory__Chunk, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "_Chunk(*args)\nA chunk points to a device memory.\n\n    A chunk might be a splitted memory block from a larger allocation.\n    The prev/next pointers contruct a doubly-linked list of memory addresses\n    sorted by base address that must be contiguous.\n\n    Args:\n        mem (~cupy.cuda.Memory): The device memory buffer.\n        offset (int): An offset bytes from the head of the buffer.\n        size (int): Chunk size in bytes.\n        stream_ptr (size_t): Raw stream handle of cupy.cuda.Stream\n\n    Attributes:\n        mem (Memory): The device memory buffer.\n        ptr (int): Memory address.\n        offset (int): An offset bytes from the head of the buffer.\n        size (int): Chunk size in bytes.\n        prev (Chunk): prev memory pointer if split from a larger allocation\n        next (Chunk): next memory pointer if split from a larger allocation\n        stream_ptr (int): Raw stream handle of cupy.cuda.Stream\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cupy_4cuda_6memory__Chunk, /*tp_traverse*/
  __pyx_tp_clear_4cupy_4cuda_6memory__Chunk, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory__Chunk, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cupy_4cuda_6memory__Chunk, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_6_Chunk_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory__Chunk, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_PooledMemory __pyx_vtable_4cupy_4cuda_6memory_PooledMemory;

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_PooledMemory(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *p;
  PyObject *o = __pyx_tp_new_4cupy_4cuda_6memory_BaseMemory(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cupy_4cuda_6memory_PooledMemory;
  p->pool = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_PooledMemory(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *p = (struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4cupy_4cuda_6memory_12PooledMemory_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->pool);
  __pyx_tp_dealloc_4cupy_4cuda_6memory_BaseMemory(o);
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_12PooledMemory_pool(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_12PooledMemory_4pool_1__get__(o);
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_PooledMemory[] = {
  {"free", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_3free, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_12PooledMemory_2free},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_7__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_12PooledMemory_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_12PooledMemory_9__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_12PooledMemory_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cupy_4cuda_6memory_PooledMemory[] = {
  {(char *)"pool", __pyx_getprop_4cupy_4cuda_6memory_12PooledMemory_pool, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_PooledMemory = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.PooledMemory", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_PooledMemory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "PooledMemory(_Chunk chunk, pool)\nMemory allocation for a memory pool.\n\n    The instance of this class is created by memory pool allocator, so user\n    should not instantiate it by hand.\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_PooledMemory, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cupy_4cuda_6memory_PooledMemory, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_12PooledMemory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_PooledMemory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4cupy_4cuda_6memory_SingleDeviceMemoryPool __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool;

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory_SingleDeviceMemoryPool(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cupy_4cuda_6memory_SingleDeviceMemoryPool;
  new((void*)&(p->_index)) std::map<size_t,std::vector<size_t> > ();
  new((void*)&(p->_flag)) std::map<size_t,std::vector<int8_t> > ();
  p->_allocator = Py_None; Py_INCREF(Py_None);
  p->_in_use = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_free = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_weakref = Py_None; Py_INCREF(Py_None);
  p->_free_lock = Py_None; Py_INCREF(Py_None);
  p->_in_use_lock = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory_SingleDeviceMemoryPool(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *p = (struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)o;
  PyObject_GC_UnTrack(o);
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  __Pyx_call_destructor(p->_index);
  __Pyx_call_destructor(p->_flag);
  Py_CLEAR(p->_allocator);
  Py_CLEAR(p->_in_use);
  Py_CLEAR(p->_free);
  Py_CLEAR(p->_weakref);
  Py_CLEAR(p->_free_lock);
  Py_CLEAR(p->_in_use_lock);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4cupy_4cuda_6memory_SingleDeviceMemoryPool(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *p = (struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)o;
  if (p->_allocator) {
    e = (*v)(p->_allocator, a); if (e) return e;
  }
  if (p->_in_use) {
    e = (*v)(p->_in_use, a); if (e) return e;
  }
  if (p->_free) {
    e = (*v)(p->_free, a); if (e) return e;
  }
  if (p->_weakref) {
    e = (*v)(p->_weakref, a); if (e) return e;
  }
  if (p->_free_lock) {
    e = (*v)(p->_free_lock, a); if (e) return e;
  }
  if (p->_in_use_lock) {
    e = (*v)(p->_in_use_lock, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cupy_4cuda_6memory_SingleDeviceMemoryPool(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *p = (struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *)o;
  tmp = ((PyObject*)p->_allocator);
  p->_allocator = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_use);
  p->_in_use = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_free);
  p->_free = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_weakref);
  p->_weakref = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_free_lock);
  p->_free_lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_use_lock);
  p->_in_use_lock = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__device_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10_device_id_1__get__(o);
}

static PyMethodDef __pyx_methods_4cupy_4cuda_6memory_SingleDeviceMemoryPool[] = {
  {"_arena", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_3_arena, METH_O, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_2_arena},
  {"_alloc", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_5_alloc, METH_O, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_4_alloc},
  {"malloc", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_7malloc, METH_O, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_6malloc},
  {"_malloc", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_9_malloc, METH_O, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_8_malloc},
  {"free", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_11free, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_10free},
  {"free_all_blocks", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_13free_all_blocks, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_12free_all_blocks},
  {"free_all_free", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_15free_all_free, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_14free_all_free},
  {"n_free_blocks", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_17n_free_blocks, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_16n_free_blocks},
  {"used_bytes", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_19used_bytes, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_18used_bytes},
  {"free_bytes", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_21free_bytes, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_20free_bytes},
  {"total_bytes", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_23total_bytes, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_22total_bytes},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_25__reduce_cython__, METH_NOARGS, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_27__setstate_cython__, METH_O, __pyx_doc_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_26__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cupy_4cuda_6memory_SingleDeviceMemoryPool[] = {
  {(char *)"_device_id", __pyx_getprop_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__device_id, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.SingleDeviceMemoryPool", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory_SingleDeviceMemoryPool, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "SingleDeviceMemoryPool(allocator=_malloc)\nMemory pool implementation for single device.\n\n    - The allocator attempts to find the smallest cached block that will fit\n      the requested size. If the block is larger than the requested size,\n      it may be split. If no block is found, the allocator will delegate to\n      cudaMalloc.\n    - If the cudaMalloc fails, the allocator will free all cached blocks that\n      are not split and retry the allocation.\n    ", /*tp_doc*/
  __pyx_tp_traverse_4cupy_4cuda_6memory_SingleDeviceMemoryPool, /*tp_traverse*/
  __pyx_tp_clear_4cupy_4cuda_6memory_SingleDeviceMemoryPool, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cupy_4cuda_6memory_SingleDeviceMemoryPool, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cupy_4cuda_6memory_SingleDeviceMemoryPool, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory_SingleDeviceMemoryPool, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *__pyx_freelist_4cupy_4cuda_6memory___pyx_scope_struct____init__[8];
static int __pyx_freecount_4cupy_4cuda_6memory___pyx_scope_struct____init__ = 0;

static PyObject *__pyx_tp_new_4cupy_4cuda_6memory___pyx_scope_struct____init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cupy_4cuda_6memory___pyx_scope_struct____init__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__)))) {
    o = (PyObject*)__pyx_freelist_4cupy_4cuda_6memory___pyx_scope_struct____init__[--__pyx_freecount_4cupy_4cuda_6memory___pyx_scope_struct____init__];
    memset(o, 0, sizeof(struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cupy_4cuda_6memory___pyx_scope_struct____init__(PyObject *o) {
  struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *p = (struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_allocator);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cupy_4cuda_6memory___pyx_scope_struct____init__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__)))) {
    __pyx_freelist_4cupy_4cuda_6memory___pyx_scope_struct____init__[__pyx_freecount_4cupy_4cuda_6memory___pyx_scope_struct____init__++] = ((struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cupy_4cuda_6memory___pyx_scope_struct____init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *p = (struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *)o;
  if (p->__pyx_v_allocator) {
    e = (*v)(p->__pyx_v_allocator, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cupy_4cuda_6memory___pyx_scope_struct____init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *p = (struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_allocator);
  p->__pyx_v_allocator = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_4cupy_4cuda_6memory___pyx_scope_struct____init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "cupy.cuda.memory.__pyx_scope_struct____init__", /*tp_name*/
  sizeof(struct __pyx_obj_4cupy_4cuda_6memory___pyx_scope_struct____init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cupy_4cuda_6memory___pyx_scope_struct____init__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cupy_4cuda_6memory___pyx_scope_struct____init__, /*tp_traverse*/
  __pyx_tp_clear_4cupy_4cuda_6memory___pyx_scope_struct____init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cupy_4cuda_6memory___pyx_scope_struct____init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"_set_peer_access", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_3_set_peer_access, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_2_set_peer_access},
  {"_malloc", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_5_malloc, METH_O, __pyx_doc_4cupy_4cuda_6memory_4_malloc},
  {"malloc_managed", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_7malloc_managed, METH_O, __pyx_doc_4cupy_4cuda_6memory_6malloc_managed},
  {"alloc", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_9alloc, METH_O, __pyx_doc_4cupy_4cuda_6memory_8alloc},
  {"set_allocator", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_11set_allocator, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_10set_allocator},
  {"_round_size", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_13_round_size, METH_O, __pyx_doc_4cupy_4cuda_6memory_12_round_size},
  {"_bin_index_from_size", (PyCFunction)__pyx_pw_4cupy_4cuda_6memory_15_bin_index_from_size, METH_O, __pyx_doc_4cupy_4cuda_6memory_14_bin_index_from_size},
  {"_call_malloc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_17_call_malloc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_16_call_malloc},
  {"_call_free", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_6memory_19_call_free, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_6memory_18_call_free},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_memory(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_memory},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "memory",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_BaseMemory, __pyx_k_BaseMemory, sizeof(__pyx_k_BaseMemory), 0, 0, 1, 1},
  {&__pyx_n_s_CFunctionAllocator, __pyx_k_CFunctionAllocator, sizeof(__pyx_k_CFunctionAllocator), 0, 0, 1, 1},
  {&__pyx_n_s_CFunctionAllocatorMemory, __pyx_k_CFunctionAllocatorMemory, sizeof(__pyx_k_CFunctionAllocatorMemory), 0, 0, 1, 1},
  {&__pyx_n_s_CUDARuntimeError, __pyx_k_CUDARuntimeError, sizeof(__pyx_k_CUDARuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_free_out_of_pool_memory, __pyx_k_Cannot_free_out_of_pool_memory, sizeof(__pyx_k_Cannot_free_out_of_pool_memory), 0, 1, 0, 0},
  {&__pyx_n_s_Chunk, __pyx_k_Chunk, sizeof(__pyx_k_Chunk), 0, 0, 1, 1},
  {&__pyx_n_s_DeprecationWarning, __pyx_k_DeprecationWarning, sizeof(__pyx_k_DeprecationWarning), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x06, __pyx_k_Incompatible_checksums_s_vs_0x06, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x06), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x1f, __pyx_k_Incompatible_checksums_s_vs_0x1f, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x1f), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x38, __pyx_k_Incompatible_checksums_s_vs_0x38, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x38), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x78, __pyx_k_Incompatible_checksums_s_vs_0x78, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x78), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x80, __pyx_k_Incompatible_checksums_s_vs_0x80, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x80), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xce, __pyx_k_Incompatible_checksums_s_vs_0xce, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xce), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xec, __pyx_k_Incompatible_checksums_s_vs_0xec, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xec), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xee, __pyx_k_Incompatible_checksums_s_vs_0xee, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xee), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xfa, __pyx_k_Incompatible_checksums_s_vs_0xfa, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xfa), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_ManagedMemory, __pyx_k_ManagedMemory, sizeof(__pyx_k_ManagedMemory), 0, 0, 1, 1},
  {&__pyx_n_s_Memory, __pyx_k_Memory, sizeof(__pyx_k_Memory), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryPointer, __pyx_k_MemoryPointer, sizeof(__pyx_k_MemoryPointer), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryPool, __pyx_k_MemoryPool, sizeof(__pyx_k_MemoryPool), 0, 0, 1, 1},
  {&__pyx_n_s_OutOfMemoryError, __pyx_k_OutOfMemoryError, sizeof(__pyx_k_OutOfMemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_OutOfMemoryError___init, __pyx_k_OutOfMemoryError___init, sizeof(__pyx_k_OutOfMemoryError___init), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PooledMemory, __pyx_k_PooledMemory, sizeof(__pyx_k_PooledMemory), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SingleDeviceMemoryPool, __pyx_k_SingleDeviceMemoryPool, sizeof(__pyx_k_SingleDeviceMemoryPool), 0, 0, 1, 1},
  {&__pyx_n_s_UnownedMemory, __pyx_k_UnownedMemory, sizeof(__pyx_k_UnownedMemory), 0, 0, 1, 1},
  {&__pyx_n_s_advise, __pyx_k_advise, sizeof(__pyx_k_advise), 0, 0, 1, 1},
  {&__pyx_n_s_alloc_postprocess, __pyx_k_alloc_postprocess, sizeof(__pyx_k_alloc_postprocess), 0, 0, 1, 1},
  {&__pyx_n_s_alloc_preprocess, __pyx_k_alloc_preprocess, sizeof(__pyx_k_alloc_preprocess), 0, 0, 1, 1},
  {&__pyx_n_s_allocation_unit_size, __pyx_k_allocation_unit_size, sizeof(__pyx_k_allocation_unit_size), 0, 0, 1, 1},
  {&__pyx_n_s_allocator, __pyx_k_allocator, sizeof(__pyx_k_allocator), 0, 0, 1, 1},
  {&__pyx_n_s_atexit, __pyx_k_atexit, sizeof(__pyx_k_atexit), 0, 0, 1, 1},
  {&__pyx_kp_u_bytes, __pyx_k_bytes, sizeof(__pyx_k_bytes), 0, 1, 0, 0},
  {&__pyx_kp_u_bytes_total, __pyx_k_bytes_total, sizeof(__pyx_k_bytes_total), 0, 1, 0, 0},
  {&__pyx_n_s_chunk, __pyx_k_chunk, sizeof(__pyx_k_chunk), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_collect, __pyx_k_collect, sizeof(__pyx_k_collect), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
  {&__pyx_n_s_cupy_cuda, __pyx_k_cupy_cuda, sizeof(__pyx_k_cupy_cuda), 0, 0, 1, 1},
  {&__pyx_n_s_cupy_cuda_memory, __pyx_k_cupy_cuda_memory, sizeof(__pyx_k_cupy_cuda_memory), 0, 0, 1, 1},
  {&__pyx_kp_s_cupy_cuda_memory_pyx, __pyx_k_cupy_cuda_memory_pyx, sizeof(__pyx_k_cupy_cuda_memory_pyx), 0, 0, 1, 0},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
  {&__pyx_n_s_device, __pyx_k_device, sizeof(__pyx_k_device), 0, 0, 1, 1},
  {&__pyx_n_s_device_id, __pyx_k_device_id, sizeof(__pyx_k_device_id), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exit_mode, __pyx_k_exit_mode, sizeof(__pyx_k_exit_mode), 0, 0, 1, 1},
  {&__pyx_n_s_free_all_blocks, __pyx_k_free_all_blocks, sizeof(__pyx_k_free_all_blocks), 0, 0, 1, 1},
  {&__pyx_n_s_free_all_free, __pyx_k_free_all_free, sizeof(__pyx_k_free_all_free), 0, 0, 1, 1},
  {&__pyx_kp_u_free_all_free_is_deprecated_Use, __pyx_k_free_all_free_is_deprecated_Use, sizeof(__pyx_k_free_all_free_is_deprecated_Use), 0, 1, 0, 0},
  {&__pyx_n_s_free_bytes, __pyx_k_free_bytes, sizeof(__pyx_k_free_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_free_func, __pyx_k_free_func, sizeof(__pyx_k_free_func), 0, 0, 1, 1},
  {&__pyx_n_s_free_postprocess, __pyx_k_free_postprocess, sizeof(__pyx_k_free_postprocess), 0, 0, 1, 1},
  {&__pyx_n_s_free_preprocess, __pyx_k_free_preprocess, sizeof(__pyx_k_free_preprocess), 0, 0, 1, 1},
  {&__pyx_n_s_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_iadd, __pyx_k_iadd, sizeof(__pyx_k_iadd), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init___locals_lambda, __pyx_k_init___locals_lambda, sizeof(__pyx_k_init___locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_iterkeys, __pyx_k_iterkeys, sizeof(__pyx_k_iterkeys), 0, 0, 1, 1},
  {&__pyx_n_s_itervalues, __pyx_k_itervalues, sizeof(__pyx_k_itervalues), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_malloc, __pyx_k_malloc, sizeof(__pyx_k_malloc), 0, 0, 1, 1},
  {&__pyx_n_s_malloc_2, __pyx_k_malloc_2, sizeof(__pyx_k_malloc_2), 0, 0, 1, 1},
  {&__pyx_n_s_malloc_func, __pyx_k_malloc_func, sizeof(__pyx_k_malloc_func), 0, 0, 1, 1},
  {&__pyx_n_s_malloc_postprocess, __pyx_k_malloc_postprocess, sizeof(__pyx_k_malloc_postprocess), 0, 0, 1, 1},
  {&__pyx_n_s_malloc_preprocess, __pyx_k_malloc_preprocess, sizeof(__pyx_k_malloc_preprocess), 0, 0, 1, 1},
  {&__pyx_n_s_mem, __pyx_k_mem, sizeof(__pyx_k_mem), 0, 0, 1, 1},
  {&__pyx_n_s_mem_ptr, __pyx_k_mem_ptr, sizeof(__pyx_k_mem_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_mem_size, __pyx_k_mem_size, sizeof(__pyx_k_mem_size), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_n_free_blocks, __pyx_k_n_free_blocks, sizeof(__pyx_k_n_free_blocks), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_kp_u_out_of_memory_to_allocate, __pyx_k_out_of_memory_to_allocate, sizeof(__pyx_k_out_of_memory_to_allocate), 0, 1, 0, 0},
  {&__pyx_n_s_owner, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {&__pyx_n_s_param, __pyx_k_param, sizeof(__pyx_k_param), 0, 0, 1, 1},
  {&__pyx_n_s_peer, __pyx_k_peer, sizeof(__pyx_k_peer), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pmem_id, __pyx_k_pmem_id, sizeof(__pyx_k_pmem_id), 0, 0, 1, 1},
  {&__pyx_n_s_pool, __pyx_k_pool, sizeof(__pyx_k_pool), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prev, __pyx_k_prev, sizeof(__pyx_k_prev), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BaseMemory, __pyx_k_pyx_unpickle_BaseMemory, sizeof(__pyx_k_pyx_unpickle_BaseMemory), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_CFunctionAllocato, __pyx_k_pyx_unpickle_CFunctionAllocato, sizeof(__pyx_k_pyx_unpickle_CFunctionAllocato), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_CFunctionAllocato_2, __pyx_k_pyx_unpickle_CFunctionAllocato_2, sizeof(__pyx_k_pyx_unpickle_CFunctionAllocato_2), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ManagedMemory, __pyx_k_pyx_unpickle_ManagedMemory, sizeof(__pyx_k_pyx_unpickle_ManagedMemory), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Memory, __pyx_k_pyx_unpickle_Memory, sizeof(__pyx_k_pyx_unpickle_Memory), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_MemoryPointer, __pyx_k_pyx_unpickle_MemoryPointer, sizeof(__pyx_k_pyx_unpickle_MemoryPointer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_MemoryPool, __pyx_k_pyx_unpickle_MemoryPool, sizeof(__pyx_k_pyx_unpickle_MemoryPool), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PooledMemory, __pyx_k_pyx_unpickle_PooledMemory, sizeof(__pyx_k_pyx_unpickle_PooledMemory), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_SingleDeviceMemor, __pyx_k_pyx_unpickle_SingleDeviceMemor, sizeof(__pyx_k_pyx_unpickle_SingleDeviceMemor), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_UnownedMemory, __pyx_k_pyx_unpickle_UnownedMemory, sizeof(__pyx_k_pyx_unpickle_UnownedMemory), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle__Chunk, __pyx_k_pyx_unpickle__Chunk, sizeof(__pyx_k_pyx_unpickle__Chunk), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_runtime, __pyx_k_runtime, sizeof(__pyx_k_runtime), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_src, __pyx_k_src, sizeof(__pyx_k_src), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_total, __pyx_k_total, sizeof(__pyx_k_total), 0, 0, 1, 1},
  {&__pyx_n_s_total_bytes, __pyx_k_total_bytes, sizeof(__pyx_k_total_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_used_bytes, __pyx_k_used_bytes, sizeof(__pyx_k_used_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 665, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 951, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 952, __pyx_L1_error)
  __pyx_builtin_DeprecationWarning = __Pyx_GetBuiltinName(__pyx_n_s_DeprecationWarning); if (!__pyx_builtin_DeprecationWarning) __PYX_ERR(0, 996, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cupy/cuda/memory.pyx":918
 *         cdef MemoryPointer ret
 *         if size == 0:
 *             return MemoryPointer(Memory(0), 0)             # <<<<<<<<<<<<<<
 * 
 *         current_thread = pythread.PyThread_get_thread_ident()
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cupy/cuda/memory.pyx":952
 *             chunk = self._in_use.pop(ptr)
 *         except KeyError:
 *             raise RuntimeError('Cannot free out-of-pool memory')             # <<<<<<<<<<<<<<
 *         finally:
 *             rlock.unlock_fastrlock(self._in_use_lock)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Cannot_free_out_of_pool_memory); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cupy/cuda/memory.pyx":994
 * 
 *     cpdef free_all_free(self):
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_kp_u_free_all_free_is_deprecated_Use, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "cupy/cuda/memory.pyx":1111
 *     cpdef free_all_free(self):
 *         """(Deprecated) Use :meth:`free_all_blocks` instead."""
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             'free_all_free is deprecated. Use free_all_blocks instead.',
 *             DeprecationWarning)
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_kp_u_free_all_free_is_deprecated_Use, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "cupy/cuda/memory.pyx":31
 * 
 * @atexit.register
 * def _exit():             # <<<<<<<<<<<<<<
 *     _exit_mode = True
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_n_s_exit_mode); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cupy_cuda_memory_pyx, __pyx_n_s_exit, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 31, __pyx_L1_error)

  /* "cupy/cuda/memory.pyx":35
 * 
 * 
 * class OutOfMemoryError(MemoryError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, size, total):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_builtin_MemoryError); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "cupy/cuda/memory.pyx":37
 * class OutOfMemoryError(MemoryError):
 * 
 *     def __init__(self, size, total):             # <<<<<<<<<<<<<<
 *         msg = 'out of memory to allocate %d bytes ' \
 *               '(total %d bytes)' % (size, total)
 */
  __pyx_tuple__10 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_size, __pyx_n_s_total, __pyx_n_s_msg); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cupy_cuda_memory_pyx, __pyx_n_s_init, 37, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 37, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__12 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BaseMemory, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__14 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Memory, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__16 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_UnownedMemory, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__18 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ManagedMemory, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__20 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle__Chunk, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__22 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_MemoryPointer, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__24 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PooledMemory, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__26 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_SingleDeviceMemor, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__28 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_MemoryPool, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__30 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CFunctionAllocato, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_tuple__32 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_CFunctionAllocato_2, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_iterkeys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_512 = PyInt_FromLong(512); if (unlikely(!__pyx_int_512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6736645 = PyInt_FromLong(6736645L); if (unlikely(!__pyx_int_6736645)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33037971 = PyInt_FromLong(33037971L); if (unlikely(!__pyx_int_33037971)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_58968071 = PyInt_FromLong(58968071L); if (unlikely(!__pyx_int_58968071)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_126283891 = PyInt_FromLong(126283891L); if (unlikely(!__pyx_int_126283891)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_134903639 = PyInt_FromLong(134903639L); if (unlikely(!__pyx_int_134903639)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_216866913 = PyInt_FromLong(216866913L); if (unlikely(!__pyx_int_216866913)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_247866700 = PyInt_FromLong(247866700L); if (unlikely(!__pyx_int_247866700)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_250303632 = PyInt_FromLong(250303632L); if (unlikely(!__pyx_int_250303632)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_262405472 = PyInt_FromLong(262405472L); if (unlikely(!__pyx_int_262405472)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4cupy_4cuda_6memory__peer_access_checked = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_4cupy_4cuda_6memory__current_allocator = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("alloc", (void (*)(void))__pyx_f_4cupy_4cuda_6memory_alloc, "struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("set_allocator", (void (*)(void))__pyx_f_4cupy_4cuda_6memory_set_allocator, "PyObject *(int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_set_allocator *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_BaseMemory) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_BaseMemory.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_BaseMemory.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_BaseMemory.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_BaseMemory.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cupy_4cuda_6memory_BaseMemory, "__int__"); if (unlikely(!wrapper)) __PYX_ERR(0, 44, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cupy_4cuda_6memory_10BaseMemory___int__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cupy_4cuda_6memory_10BaseMemory___int__.doc = __pyx_doc_4cupy_4cuda_6memory_10BaseMemory___int__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cupy_4cuda_6memory_10BaseMemory___int__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BaseMemory, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_BaseMemory) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_BaseMemory) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_BaseMemory = &__pyx_type_4cupy_4cuda_6memory_BaseMemory;
  __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer = &__pyx_vtable_4cupy_4cuda_6memory_MemoryPointer;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer._init = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *, ptrdiff_t))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer__init;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_from_device = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_from_device_async = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async *__pyx_optional_args))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_device_async;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_from_host = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_from_host_async = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async *__pyx_optional_args))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_host_async;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_from = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_from_async = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async *__pyx_optional_args))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_from_async;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_to_host = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.copy_to_host_async = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, PyObject *, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async *__pyx_optional_args))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_copy_to_host_async;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.memset = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, int, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPointer.memset_async = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *, int, size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_13MemoryPointer_memset_async *__pyx_optional_args))__pyx_f_4cupy_4cuda_6memory_13MemoryPointer_memset_async;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_MemoryPointer) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_MemoryPointer.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_MemoryPointer.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_MemoryPointer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_MemoryPointer.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cupy_4cuda_6memory_MemoryPointer, "__int__"); if (unlikely(!wrapper)) __PYX_ERR(0, 248, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_2__int__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_2__int__.doc = __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_2__int__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_2__int__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cupy_4cuda_6memory_MemoryPointer, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 248, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_4__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_4__add__.doc = __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_4__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_4__add__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cupy_4cuda_6memory_MemoryPointer, "__iadd__"); if (unlikely(!wrapper)) __PYX_ERR(0, 248, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__.doc = __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_6__iadd__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cupy_4cuda_6memory_MemoryPointer, "__sub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 248, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_8__sub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_8__sub__.doc = __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_8__sub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_8__sub__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cupy_4cuda_6memory_MemoryPointer, "__isub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 248, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_10__isub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_10__isub__.doc = __pyx_doc_4cupy_4cuda_6memory_13MemoryPointer_10__isub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cupy_4cuda_6memory_13MemoryPointer_10__isub__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cupy_4cuda_6memory_MemoryPointer.tp_dict, __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPointer) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MemoryPointer, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_MemoryPointer) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_MemoryPointer) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_MemoryPointer = &__pyx_type_4cupy_4cuda_6memory_MemoryPointer;
  __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPool = &__pyx_vtable_4cupy_4cuda_6memory_MemoryPool;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPool.malloc = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_10MemoryPool_malloc;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPool.free_all_blocks = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks *__pyx_optional_args))__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_all_blocks;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPool.free_all_free = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_all_free;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPool.n_free_blocks = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_10MemoryPool_n_free_blocks;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPool.used_bytes = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_10MemoryPool_used_bytes;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPool.free_bytes = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_10MemoryPool_free_bytes;
  __pyx_vtable_4cupy_4cuda_6memory_MemoryPool.total_bytes = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_MemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_10MemoryPool_total_bytes;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_MemoryPool) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_MemoryPool.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_MemoryPool.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_MemoryPool.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_MemoryPool.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cupy_4cuda_6memory_MemoryPool.tp_dict, __pyx_vtabptr_4cupy_4cuda_6memory_MemoryPool) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MemoryPool, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_MemoryPool) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_MemoryPool) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_MemoryPool = &__pyx_type_4cupy_4cuda_6memory_MemoryPool;
  __pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory.tp_base = __pyx_ptype_4cupy_4cuda_6memory_BaseMemory;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CFunctionAllocatorMemory, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory) < 0) __PYX_ERR(0, 1169, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_CFunctionAllocatorMemory = &__pyx_type_4cupy_4cuda_6memory_CFunctionAllocatorMemory;
  __pyx_vtabptr_4cupy_4cuda_6memory_CFunctionAllocator = &__pyx_vtable_4cupy_4cuda_6memory_CFunctionAllocator;
  __pyx_vtable_4cupy_4cuda_6memory_CFunctionAllocator.malloc = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*)(struct __pyx_obj_4cupy_4cuda_6memory_CFunctionAllocator *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_18CFunctionAllocator_malloc;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_CFunctionAllocator) < 0) __PYX_ERR(0, 1187, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_CFunctionAllocator.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_CFunctionAllocator.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_CFunctionAllocator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_CFunctionAllocator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cupy_4cuda_6memory_CFunctionAllocator.tp_dict, __pyx_vtabptr_4cupy_4cuda_6memory_CFunctionAllocator) < 0) __PYX_ERR(0, 1187, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CFunctionAllocator, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_CFunctionAllocator) < 0) __PYX_ERR(0, 1187, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_CFunctionAllocator) < 0) __PYX_ERR(0, 1187, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_CFunctionAllocator = &__pyx_type_4cupy_4cuda_6memory_CFunctionAllocator;
  __pyx_type_4cupy_4cuda_6memory_Memory.tp_base = __pyx_ptype_4cupy_4cuda_6memory_BaseMemory;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_Memory) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_Memory.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_Memory.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_Memory.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_Memory.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Memory, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_Memory) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_Memory) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_Memory = &__pyx_type_4cupy_4cuda_6memory_Memory;
  __pyx_type_4cupy_4cuda_6memory_UnownedMemory.tp_base = __pyx_ptype_4cupy_4cuda_6memory_BaseMemory;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_UnownedMemory) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_UnownedMemory.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_UnownedMemory.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_UnownedMemory.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_UnownedMemory.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UnownedMemory, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_UnownedMemory) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_UnownedMemory) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_UnownedMemory = &__pyx_type_4cupy_4cuda_6memory_UnownedMemory;
  __pyx_type_4cupy_4cuda_6memory_ManagedMemory.tp_base = __pyx_ptype_4cupy_4cuda_6memory_BaseMemory;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_ManagedMemory) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_ManagedMemory.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_ManagedMemory.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_ManagedMemory.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_ManagedMemory.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ManagedMemory, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_ManagedMemory) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_ManagedMemory) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_ManagedMemory = &__pyx_type_4cupy_4cuda_6memory_ManagedMemory;
  __pyx_vtabptr_4cupy_4cuda_6memory__Chunk = &__pyx_vtable_4cupy_4cuda_6memory__Chunk;
  __pyx_vtable_4cupy_4cuda_6memory__Chunk._init = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, struct __pyx_obj_4cupy_4cuda_6memory_BaseMemory *, ptrdiff_t, size_t, Py_ssize_t))__pyx_f_4cupy_4cuda_6memory_6_Chunk__init;
  __pyx_vtable_4cupy_4cuda_6memory__Chunk.ptr = (intptr_t (*)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_6_Chunk_ptr;
  __pyx_vtable_4cupy_4cuda_6memory__Chunk.split = (struct __pyx_obj_4cupy_4cuda_6memory__Chunk *(*)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_6_Chunk_split;
  __pyx_vtable_4cupy_4cuda_6memory__Chunk.merge = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, struct __pyx_obj_4cupy_4cuda_6memory__Chunk *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_6_Chunk_merge;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory__Chunk) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory__Chunk.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory__Chunk.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory__Chunk.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory__Chunk.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_4cupy_4cuda_6memory__Chunk.tp_dict, __pyx_vtabptr_4cupy_4cuda_6memory__Chunk) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Chunk, (PyObject *)&__pyx_type_4cupy_4cuda_6memory__Chunk) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory__Chunk) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory__Chunk = &__pyx_type_4cupy_4cuda_6memory__Chunk;
  __pyx_vtabptr_4cupy_4cuda_6memory_PooledMemory = &__pyx_vtable_4cupy_4cuda_6memory_PooledMemory;
  __pyx_vtable_4cupy_4cuda_6memory_PooledMemory.free = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_PooledMemory *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_12PooledMemory_free;
  __pyx_type_4cupy_4cuda_6memory_PooledMemory.tp_base = __pyx_ptype_4cupy_4cuda_6memory_BaseMemory;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_PooledMemory) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_PooledMemory.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_PooledMemory.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_PooledMemory.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_PooledMemory.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_4cupy_4cuda_6memory_PooledMemory.tp_dict, __pyx_vtabptr_4cupy_4cuda_6memory_PooledMemory) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PooledMemory, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_PooledMemory) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_PooledMemory) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_PooledMemory = &__pyx_type_4cupy_4cuda_6memory_PooledMemory;
  __pyx_vtabptr_4cupy_4cuda_6memory_SingleDeviceMemoryPool = &__pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool._arena = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool._arena_index = (std::vector<size_t>  *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_index;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool._arena_flag = (std::vector<int8_t>  *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__arena_flag;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool._alloc = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, Py_ssize_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__alloc;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.malloc = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_malloc;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool._malloc = (struct __pyx_obj_4cupy_4cuda_6memory_MemoryPointer *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool__malloc;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.free = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, intptr_t, size_t, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.free_all_blocks = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks *__pyx_optional_args))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_blocks;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.free_all_free = (PyObject *(*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_all_free;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.n_free_blocks = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_n_free_blocks;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.used_bytes = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_used_bytes;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.free_bytes = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_free_bytes;
  __pyx_vtable_4cupy_4cuda_6memory_SingleDeviceMemoryPool.total_bytes = (size_t (*)(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool *, int __pyx_skip_dispatch))__pyx_f_4cupy_4cuda_6memory_22SingleDeviceMemoryPool_total_bytes;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool.tp_dict, __pyx_vtabptr_4cupy_4cuda_6memory_SingleDeviceMemoryPool) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SingleDeviceMemoryPool, (PyObject *)&__pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  if (__pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool.tp_weaklistoffset == 0) __pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool.tp_weaklistoffset = offsetof(struct __pyx_obj_4cupy_4cuda_6memory_SingleDeviceMemoryPool, __weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  __pyx_ptype_4cupy_4cuda_6memory_SingleDeviceMemoryPool = &__pyx_type_4cupy_4cuda_6memory_SingleDeviceMemoryPool;
  if (PyType_Ready(&__pyx_type_4cupy_4cuda_6memory___pyx_scope_struct____init__) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __pyx_type_4cupy_4cuda_6memory___pyx_scope_struct____init__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cupy_4cuda_6memory___pyx_scope_struct____init__.tp_dictoffset && __pyx_type_4cupy_4cuda_6memory___pyx_scope_struct____init__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cupy_4cuda_6memory___pyx_scope_struct____init__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cupy_4cuda_6memory___pyx_scope_struct____init__ = &__pyx_type_4cupy_4cuda_6memory___pyx_scope_struct____init__;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cupy.cuda.device"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cupy_4cuda_6device_Device = __Pyx_ImportType(__pyx_t_1, "cupy.cuda.device", "Device", sizeof(struct __pyx_obj_4cupy_4cuda_6device_Device), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cupy_4cuda_6device_Device) __PYX_ERR(3, 7, __pyx_L1_error)
  __pyx_vtabptr_4cupy_4cuda_6device_Device = (struct __pyx_vtabstruct_4cupy_4cuda_6device_Device*)__Pyx_GetVtable(__pyx_ptype_4cupy_4cuda_6device_Device->tp_dict); if (unlikely(!__pyx_vtabptr_4cupy_4cuda_6device_Device)) __PYX_ERR(3, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cupy.cuda.runtime"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cupy_4cuda_7runtime_PointerAttributes = __Pyx_ImportType(__pyx_t_1, "cupy.cuda.runtime", "PointerAttributes", sizeof(struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cupy_4cuda_7runtime_PointerAttributes) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cupy.cuda.device"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_device_id", (void (**)(void))&__pyx_f_4cupy_4cuda_6device_get_device_id, "int (int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = PyImport_ImportModule("fastrlock.rlock"); if (!__pyx_t_2) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "create_fastrlock", (void (**)(void))&__pyx_f_9fastrlock_5rlock_create_fastrlock, "PyObject *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "lock_fastrlock", (void (**)(void))&__pyx_f_9fastrlock_5rlock_lock_fastrlock, "int (PyObject *, long, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "unlock_fastrlock", (void (**)(void))&__pyx_f_9fastrlock_5rlock_unlock_fastrlock, "int (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = PyImport_ImportModule("cupy.cuda.memory_hook"); if (!__pyx_t_3) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_3, "_has_memory_hooks", (void (**)(void))&__pyx_f_4cupy_4cuda_11memory_hook__has_memory_hooks, "int (int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_3, "get_memory_hooks", (void (**)(void))&__pyx_f_4cupy_4cuda_11memory_hook_get_memory_hooks, "PyObject *(int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = PyImport_ImportModule("cupy.cuda.runtime"); if (!__pyx_t_4) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "getDevice", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_getDevice, "int (int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "setDevice", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_setDevice, "PyObject *(int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "deviceCanAccessPeer", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_deviceCanAccessPeer, "int (int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "deviceEnablePeerAccess", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_deviceEnablePeerAccess, "PyObject *(int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "malloc", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_malloc, "intptr_t (size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "mallocManaged", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_mallocManaged, "intptr_t (size_t, int __pyx_skip_dispatch, struct __pyx_opt_args_4cupy_4cuda_7runtime_mallocManaged *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "free", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_free, "PyObject *(intptr_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "memcpy", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_memcpy, "PyObject *(intptr_t, intptr_t, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "memcpyAsync", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_memcpyAsync, "PyObject *(intptr_t, intptr_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "memset", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_memset, "PyObject *(intptr_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "memsetAsync", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_memsetAsync, "PyObject *(intptr_t, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "memPrefetchAsync", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_memPrefetchAsync, "PyObject *(intptr_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "memAdvise", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_memAdvise, "PyObject *(intptr_t, size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "pointerGetAttributes", (void (**)(void))&__pyx_f_4cupy_4cuda_7runtime_pointerGetAttributes, "struct __pyx_obj_4cupy_4cuda_7runtime_PointerAttributes *(intptr_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = PyImport_ImportModule("cupy.cuda.stream"); if (!__pyx_t_5) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_5, "get_current_stream_ptr", (void (**)(void))&__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr, "size_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmemory(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmemory(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_memory(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_memory(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_memory(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'memory' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_memory(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("memory", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cupy__cuda__memory) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cupy.cuda.memory")) {
      if (unlikely(PyDict_SetItemString(modules, "cupy.cuda.memory", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cupy/cuda/memory.pyx":4
 * cimport cython  # NOQA
 * 
 * import atexit             # <<<<<<<<<<<<<<
 * import collections
 * import ctypes
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_atexit, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_atexit, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":5
 * 
 * import atexit
 * import collections             # <<<<<<<<<<<<<<
 * import ctypes
 * import gc
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":6
 * import atexit
 * import collections
 * import ctypes             # <<<<<<<<<<<<<<
 * import gc
 * import warnings
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ctypes, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":7
 * import collections
 * import ctypes
 * import gc             # <<<<<<<<<<<<<<
 * import warnings
 * import weakref
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gc, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gc, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":8
 * import ctypes
 * import gc
 * import warnings             # <<<<<<<<<<<<<<
 * import weakref
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":9
 * import gc
 * import warnings
 * import weakref             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport pythread
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_weakref, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":18
 * from libcpp cimport algorithm
 * 
 * from cupy.cuda import runtime             # <<<<<<<<<<<<<<
 * 
 * from cupy.cuda cimport device
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_runtime);
  __Pyx_GIVEREF(__pyx_n_s_runtime);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_runtime);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cupy_cuda, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_runtime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_runtime, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":27
 * 
 * 
 * cdef bint _exit_mode = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_4cupy_4cuda_6memory__exit_mode = 0;

  /* "cupy/cuda/memory.pyx":30
 * 
 * 
 * @atexit.register             # <<<<<<<<<<<<<<
 * def _exit():
 *     _exit_mode = True
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_atexit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cupy/cuda/memory.pyx":31
 * 
 * @atexit.register
 * def _exit():             # <<<<<<<<<<<<<<
 *     _exit_mode = True
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_1_exit, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cupy/cuda/memory.pyx":30
 * 
 * 
 * @atexit.register             # <<<<<<<<<<<<<<
 * def _exit():
 *     _exit_mode = True
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_exit, __pyx_t_3) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":35
 * 
 * 
 * class OutOfMemoryError(MemoryError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, size, total):
 */
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_tuple__9, __pyx_n_s_OutOfMemoryError, __pyx_n_s_OutOfMemoryError, (PyObject *) NULL, __pyx_n_s_cupy_cuda_memory, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cupy/cuda/memory.pyx":37
 * class OutOfMemoryError(MemoryError):
 * 
 *     def __init__(self, size, total):             # <<<<<<<<<<<<<<
 *         msg = 'out of memory to allocate %d bytes ' \
 *               '(total %d bytes)' % (size, total)
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_16OutOfMemoryError_1__init__, 0, __pyx_n_s_OutOfMemoryError___init, NULL, __pyx_n_s_cupy_cuda_memory, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/memory.pyx":35
 * 
 * 
 * class OutOfMemoryError(MemoryError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, size, total):
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_OutOfMemoryError, __pyx_tuple__9, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OutOfMemoryError, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":151
 * 
 * 
 * cdef set _peer_access_checked = set()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_4cupy_4cuda_6memory__peer_access_checked);
  __Pyx_DECREF_SET(__pyx_v_4cupy_4cuda_6memory__peer_access_checked, ((PyObject*)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":509
 * 
 * 
 * cdef object _current_allocator = _malloc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_malloc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(__pyx_v_4cupy_4cuda_6memory__current_allocator);
  __Pyx_DECREF_SET(__pyx_v_4cupy_4cuda_6memory__current_allocator, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":611
 * 
 * 
 * cdef int _index_compaction_threshold = 512             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_4cupy_4cuda_6memory__index_compaction_threshold = 0x200;

  /* "cupy/cuda/memory.pyx":767
 * DEF ALLOCATION_UNIT_SIZE = 512
 * # for test
 * _allocation_unit_size = ALLOCATION_UNIT_SIZE             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_allocation_unit_size, __pyx_int_512) < 0) __PYX_ERR(0, 767, __pyx_L1_error)

  /* "cupy/cuda/memory.pyx":818
 *         map.map[size_t, vector.vector[int8_t]] _flag
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._in_use = {}
 *         self._free = {}
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_4cupy_4cuda_6memory_SingleDeviceMemoryPool, __pyx_n_s_malloc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_ = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":1071
 *     """
 * 
 *     def __init__(self, allocator=_malloc):             # <<<<<<<<<<<<<<
 *         self._pools = collections.defaultdict(
 *             lambda: SingleDeviceMemoryPool(allocator))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_malloc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k__5 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_21__pyx_unpickle_BaseMemory, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BaseMemory, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseMemory__set_state(<BaseMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseMemory__set_state(BaseMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.ptr = __pyx_state[1]; __pyx_result.size = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_23__pyx_unpickle_Memory, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Memory, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_UnownedMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_25__pyx_unpickle_UnownedMemory, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_UnownedMemory, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_UnownedMemory__set_state(<UnownedMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_UnownedMemory__set_state(UnownedMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._owner = __pyx_state[0]; __pyx_result.device_id = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_27__pyx_unpickle_ManagedMemory, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ManagedMemory, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle__Chunk(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_29__pyx_unpickle__Chunk, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle__Chunk, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle__Chunk__set_state(<_Chunk> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle__Chunk__set_state(_Chunk __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.mem = __pyx_state[0]; __pyx_result.next = __pyx_state[1]; __pyx_result.offset = __pyx_state[2]; __pyx_result.prev = __pyx_state[3]; __pyx_result.size = __pyx_state[4]; __pyx_result.stream_ptr = __pyx_state[5]
 *     if len(__pyx_state) > 6 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_31__pyx_unpickle_MemoryPointer, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_MemoryPointer, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PooledMemory(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_33__pyx_unpickle_PooledMemory, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PooledMemory, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PooledMemory__set_state(<PooledMemory> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PooledMemory__set_state(PooledMemory __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.device_id = __pyx_state[0]; __pyx_result.pool = __pyx_state[1]; __pyx_result.ptr = __pyx_state[2]; __pyx_result.size = __pyx_state[3]
 *     if len(__pyx_state) > 4 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_35__pyx_unpickle_SingleDeviceMemoryPool, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_SingleDeviceMemor, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MemoryPool(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_37__pyx_unpickle_MemoryPool, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_MemoryPool, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_MemoryPool__set_state(<MemoryPool> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MemoryPool__set_state(MemoryPool __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._pools = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_39__pyx_unpickle_CFunctionAllocatorMemory, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_CFunctionAllocato, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_CFunctionAllocator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4cupy_4cuda_6memory_41__pyx_unpickle_CFunctionAllocator, NULL, __pyx_n_s_cupy_cuda_memory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_CFunctionAllocato_2, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/memory.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * cimport cython  # NOQA
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py_size_t__and_std_3a__3a_vector_3c_size_t_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cupy.cuda.memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cupy.cuda.memory");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* SliceObject */
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* py_set_discard_unhashable */
static int __Pyx_PySet_DiscardUnhashable(PyObject *set, PyObject *key) {
    PyObject *tmpkey;
    int rv;
    if (likely(!PySet_Check(key) || !PyErr_ExceptionMatches(PyExc_TypeError)))
        return -1;
    PyErr_Clear();
    tmpkey = __Pyx_PyFrozenSet_New(key);
    if (tmpkey == NULL)
        return -1;
    rv = PySet_Discard(set, tmpkey);
    Py_DECREF(tmpkey);
    return rv;
}

/* py_set_remove */
static int __Pyx_PySet_RemoveNotFound(PyObject *set, PyObject *key, int found) {
    if (unlikely(found < 0)) {
        found = __Pyx_PySet_DiscardUnhashable(set, key);
    }
    if (likely(found == 0)) {
        PyObject *tup;
        tup = PyTuple_Pack(1, key);
        if (!tup)
            return -1;
        PyErr_SetObject(PyExc_KeyError, tup);
        Py_DECREF(tup);
        return -1;
    }
    return found;
}
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key) {
    int found = PySet_Discard(set, key);
    if (unlikely(found != 1)) {
        return __Pyx_PySet_RemoveNotFound(set, key, found);
    }
    return 0;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* py_dict_pop */
static CYTHON_INLINE PyObject *__Pyx_PyDict_Pop(PyObject *d, PyObject *key, PyObject *default_value) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B3
    if ((1)) {
        return _PyDict_Pop(d, key, default_value);
    } else
#endif
    if (default_value) {
        return __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_pop, d, key, default_value);
    } else {
        return __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_pop, d, key);
    }
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_iterkeys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_IterKeys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_iterkeys, d);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ptrdiff_t(ptrdiff_t value) {
    const ptrdiff_t neg_one = (ptrdiff_t) ((ptrdiff_t) 0 - (ptrdiff_t) 1), const_zero = (ptrdiff_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ptrdiff_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ptrdiff_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ptrdiff_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ptrdiff_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ptrdiff_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ptrdiff_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int8_t(int8_t value) {
    const int8_t neg_one = (int8_t) ((int8_t) 0 - (int8_t) 1), const_zero = (int8_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int8_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int8_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int8_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE ptrdiff_t __Pyx_PyInt_As_ptrdiff_t(PyObject *x) {
    const ptrdiff_t neg_one = (ptrdiff_t) ((ptrdiff_t) 0 - (ptrdiff_t) 1), const_zero = (ptrdiff_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ptrdiff_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ptrdiff_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ptrdiff_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ptrdiff_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ptrdiff_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(ptrdiff_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) >= 2 * PyLong_SHIFT) {
                            return (ptrdiff_t) (((((ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ptrdiff_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) >= 3 * PyLong_SHIFT) {
                            return (ptrdiff_t) (((((((ptrdiff_t)digits[2]) << PyLong_SHIFT) | (ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ptrdiff_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) >= 4 * PyLong_SHIFT) {
                            return (ptrdiff_t) (((((((((ptrdiff_t)digits[3]) << PyLong_SHIFT) | (ptrdiff_t)digits[2]) << PyLong_SHIFT) | (ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ptrdiff_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ptrdiff_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ptrdiff_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ptrdiff_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ptrdiff_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ptrdiff_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ptrdiff_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ptrdiff_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ptrdiff_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) - 1 > 2 * PyLong_SHIFT) {
                            return (ptrdiff_t) (((ptrdiff_t)-1)*(((((ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ptrdiff_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) - 1 > 2 * PyLong_SHIFT) {
                            return (ptrdiff_t) ((((((ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ptrdiff_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) - 1 > 3 * PyLong_SHIFT) {
                            return (ptrdiff_t) (((ptrdiff_t)-1)*(((((((ptrdiff_t)digits[2]) << PyLong_SHIFT) | (ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ptrdiff_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) - 1 > 3 * PyLong_SHIFT) {
                            return (ptrdiff_t) ((((((((ptrdiff_t)digits[2]) << PyLong_SHIFT) | (ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ptrdiff_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) - 1 > 4 * PyLong_SHIFT) {
                            return (ptrdiff_t) (((ptrdiff_t)-1)*(((((((((ptrdiff_t)digits[3]) << PyLong_SHIFT) | (ptrdiff_t)digits[2]) << PyLong_SHIFT) | (ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ptrdiff_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ptrdiff_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ptrdiff_t) - 1 > 4 * PyLong_SHIFT) {
                            return (ptrdiff_t) ((((((((((ptrdiff_t)digits[3]) << PyLong_SHIFT) | (ptrdiff_t)digits[2]) << PyLong_SHIFT) | (ptrdiff_t)digits[1]) << PyLong_SHIFT) | (ptrdiff_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ptrdiff_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ptrdiff_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ptrdiff_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ptrdiff_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ptrdiff_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ptrdiff_t) -1;
        }
    } else {
        ptrdiff_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ptrdiff_t) -1;
        val = __Pyx_PyInt_As_ptrdiff_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ptrdiff_t");
    return (ptrdiff_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ptrdiff_t");
    return (ptrdiff_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int8_t __Pyx_PyInt_As_int8_t(PyObject *x) {
    const int8_t neg_one = (int8_t) ((int8_t) 0 - (int8_t) 1), const_zero = (int8_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int8_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int8_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int8_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) >= 2 * PyLong_SHIFT) {
                            return (int8_t) (((((int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) >= 3 * PyLong_SHIFT) {
                            return (int8_t) (((((((int8_t)digits[2]) << PyLong_SHIFT) | (int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) >= 4 * PyLong_SHIFT) {
                            return (int8_t) (((((((((int8_t)digits[3]) << PyLong_SHIFT) | (int8_t)digits[2]) << PyLong_SHIFT) | (int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int8_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int8_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int8_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int8_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int8_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int8_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int8_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int8_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int8_t) (((int8_t)-1)*(((((int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int8_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int8_t) ((((((int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int8_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int8_t) (((int8_t)-1)*(((((((int8_t)digits[2]) << PyLong_SHIFT) | (int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int8_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int8_t) ((((((((int8_t)digits[2]) << PyLong_SHIFT) | (int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int8_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int8_t) (((int8_t)-1)*(((((((((int8_t)digits[3]) << PyLong_SHIFT) | (int8_t)digits[2]) << PyLong_SHIFT) | (int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int8_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int8_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int8_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int8_t) ((((((((((int8_t)digits[3]) << PyLong_SHIFT) | (int8_t)digits[2]) << PyLong_SHIFT) | (int8_t)digits[1]) << PyLong_SHIFT) | (int8_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int8_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int8_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int8_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int8_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int8_t) -1;
        }
    } else {
        int8_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int8_t) -1;
        val = __Pyx_PyInt_As_int8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int8_t");
    return (int8_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int8_t");
    return (int8_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
