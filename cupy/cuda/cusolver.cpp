/* Generated by Cython 0.29.6 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "_GLIBCXX_USE_CXX11_ABI",
                "0"
            ],
            [
                "_FORCE_INLINES",
                "1"
            ]
        ],
        "depends": [
            "cupy/cuda/cupy_cuComplex.h",
            "cupy/cuda/cupy_cusolver.h"
        ],
        "extra_compile_args": [
            "-fopenmp"
        ],
        "extra_link_args": [
            "-fopenmp",
            "-Wl,--disable-new-dtags,-rpath,/usr/local/cuda/lib64"
        ],
        "include_dirs": [
            "cupy/cuda",
            "/usr/local/cuda/include"
        ],
        "language": "c++",
        "libraries": [
            "cusolver"
        ],
        "library_dirs": [
            "/usr/local/cuda/lib64"
        ],
        "name": "cupy.cuda.cusolver",
        "sources": [
            "cupy/cuda/cusolver.pyx"
        ]
    },
    "module_name": "cupy.cuda.cusolver"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_6"
#define CYTHON_HEX_VERSION 0x001D06F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cupy__cuda__cusolver
#define __PYX_HAVE_API__cupy__cuda__cusolver
/* Early includes */
#include <stdint.h>
#include "cupy_cuComplex.h"
#include "cupy_cusolver.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cupy/cuda/cusolver.pyx",
  "cupy/cuda/cusolver.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/

/* "cupy/cuda/driver.pxd":23
 *     ctypedef int CUjitInputType 'CUjitInputType'
 * 
 * cpdef enum:             # <<<<<<<<<<<<<<
 *     CU_JIT_INPUT_CUBIN = 0
 *     CU_JIT_INPUT_PTX = 1
 */
enum  {
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_CUBIN = 0,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_PTX = 1,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_FATBINARY = 2,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_OBJECT = 3,
  __pyx_e_4cupy_4cuda_6driver_CU_JIT_INPUT_LIBRARY = 4
};

/* "cupy/cuda/cusolver.pxd":30
 * ###############################################################################
 * 
 * cpdef enum:             # <<<<<<<<<<<<<<
 *     CUSOLVER_EIG_TYPE_1 = 1
 *     CUSOLVER_EIG_TYPE_2 = 2
 */
enum  {
  __pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_TYPE_1 = 1,
  __pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_TYPE_2 = 2,
  __pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_TYPE_3 = 3,
  __pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_MODE_NOVECTOR = 0,
  __pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_MODE_VECTOR = 1
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cupy.cuda.driver' */

/* Module declarations from 'cython' */

/* Module declarations from 'cupy.cuda' */

/* Module declarations from 'cupy.cuda.stream' */
static size_t (*__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr)(void); /*proto*/

/* Module declarations from 'cupy.cuda.cusolver' */
static PyObject *__pyx_v_4cupy_4cuda_8cusolver_STATUS = 0;
static size_t __pyx_f_4cupy_4cuda_8cusolver_create(int __pyx_skip_dispatch); /*proto*/
static size_t __pyx_f_4cupy_4cuda_8cusolver_spCreate(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_destroy(size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_setStream(size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static size_t __pyx_f_4cupy_4cuda_8cusolver_getStream(size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_spotrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dpotrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_spotrf(size_t, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dpotrf(size_t, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_spotrs(size_t, int, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dpotrs(size_t, int, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgetrf(size_t, int, int, size_t, int, size_t, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgetrf(size_t, int, int, size_t, int, size_t, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgetrs(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgetrs(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sgeqrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dgeqrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cgeqrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zgeqrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sgetrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dgetrf_bufferSize(size_t, int, int, size_t, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgeqrf(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgeqrf(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cgeqrf(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zgeqrf(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sorgqr_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dorgqr_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sorgqr(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dorgqr(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sormqr(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dormqr(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cormqr(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zormqr(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_ssytrf(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dsytrf(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgebrd(size_t, int, int, size_t, int, size_t, size_t, size_t, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgebrd(size_t, int, int, size_t, int, size_t, size_t, size_t, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sgesvd_bufferSize(size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dgesvd_bufferSize(size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cgesvd_bufferSize(size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zgesvd_bufferSize(size_t, int, int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgesvd(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgesvd(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cgesvd(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zgesvd(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_scsrlsvchol(size_t, int, int, size_t, size_t, size_t, size_t, size_t, float, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dcsrlsvchol(size_t, int, int, size_t, size_t, size_t, size_t, size_t, double, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_scsrlsvqr(size_t, int, int, size_t, size_t, size_t, size_t, size_t, float, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dcsrlsvqr(size_t, int, int, size_t, size_t, size_t, size_t, size_t, double, int, size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_4cupy_4cuda_8cusolver_check_status(int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_spSetStream(size_t, size_t, int __pyx_skip_dispatch); /*proto*/
static size_t __pyx_f_4cupy_4cuda_8cusolver_spGetStream(size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cungqr_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zungqr_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_ssyevd_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dsyevd_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cheevd_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zheevd_bufferSize(size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_ssyevd(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dsyevd(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cheevd(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zheevd(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "cupy.cuda.cusolver"
extern int __pyx_module_is_main_cupy__cuda__cusolver;
int __pyx_module_is_main_cupy__cuda__cusolver = 0;

/* Implementation of 'cupy.cuda.cusolver' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_super;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_W[] = "W";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_VT[] = "VT";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_lda[] = "lda";
static const char __pyx_k_ldb[] = "ldb";
static const char __pyx_k_ldc[] = "ldc";
static const char __pyx_k_ldu[] = "ldu";
static const char __pyx_k_nnz[] = "nnz";
static const char __pyx_k_tau[] = "tau";
static const char __pyx_k_tol[] = "tol";
static const char __pyx_k_Work[] = "Work";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_ipiv[] = "ipiv";
static const char __pyx_k_jobu[] = "jobu";
static const char __pyx_k_jobz[] = "jobz";
static const char __pyx_k_ldvt[] = "ldvt";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nrhs[] = "nrhs";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_side[] = "side";
static const char __pyx_k_tauP[] = "tauP";
static const char __pyx_k_tauQ[] = "tauQ";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_uplo[] = "uplo";
static const char __pyx_k_work[] = "work";
static const char __pyx_k_jobvt[] = "jobvt";
static const char __pyx_k_lwork[] = "lwork";
static const char __pyx_k_rwork[] = "rwork";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_trans[] = "trans";
static const char __pyx_k_descrA[] = "descrA";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_csrValA[] = "csrValA";
static const char __pyx_k_devInfo[] = "devInfo";
static const char __pyx_k_devIpiv[] = "devIpiv";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_reorder[] = "reorder";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_csrColIndA[] = "csrColIndA";
static const char __pyx_k_csrRowPtrA[] = "csrRowPtrA";
static const char __pyx_k_singularity[] = "singularity";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_CUSOLVERError[] = "CUSOLVERError";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cupy_cuda_cusolver[] = "cupy.cuda.cusolver";
static const char __pyx_k_CUSOLVERError___init[] = "CUSOLVERError.__init__";
static const char __pyx_k_cupy_cuda_cusolver_pyx[] = "cupy/cuda/cusolver.pyx";
static const char __pyx_k_CUSOLVER_STATUS_SUCCESS[] = "CUSOLVER_STATUS_SUCCESS";
static const char __pyx_k_Thin_wrapper_of_CUSOLVER[] = "Thin wrapper of CUSOLVER.";
static const char __pyx_k_CUSOLVER_STATUS_ZERO_PIVOT[] = "CUSOLVER_STATUS_ZERO_PIVOT";
static const char __pyx_k_CUSOLVER_STATUS_ALLOC_FAILED[] = "CUSOLVER_STATUS_ALLOC_FAILED";
static const char __pyx_k_CUSOLVER_STATUS_ARCH_MISMATCH[] = "CUSOLVER_STATUS_ARCH_MISMATCH";
static const char __pyx_k_CUSOLVER_STATUS_INVALID_VALUE[] = "CUSOLVER_STATUS_INVALID_VALUE";
static const char __pyx_k_CUSOLVER_STATUS_MAPPING_ERROR[] = "CUSOLVER_STATUS_MAPPING_ERROR";
static const char __pyx_k_CUSOLVER_STATUS_NOT_SUPPORTED[] = "CUSOLVER_STATUS_NOT_SUPPORTED";
static const char __pyx_k_CUSOLVER_STATUS_INTERNAL_ERROR[] = "CUSOLVER_STATUS_INTERNAL_ERROR";
static const char __pyx_k_CUSOLVER_STATUS_INVALID_LICENSE[] = "CUSOLVER_STATUS_INVALID_LICENSE";
static const char __pyx_k_CUSOLVER_STATUS_MATRIX_TYPE_NOT[] = "CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED";
static const char __pyx_k_CUSOLVER_STATUS_NOT_INITIALIZED[] = "CUSOLVER_STATUS_NOT_INITIALIZED";
static const char __pyx_k_CUSOLVER_STATUS_EXECUTION_FAILED[] = "CUSOLVER_STATUS_EXECUTION_FAILED";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_CUSOLVERError;
static PyObject *__pyx_n_s_CUSOLVERError___init;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_ALLOC_FAILED;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_ARCH_MISMATCH;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_EXECUTION_FAILED;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_INTERNAL_ERROR;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_INVALID_LICENSE;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_INVALID_VALUE;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_MAPPING_ERROR;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_MATRIX_TYPE_NOT;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_NOT_INITIALIZED;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_NOT_SUPPORTED;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_SUCCESS;
static PyObject *__pyx_n_u_CUSOLVER_STATUS_ZERO_PIVOT;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_U;
static PyObject *__pyx_n_s_VT;
static PyObject *__pyx_n_s_W;
static PyObject *__pyx_n_s_Work;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_csrColIndA;
static PyObject *__pyx_n_s_csrRowPtrA;
static PyObject *__pyx_n_s_csrValA;
static PyObject *__pyx_n_s_cupy_cuda_cusolver;
static PyObject *__pyx_kp_s_cupy_cuda_cusolver_pyx;
static PyObject *__pyx_n_s_descrA;
static PyObject *__pyx_n_s_devInfo;
static PyObject *__pyx_n_s_devIpiv;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_handle;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_ipiv;
static PyObject *__pyx_n_s_jobu;
static PyObject *__pyx_n_s_jobvt;
static PyObject *__pyx_n_s_jobz;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_lda;
static PyObject *__pyx_n_s_ldb;
static PyObject *__pyx_n_s_ldc;
static PyObject *__pyx_n_s_ldu;
static PyObject *__pyx_n_s_ldvt;
static PyObject *__pyx_n_s_lwork;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nnz;
static PyObject *__pyx_n_s_nrhs;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_reorder;
static PyObject *__pyx_n_s_rwork;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_side;
static PyObject *__pyx_n_s_singularity;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_tau;
static PyObject *__pyx_n_s_tauP;
static PyObject *__pyx_n_s_tauQ;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tol;
static PyObject *__pyx_n_s_trans;
static PyObject *__pyx_n_s_uplo;
static PyObject *__pyx_n_s_work;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_13CUSOLVERError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_check_status(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_status); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_2create(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_4spCreate(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_6destroy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_8setStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, size_t __pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_10getStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_12spSetStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, size_t __pyx_v_stream); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_14spGetStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_16spotrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_18dpotrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_20spotrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_22dpotrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_24spotrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_26dpotrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_28sgetrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, size_t __pyx_v_devIpiv, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_30dgetrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, size_t __pyx_v_devIpiv, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_32sgetrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_devIpiv, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_34dgetrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_devIpiv, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_36sgetrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_38dgetrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_40sgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_42dgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_44cgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_46zgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_48sgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_50dgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_52cgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_54zgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_56sorgqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_58dorgqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_60cungqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_62zungqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_64sorgqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_66dorgqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_68sormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_70dormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_72cormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_74zormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_76ssytrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_ipiv, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_78dsytrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_ipiv, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_80sgebrd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_D, size_t __pyx_v_E, size_t __pyx_v_tauQ, size_t __pyx_v_tauP, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_82dgebrd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_D, size_t __pyx_v_E, size_t __pyx_v_tauQ, size_t __pyx_v_tauP, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_84sgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_86dgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_88cgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_90zgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_92sgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_94dgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_96cgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_98zgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_100ssyevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_102dsyevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_104cheevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_106zheevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_108ssyevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_110dsyevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_112cheevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_114zheevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_116scsrlsvchol(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, float __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_118dcsrlsvchol(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, double __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_120scsrlsvqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, float __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity); /* proto */
static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_122dcsrlsvqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, double __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity); /* proto */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_codeobj__3;
/* Late includes */

/* "cupy/cuda/cusolver.pyx":235
 * class CUSOLVERError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUSOLVERError, self).__init__(STATUS[status])
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_13CUSOLVERError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_13CUSOLVERError___init__[] = "CUSOLVERError.__init__(self, status)";
static PyMethodDef __pyx_mdef_4cupy_4cuda_8cusolver_13CUSOLVERError_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_13CUSOLVERError_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_13CUSOLVERError___init__};
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_13CUSOLVERError_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_status = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_status,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_status)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 235, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 235, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_status = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 235, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.CUSOLVERError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_13CUSOLVERError___init__(__pyx_self, __pyx_v_self, __pyx_v_status);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_13CUSOLVERError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cupy/cuda/cusolver.pyx":236
 * 
 *     def __init__(self, status):
 *         self.status = status             # <<<<<<<<<<<<<<
 *         super(CUSOLVERError, self).__init__(STATUS[status])
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_status, __pyx_v_status) < 0) __PYX_ERR(0, 236, __pyx_L1_error)

  /* "cupy/cuda/cusolver.pyx":237
 *     def __init__(self, status):
 *         self.status = status
 *         super(CUSOLVERError, self).__init__(STATUS[status])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CUSOLVERError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_v_4cupy_4cuda_8cusolver_STATUS == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 237, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_4cupy_4cuda_8cusolver_STATUS, __pyx_v_status); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":235
 * class CUSOLVERError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUSOLVERError, self).__init__(STATUS[status])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cupy.cuda.cusolver.CUSOLVERError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":241
 * 
 * @cython.profile(False)
 * cpdef inline check_status(int status):             # <<<<<<<<<<<<<<
 *     if status != 0:
 *         raise CUSOLVERError(status)
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_1check_status(PyObject *__pyx_self, PyObject *__pyx_arg_status); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_4cupy_4cuda_8cusolver_check_status(int __pyx_v_status, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("check_status", 0);

  /* "cupy/cuda/cusolver.pyx":242
 * @cython.profile(False)
 * cpdef inline check_status(int status):
 *     if status != 0:             # <<<<<<<<<<<<<<
 *         raise CUSOLVERError(status)
 * 
 */
  __pyx_t_1 = ((__pyx_v_status != 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cupy/cuda/cusolver.pyx":243
 * cpdef inline check_status(int status):
 *     if status != 0:
 *         raise CUSOLVERError(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CUSOLVERError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_status); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 243, __pyx_L1_error)

    /* "cupy/cuda/cusolver.pyx":242
 * @cython.profile(False)
 * cpdef inline check_status(int status):
 *     if status != 0:             # <<<<<<<<<<<<<<
 *         raise CUSOLVERError(status)
 * 
 */
  }

  /* "cupy/cuda/cusolver.pyx":241
 * 
 * @cython.profile(False)
 * cpdef inline check_status(int status):             # <<<<<<<<<<<<<<
 *     if status != 0:
 *         raise CUSOLVERError(status)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cupy.cuda.cusolver.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_1check_status(PyObject *__pyx_self, PyObject *__pyx_arg_status); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_check_status[] = "check_status(int status)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_1check_status(PyObject *__pyx_self, PyObject *__pyx_arg_status) {
  int __pyx_v_status;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_status (wrapper)", 0);
  assert(__pyx_arg_status); {
    __pyx_v_status = __Pyx_PyInt_As_int(__pyx_arg_status); if (unlikely((__pyx_v_status == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_check_status(__pyx_self, ((int)__pyx_v_status));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_check_status(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_status) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("check_status", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.check_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":250
 * ###############################################################################
 * 
 * cpdef size_t create() except? 0:             # <<<<<<<<<<<<<<
 *     cdef Handle handle
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_3create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_8cusolver_create(CYTHON_UNUSED int __pyx_skip_dispatch) {
  cusolverDnHandle_t __pyx_v_handle;
  int __pyx_v_status;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("create", 0);

  /* "cupy/cuda/cusolver.pyx":252
 * cpdef size_t create() except? 0:
 *     cdef Handle handle
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCreate(&handle)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":253
 *     cdef Handle handle
 *     with nogil:
 *         status = cusolverDnCreate(&handle)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return <size_t>handle
 */
        __pyx_v_status = cusolverDnCreate((&__pyx_v_handle));
      }

      /* "cupy/cuda/cusolver.pyx":252
 * cpdef size_t create() except? 0:
 *     cdef Handle handle
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCreate(&handle)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":254
 *     with nogil:
 *         status = cusolverDnCreate(&handle)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return <size_t>handle
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":255
 *         status = cusolverDnCreate(&handle)
 *     check_status(status)
 *     return <size_t>handle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((size_t)__pyx_v_handle);
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":250
 * ###############################################################################
 * 
 * cpdef size_t create() except? 0:             # <<<<<<<<<<<<<<
 *     cdef Handle handle
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_3create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_2create[] = "create() -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_3create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_2create(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_2create(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_create(0); if (unlikely(__pyx_t_1 == ((size_t)0) && PyErr_Occurred())) __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":258
 * 
 * 
 * cpdef size_t spCreate() except? 0:             # <<<<<<<<<<<<<<
 *     cdef SpHandle handle
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_5spCreate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static size_t __pyx_f_4cupy_4cuda_8cusolver_spCreate(CYTHON_UNUSED int __pyx_skip_dispatch) {
  cusolverSpHandle_t __pyx_v_handle;
  int __pyx_v_status;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spCreate", 0);

  /* "cupy/cuda/cusolver.pyx":260
 * cpdef size_t spCreate() except? 0:
 *     cdef SpHandle handle
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpCreate(&handle)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":261
 *     cdef SpHandle handle
 *     with nogil:
 *         status = cusolverSpCreate(&handle)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return <size_t>handle
 */
        __pyx_v_status = cusolverSpCreate((&__pyx_v_handle));
      }

      /* "cupy/cuda/cusolver.pyx":260
 * cpdef size_t spCreate() except? 0:
 *     cdef SpHandle handle
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpCreate(&handle)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":262
 *     with nogil:
 *         status = cusolverSpCreate(&handle)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return <size_t>handle
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":263
 *         status = cusolverSpCreate(&handle)
 *     check_status(status)
 *     return <size_t>handle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((size_t)__pyx_v_handle);
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":258
 * 
 * 
 * cpdef size_t spCreate() except? 0:             # <<<<<<<<<<<<<<
 *     cdef SpHandle handle
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_5spCreate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_4spCreate[] = "spCreate() -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_5spCreate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spCreate (wrapper)", 0);
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_4spCreate(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_4spCreate(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("spCreate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spCreate(0); if (unlikely(__pyx_t_1 == ((size_t)0) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":266
 * 
 * 
 * cpdef destroy(size_t handle):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDestroy(<Handle>handle)
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_7destroy(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_destroy(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("destroy", 0);

  /* "cupy/cuda/cusolver.pyx":267
 * 
 * cpdef destroy(size_t handle):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDestroy(<Handle>handle)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":268
 * cpdef destroy(size_t handle):
 *     with nogil:
 *         status = cusolverDnDestroy(<Handle>handle)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cusolverDnDestroy(((cusolverDnHandle_t)__pyx_v_handle));
      }

      /* "cupy/cuda/cusolver.pyx":267
 * 
 * cpdef destroy(size_t handle):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDestroy(<Handle>handle)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":269
 *     with nogil:
 *         status = cusolverDnDestroy(<Handle>handle)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * ###############################################################################
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":266
 * 
 * 
 * cpdef destroy(size_t handle):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDestroy(<Handle>handle)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_7destroy(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_6destroy[] = "destroy(size_t handle)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_7destroy(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_6destroy(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_6destroy(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("destroy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_destroy(__pyx_v_handle, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":275
 * ###############################################################################
 * 
 * cpdef setStream(size_t handle, size_t stream):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSetStream(<Handle>handle, <driver.Stream>stream)
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_9setStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_setStream(size_t __pyx_v_handle, size_t __pyx_v_stream, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setStream", 0);

  /* "cupy/cuda/cusolver.pyx":276
 * 
 * cpdef setStream(size_t handle, size_t stream):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSetStream(<Handle>handle, <driver.Stream>stream)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":277
 * cpdef setStream(size_t handle, size_t stream):
 *     with nogil:
 *         status = cusolverDnSetStream(<Handle>handle, <driver.Stream>stream)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cusolverDnSetStream(((cusolverDnHandle_t)__pyx_v_handle), ((struct CUstream_st*)__pyx_v_stream));
      }

      /* "cupy/cuda/cusolver.pyx":276
 * 
 * cpdef setStream(size_t handle, size_t stream):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSetStream(<Handle>handle, <driver.Stream>stream)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":278
 *     with nogil:
 *         status = cusolverDnSetStream(<Handle>handle, <driver.Stream>stream)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":275
 * ###############################################################################
 * 
 * cpdef setStream(size_t handle, size_t stream):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSetStream(<Handle>handle, <driver.Stream>stream)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.setStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_9setStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_8setStream[] = "setStream(size_t handle, size_t stream)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_9setStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  size_t __pyx_v_stream;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setStream (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_stream,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setStream", 1, 2, 2, 1); __PYX_ERR(0, 275, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setStream") < 0)) __PYX_ERR(0, 275, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
    __pyx_v_stream = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_stream == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setStream", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 275, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.setStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_8setStream(__pyx_self, __pyx_v_handle, __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_8setStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, size_t __pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setStream", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_v_stream, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.setStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":281
 * 
 * 
 * cpdef size_t getStream(size_t handle) except? 0:             # <<<<<<<<<<<<<<
 *     cdef driver.Stream stream
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_11getStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static size_t __pyx_f_4cupy_4cuda_8cusolver_getStream(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct CUstream_st* __pyx_v_stream;
  int __pyx_v_status;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getStream", 0);

  /* "cupy/cuda/cusolver.pyx":283
 * cpdef size_t getStream(size_t handle) except? 0:
 *     cdef driver.Stream stream
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnGetStream(<Handle>handle, &stream)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":284
 *     cdef driver.Stream stream
 *     with nogil:
 *         status = cusolverDnGetStream(<Handle>handle, &stream)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return <size_t>stream
 */
        __pyx_v_status = cusolverDnGetStream(((cusolverDnHandle_t)__pyx_v_handle), (&__pyx_v_stream));
      }

      /* "cupy/cuda/cusolver.pyx":283
 * cpdef size_t getStream(size_t handle) except? 0:
 *     cdef driver.Stream stream
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnGetStream(<Handle>handle, &stream)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":285
 *     with nogil:
 *         status = cusolverDnGetStream(<Handle>handle, &stream)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return <size_t>stream
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":286
 *         status = cusolverDnGetStream(<Handle>handle, &stream)
 *     check_status(status)
 *     return <size_t>stream             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((size_t)__pyx_v_stream);
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":281
 * 
 * 
 * cpdef size_t getStream(size_t handle) except? 0:             # <<<<<<<<<<<<<<
 *     cdef driver.Stream stream
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.getStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_11getStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_10getStream[] = "getStream(size_t handle) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_11getStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStream (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.getStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_10getStream(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_10getStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getStream", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_getStream(__pyx_v_handle, 0); if (unlikely(__pyx_t_1 == ((size_t)0) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.getStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":289
 * 
 * 
 * cpdef spSetStream(size_t handle, size_t stream):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverSpSetStream(<SpHandle>handle, <driver.Stream>stream)
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_13spSetStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_spSetStream(size_t __pyx_v_handle, size_t __pyx_v_stream, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spSetStream", 0);

  /* "cupy/cuda/cusolver.pyx":290
 * 
 * cpdef spSetStream(size_t handle, size_t stream):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpSetStream(<SpHandle>handle, <driver.Stream>stream)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":291
 * cpdef spSetStream(size_t handle, size_t stream):
 *     with nogil:
 *         status = cusolverSpSetStream(<SpHandle>handle, <driver.Stream>stream)             # <<<<<<<<<<<<<<
 *     check_status(status)
 * 
 */
        __pyx_v_status = cusolverSpSetStream(((cusolverSpHandle_t)__pyx_v_handle), ((struct CUstream_st*)__pyx_v_stream));
      }

      /* "cupy/cuda/cusolver.pyx":290
 * 
 * cpdef spSetStream(size_t handle, size_t stream):
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpSetStream(<SpHandle>handle, <driver.Stream>stream)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":292
 *     with nogil:
 *         status = cusolverSpSetStream(<SpHandle>handle, <driver.Stream>stream)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":289
 * 
 * 
 * cpdef spSetStream(size_t handle, size_t stream):             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverSpSetStream(<SpHandle>handle, <driver.Stream>stream)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spSetStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_13spSetStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_12spSetStream[] = "spSetStream(size_t handle, size_t stream)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_13spSetStream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  size_t __pyx_v_stream;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spSetStream (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_stream,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spSetStream", 1, 2, 2, 1); __PYX_ERR(0, 289, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "spSetStream") < 0)) __PYX_ERR(0, 289, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
    __pyx_v_stream = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_stream == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("spSetStream", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 289, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.spSetStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_12spSetStream(__pyx_self, __pyx_v_handle, __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_12spSetStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, size_t __pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spSetStream", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spSetStream(__pyx_v_handle, __pyx_v_stream, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spSetStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":295
 * 
 * 
 * cpdef size_t spGetStream(size_t handle) except *:             # <<<<<<<<<<<<<<
 *     cdef driver.Stream stream
 *     with nogil:
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_15spGetStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static size_t __pyx_f_4cupy_4cuda_8cusolver_spGetStream(size_t __pyx_v_handle, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct CUstream_st* __pyx_v_stream;
  int __pyx_v_status;
  size_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spGetStream", 0);

  /* "cupy/cuda/cusolver.pyx":297
 * cpdef size_t spGetStream(size_t handle) except *:
 *     cdef driver.Stream stream
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpGetStream(<SpHandle>handle, &stream)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":298
 *     cdef driver.Stream stream
 *     with nogil:
 *         status = cusolverSpGetStream(<SpHandle>handle, &stream)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return <size_t>stream
 */
        __pyx_v_status = cusolverSpGetStream(((cusolverSpHandle_t)__pyx_v_handle), (&__pyx_v_stream));
      }

      /* "cupy/cuda/cusolver.pyx":297
 * cpdef size_t spGetStream(size_t handle) except *:
 *     cdef driver.Stream stream
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpGetStream(<SpHandle>handle, &stream)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":299
 *     with nogil:
 *         status = cusolverSpGetStream(<SpHandle>handle, &stream)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return <size_t>stream
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":300
 *         status = cusolverSpGetStream(<SpHandle>handle, &stream)
 *     check_status(status)
 *     return <size_t>stream             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((size_t)__pyx_v_stream);
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":295
 * 
 * 
 * cpdef size_t spGetStream(size_t handle) except *:             # <<<<<<<<<<<<<<
 *     cdef driver.Stream stream
 *     with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spGetStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_15spGetStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_14spGetStream[] = "spGetStream(size_t handle) -> size_t";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_15spGetStream(PyObject *__pyx_self, PyObject *__pyx_arg_handle) {
  size_t __pyx_v_handle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spGetStream (wrapper)", 0);
  assert(__pyx_arg_handle); {
    __pyx_v_handle = __Pyx_PyInt_As_size_t(__pyx_arg_handle); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.spGetStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_14spGetStream(__pyx_self, ((size_t)__pyx_v_handle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_14spGetStream(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("spGetStream", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spGetStream(__pyx_v_handle, 0); if (unlikely(__pyx_t_1 == ((size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spGetStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":307
 * ###############################################################################
 * 
 * cpdef int spotrf_bufferSize(size_t handle, int uplo,             # <<<<<<<<<<<<<<
 *                             int n, size_t A, int lda) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_17spotrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_spotrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spotrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":310
 *                             int n, size_t A, int lda) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSpotrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":311
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSpotrf_bufferSize(
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, <int>lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":312
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSpotrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, <int>lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnSpotrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((float *)__pyx_v_A), ((int)__pyx_v_lda), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":311
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSpotrf_bufferSize(
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, <int>lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":314
 *         status = cusolverDnSpotrf_bufferSize(
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, <int>lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":315
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, <int>lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int dpotrf_bufferSize(size_t handle, int uplo,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":307
 * ###############################################################################
 * 
 * cpdef int spotrf_bufferSize(size_t handle, int uplo,             # <<<<<<<<<<<<<<
 *                             int n, size_t A, int lda) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_17spotrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_16spotrf_bufferSize[] = "spotrf_bufferSize(size_t handle, int uplo, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_17spotrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spotrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 307, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "spotrf_bufferSize") < 0)) __PYX_ERR(0, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("spotrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_16spotrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_16spotrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("spotrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spotrf_bufferSize(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":317
 *     return lwork
 * 
 * cpdef int dpotrf_bufferSize(size_t handle, int uplo,             # <<<<<<<<<<<<<<
 *                             int n, size_t A, int lda) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_19dpotrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dpotrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dpotrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":320
 *                             int n, size_t A, int lda) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDpotrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":321
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDpotrf_bufferSize(
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, <int>lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":322
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDpotrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, <int>lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnDpotrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((double *)__pyx_v_A), ((int)__pyx_v_lda), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":321
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDpotrf_bufferSize(
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, <int>lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":324
 *         status = cusolverDnDpotrf_bufferSize(
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, <int>lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":325
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, <int>lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef spotrf(size_t handle, int uplo, int n, size_t A, int lda,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":317
 *     return lwork
 * 
 * cpdef int dpotrf_bufferSize(size_t handle, int uplo,             # <<<<<<<<<<<<<<
 *                             int n, size_t A, int lda) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_19dpotrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_18dpotrf_bufferSize[] = "dpotrf_bufferSize(size_t handle, int uplo, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_19dpotrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dpotrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 317, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 317, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 317, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 317, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dpotrf_bufferSize") < 0)) __PYX_ERR(0, 317, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dpotrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 317, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_18dpotrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_18dpotrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dpotrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dpotrf_bufferSize(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":327
 *     return lwork
 * 
 * cpdef spotrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_21spotrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_spotrf(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spotrf", 0);

  /* "cupy/cuda/cusolver.pyx":329
 * cpdef spotrf(size_t handle, int uplo, int n, size_t A, int lda,
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSpotrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":330
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSpotrf(
 *             <Handle>handle, <FillMode>uplo, n, <float*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":331
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSpotrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, <float*>A,
 *             lda, <float*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnSpotrf(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":330
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSpotrf(
 *             <Handle>handle, <FillMode>uplo, n, <float*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":334
 *             <Handle>handle, <FillMode>uplo, n, <float*>A,
 *             lda, <float*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dpotrf(size_t handle, int uplo, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":327
 *     return lwork
 * 
 * cpdef spotrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_21spotrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_20spotrf[] = "spotrf(size_t handle, int uplo, int n, size_t A, int lda, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_21spotrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spotrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, 1); __PYX_ERR(0, 327, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, 2); __PYX_ERR(0, 327, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, 3); __PYX_ERR(0, 327, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, 4); __PYX_ERR(0, 327, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, 5); __PYX_ERR(0, 327, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, 6); __PYX_ERR(0, 327, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, 7); __PYX_ERR(0, 327, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "spotrf") < 0)) __PYX_ERR(0, 327, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 327, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("spotrf", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 327, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_20spotrf(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_20spotrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spotrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spotrf(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":336
 *     check_status(status)
 * 
 * cpdef dpotrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_23dpotrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dpotrf(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dpotrf", 0);

  /* "cupy/cuda/cusolver.pyx":338
 * cpdef dpotrf(size_t handle, int uplo, int n, size_t A, int lda,
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDpotrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":339
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDpotrf(
 *             <Handle>handle, <FillMode>uplo, n, <double*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":340
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDpotrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, <double*>A,
 *             lda, <double*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnDpotrf(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":339
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDpotrf(
 *             <Handle>handle, <FillMode>uplo, n, <double*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":343
 *             <Handle>handle, <FillMode>uplo, n, <double*>A,
 *             lda, <double*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef spotrs(size_t handle, int uplo, int n, int nrhs,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":336
 *     check_status(status)
 * 
 * cpdef dpotrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_23dpotrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_22dpotrf[] = "dpotrf(size_t handle, int uplo, int n, size_t A, int lda, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_23dpotrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dpotrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, 1); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, 2); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, 3); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, 4); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, 5); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, 6); __PYX_ERR(0, 336, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, 7); __PYX_ERR(0, 336, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dpotrf") < 0)) __PYX_ERR(0, 336, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dpotrf", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 336, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_22dpotrf(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_22dpotrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dpotrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dpotrf(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":345
 *     check_status(status)
 * 
 * cpdef spotrs(size_t handle, int uplo, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_25spotrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_spotrs(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spotrs", 0);

  /* "cupy/cuda/cusolver.pyx":347
 * cpdef spotrs(size_t handle, int uplo, int n, int nrhs,
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSpotrs(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":348
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSpotrs(
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":349
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSpotrs(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 *             <const float*>A, lda, <float*>B, ldb, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnSpotrs(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, __pyx_v_nrhs, ((float const *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_B), __pyx_v_ldb, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":348
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSpotrs(
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":352
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 *             <const float*>A, lda, <float*>B, ldb, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dpotrs(size_t handle, int uplo, int n, int nrhs,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":345
 *     check_status(status)
 * 
 * cpdef spotrs(size_t handle, int uplo, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_25spotrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_24spotrs[] = "spotrs(size_t handle, int uplo, int n, int nrhs, size_t A, int lda, size_t B, int ldb, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_25spotrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  int __pyx_v_nrhs;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spotrs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_nrhs,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 1); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 2); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nrhs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 3); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 4); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 5); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 6); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 7); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, 8); __PYX_ERR(0, 345, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "spotrs") < 0)) __PYX_ERR(0, 345, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    __pyx_v_nrhs = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nrhs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("spotrs", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_24spotrs(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_24spotrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("spotrs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spotrs(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.spotrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":354
 *     check_status(status)
 * 
 * cpdef dpotrs(size_t handle, int uplo, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_27dpotrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dpotrs(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dpotrs", 0);

  /* "cupy/cuda/cusolver.pyx":356
 * cpdef dpotrs(size_t handle, int uplo, int n, int nrhs,
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDpotrs(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":357
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDpotrs(
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":358
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDpotrs(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 *             <const double*>A, lda, <double*>B, ldb, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnDpotrs(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, __pyx_v_nrhs, ((double const *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_B), __pyx_v_ldb, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":357
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDpotrs(
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":361
 *             <Handle>handle, <FillMode>uplo, n, nrhs,
 *             <const double*>A, lda, <double*>B, ldb, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef sgetrf(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":354
 *     check_status(status)
 * 
 * cpdef dpotrs(size_t handle, int uplo, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_27dpotrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_26dpotrs[] = "dpotrs(size_t handle, int uplo, int n, int nrhs, size_t A, int lda, size_t B, int ldb, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_27dpotrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  int __pyx_v_nrhs;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dpotrs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_nrhs,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 1); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 2); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nrhs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 3); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 4); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 5); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 6); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 7); __PYX_ERR(0, 354, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, 8); __PYX_ERR(0, 354, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dpotrs") < 0)) __PYX_ERR(0, 354, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L3_error)
    __pyx_v_nrhs = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nrhs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dpotrs", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 354, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_26dpotrs(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_26dpotrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dpotrs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dpotrs(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dpotrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":363
 *     check_status(status)
 * 
 * cpdef sgetrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_29sgetrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgetrf(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, size_t __pyx_v_devIpiv, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetrf", 0);

  /* "cupy/cuda/cusolver.pyx":365
 * cpdef sgetrf(size_t handle, int m, int n, size_t A, int lda,
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgetrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":366
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgetrf(
 *             <Handle>handle, m, n, <float*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":367
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgetrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <float*>A, lda,
 *             <float*>work, <int*>devIpiv, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnSgetrf(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_work), ((int *)__pyx_v_devIpiv), ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":366
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgetrf(
 *             <Handle>handle, m, n, <float*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":370
 *             <Handle>handle, m, n, <float*>A, lda,
 *             <float*>work, <int*>devIpiv, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dgetrf(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":363
 *     check_status(status)
 * 
 * cpdef sgetrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_29sgetrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_28sgetrf[] = "sgetrf(size_t handle, int m, int n, size_t A, int lda, size_t work, size_t devIpiv, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_29sgetrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_work;
  size_t __pyx_v_devIpiv;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgetrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_work,&__pyx_n_s_devIpiv,&__pyx_n_s_devInfo,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, 1); __PYX_ERR(0, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, 2); __PYX_ERR(0, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, 3); __PYX_ERR(0, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, 4); __PYX_ERR(0, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, 5); __PYX_ERR(0, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devIpiv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, 6); __PYX_ERR(0, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, 7); __PYX_ERR(0, 363, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgetrf") < 0)) __PYX_ERR(0, 363, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L3_error)
    __pyx_v_devIpiv = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_devIpiv == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgetrf", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 363, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_28sgetrf(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_devIpiv, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_28sgetrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, size_t __pyx_v_devIpiv, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgetrf(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_devIpiv, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":372
 *     check_status(status)
 * 
 * cpdef dgetrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_31dgetrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgetrf(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, size_t __pyx_v_devIpiv, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetrf", 0);

  /* "cupy/cuda/cusolver.pyx":374
 * cpdef dgetrf(size_t handle, int m, int n, size_t A, int lda,
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgetrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":375
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgetrf(
 *             <Handle>handle, m, n, <double*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":376
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgetrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <double*>A, lda,
 *             <double*>work, <int*>devIpiv, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnDgetrf(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_work), ((int *)__pyx_v_devIpiv), ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":375
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgetrf(
 *             <Handle>handle, m, n, <double*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":379
 *             <Handle>handle, m, n, <double*>A, lda,
 *             <double*>work, <int*>devIpiv, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef sgetrs(size_t handle, int trans, int n, int nrhs,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":372
 *     check_status(status)
 * 
 * cpdef dgetrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t work, size_t devIpiv, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_31dgetrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_30dgetrf[] = "dgetrf(size_t handle, int m, int n, size_t A, int lda, size_t work, size_t devIpiv, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_31dgetrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_work;
  size_t __pyx_v_devIpiv;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgetrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_work,&__pyx_n_s_devIpiv,&__pyx_n_s_devInfo,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, 1); __PYX_ERR(0, 372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, 2); __PYX_ERR(0, 372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, 3); __PYX_ERR(0, 372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, 4); __PYX_ERR(0, 372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, 5); __PYX_ERR(0, 372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devIpiv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, 6); __PYX_ERR(0, 372, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, 7); __PYX_ERR(0, 372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgetrf") < 0)) __PYX_ERR(0, 372, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
    __pyx_v_devIpiv = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_devIpiv == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgetrf", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 372, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_30dgetrf(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_devIpiv, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_30dgetrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_work, size_t __pyx_v_devIpiv, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgetrf(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_work, __pyx_v_devIpiv, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":381
 *     check_status(status)
 * 
 * cpdef sgetrs(size_t handle, int trans, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t devIpiv,
 *              size_t B, int ldb, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_33sgetrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgetrs(size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_devIpiv, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetrs", 0);

  /* "cupy/cuda/cusolver.pyx":384
 *              size_t A, int lda, size_t devIpiv,
 *              size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgetrs(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":385
 *              size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgetrs(
 *             <Handle>handle, <Operation>trans, n, nrhs,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":386
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgetrs(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>trans, n, nrhs,
 *             <const float*> A, lda, <const int*>devIpiv,
 */
        __pyx_v_status = cusolverDnSgetrs(((cusolverDnHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_trans), __pyx_v_n, __pyx_v_nrhs, ((float const *)__pyx_v_A), __pyx_v_lda, ((int const *)__pyx_v_devIpiv), ((float *)__pyx_v_B), __pyx_v_ldb, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":385
 *              size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgetrs(
 *             <Handle>handle, <Operation>trans, n, nrhs,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":390
 *             <const float*> A, lda, <const int*>devIpiv,
 *             <float*>B, ldb, <int*> devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dgetrs(size_t handle, int trans, int n, int nrhs,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":381
 *     check_status(status)
 * 
 * cpdef sgetrs(size_t handle, int trans, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t devIpiv,
 *              size_t B, int ldb, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_33sgetrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_32sgetrs[] = "sgetrs(size_t handle, int trans, int n, int nrhs, size_t A, int lda, size_t devIpiv, size_t B, int ldb, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_33sgetrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_trans;
  int __pyx_v_n;
  int __pyx_v_nrhs;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_devIpiv;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgetrs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_trans,&__pyx_n_s_n,&__pyx_n_s_nrhs,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_devIpiv,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_devInfo,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 1); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 2); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nrhs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 3); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 4); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 5); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devIpiv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 6); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 7); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 8); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, 9); __PYX_ERR(0, 381, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgetrs") < 0)) __PYX_ERR(0, 381, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_nrhs = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nrhs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    __pyx_v_devIpiv = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_devIpiv == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 382, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgetrs", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 381, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_32sgetrs(__pyx_self, __pyx_v_handle, __pyx_v_trans, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_devIpiv, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_32sgetrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_devIpiv, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetrs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgetrs(__pyx_v_handle, __pyx_v_trans, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_devIpiv, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":392
 *     check_status(status)
 * 
 * cpdef dgetrs(size_t handle, int trans, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t devIpiv,
 *              size_t B, int ldb, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_35dgetrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgetrs(size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_devIpiv, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetrs", 0);

  /* "cupy/cuda/cusolver.pyx":395
 *              size_t A, int lda, size_t devIpiv,
 *              size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgetrs(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":396
 *              size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgetrs(
 *             <Handle>handle, <Operation>trans, n, nrhs,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":397
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgetrs(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <Operation>trans, n, nrhs,
 *             <const double*> A, lda, <const int*>devIpiv,
 */
        __pyx_v_status = cusolverDnDgetrs(((cusolverDnHandle_t)__pyx_v_handle), ((cublasOperation_t)__pyx_v_trans), __pyx_v_n, __pyx_v_nrhs, ((double const *)__pyx_v_A), __pyx_v_lda, ((int const *)__pyx_v_devIpiv), ((double *)__pyx_v_B), __pyx_v_ldb, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":396
 *              size_t B, int ldb, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgetrs(
 *             <Handle>handle, <Operation>trans, n, nrhs,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":401
 *             <const double*> A, lda, <const int*>devIpiv,
 *             <double*>B, ldb, <int*> devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef int sgetrf_bufferSize(size_t handle, int m, int n,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":392
 *     check_status(status)
 * 
 * cpdef dgetrs(size_t handle, int trans, int n, int nrhs,             # <<<<<<<<<<<<<<
 *              size_t A, int lda, size_t devIpiv,
 *              size_t B, int ldb, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_35dgetrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_34dgetrs[] = "dgetrs(size_t handle, int trans, int n, int nrhs, size_t A, int lda, size_t devIpiv, size_t B, int ldb, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_35dgetrs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_trans;
  int __pyx_v_n;
  int __pyx_v_nrhs;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_devIpiv;
  size_t __pyx_v_B;
  int __pyx_v_ldb;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgetrs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_trans,&__pyx_n_s_n,&__pyx_n_s_nrhs,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_devIpiv,&__pyx_n_s_B,&__pyx_n_s_ldb,&__pyx_n_s_devInfo,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 1); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 2); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nrhs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 3); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 4); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 5); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devIpiv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 6); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 7); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 8); __PYX_ERR(0, 392, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, 9); __PYX_ERR(0, 392, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgetrs") < 0)) __PYX_ERR(0, 392, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L3_error)
    __pyx_v_nrhs = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nrhs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L3_error)
    __pyx_v_devIpiv = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_devIpiv == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_B == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L3_error)
    __pyx_v_ldb = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_ldb == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgetrs", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_34dgetrs(__pyx_self, __pyx_v_handle, __pyx_v_trans, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_devIpiv, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_34dgetrs(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_trans, int __pyx_v_n, int __pyx_v_nrhs, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_devIpiv, size_t __pyx_v_B, int __pyx_v_ldb, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetrs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgetrs(__pyx_v_handle, __pyx_v_trans, __pyx_v_n, __pyx_v_nrhs, __pyx_v_A, __pyx_v_lda, __pyx_v_devIpiv, __pyx_v_B, __pyx_v_ldb, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":403
 *     check_status(status)
 * 
 * cpdef int sgetrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_37sgetrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sgetrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgetrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":406
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgetrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":407
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgetrf_bufferSize(
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":408
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgetrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnSgetrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":407
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgetrf_bufferSize(
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":410
 *         status = cusolverDnSgetrf_bufferSize(
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":411
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int dgetrf_bufferSize(size_t handle, int m, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":403
 *     check_status(status)
 * 
 * cpdef int sgetrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_37sgetrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_36sgetrf_bufferSize[] = "sgetrf_bufferSize(size_t handle, int m, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_37sgetrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgetrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgetrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 403, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgetrf_bufferSize") < 0)) __PYX_ERR(0, 403, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgetrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 403, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_36sgetrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_36sgetrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sgetrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgetrf_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgetrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":413
 *     return lwork
 * 
 * cpdef int dgetrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_39dgetrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dgetrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgetrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":416
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgetrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":417
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgetrf_bufferSize(
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":418
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgetrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnDgetrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":417
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgetrf_bufferSize(
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":420
 *         status = cusolverDnDgetrf_bufferSize(
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":421
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int sgeqrf_bufferSize(size_t handle, int m, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":413
 *     return lwork
 * 
 * cpdef int dgetrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_39dgetrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_38dgetrf_bufferSize[] = "dgetrf_bufferSize(size_t handle, int m, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_39dgetrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgetrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 413, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 413, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 413, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgetrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 413, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgetrf_bufferSize") < 0)) __PYX_ERR(0, 413, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgetrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 413, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_38dgetrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_38dgetrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dgetrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgetrf_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgetrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":423
 *     return lwork
 * 
 * cpdef int sgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_41sgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sgeqrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgeqrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":426
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgeqrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":427
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgeqrf_bufferSize(
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":428
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgeqrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnSgeqrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":427
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgeqrf_bufferSize(
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":430
 *         status = cusolverDnSgeqrf_bufferSize(
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":431
 *             <Handle>handle, m, n, <float*>A, lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int dgeqrf_bufferSize(size_t handle, int m, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":423
 *     return lwork
 * 
 * cpdef int sgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_41sgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_40sgeqrf_bufferSize[] = "sgeqrf_bufferSize(size_t handle, int m, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_41sgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgeqrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 423, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgeqrf_bufferSize") < 0)) __PYX_ERR(0, 423, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgeqrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 423, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_40sgeqrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_40sgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sgeqrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgeqrf_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":433
 *     return lwork
 * 
 * cpdef int dgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_43dgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dgeqrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgeqrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":436
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgeqrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":437
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgeqrf_bufferSize(
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":438
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgeqrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnDgeqrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":437
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgeqrf_bufferSize(
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":440
 *         status = cusolverDnDgeqrf_bufferSize(
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":441
 *             <Handle>handle, m, n, <double*>A, lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int cgeqrf_bufferSize(size_t handle, int m, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":433
 *     return lwork
 * 
 * cpdef int dgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_43dgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_42dgeqrf_bufferSize[] = "dgeqrf_bufferSize(size_t handle, int m, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_43dgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgeqrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 433, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 433, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 433, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 433, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgeqrf_bufferSize") < 0)) __PYX_ERR(0, 433, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgeqrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 433, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_42dgeqrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_42dgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dgeqrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgeqrf_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":443
 *     return lwork
 * 
 * cpdef int cgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except *:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_45cgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cgeqrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgeqrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":446
 *                             size_t A, int lda) except *:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCgeqrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":447
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgeqrf_bufferSize(
 *             <Handle>handle, m, n, <cuComplex*>A, lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":448
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCgeqrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <cuComplex*>A, lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnCgeqrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((cuComplex *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":447
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgeqrf_bufferSize(
 *             <Handle>handle, m, n, <cuComplex*>A, lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":450
 *         status = cusolverDnCgeqrf_bufferSize(
 *             <Handle>handle, m, n, <cuComplex*>A, lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":451
 *             <Handle>handle, m, n, <cuComplex*>A, lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int zgeqrf_bufferSize(size_t handle, int m, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":443
 *     return lwork
 * 
 * cpdef int cgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except *:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_45cgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_44cgeqrf_bufferSize[] = "cgeqrf_bufferSize(size_t handle, int m, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_45cgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgeqrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 443, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 443, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 443, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 443, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgeqrf_bufferSize") < 0)) __PYX_ERR(0, 443, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgeqrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 443, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_44cgeqrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_44cgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cgeqrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_cgeqrf_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":453
 *     return lwork
 * 
 * cpdef int zgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except *:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_47zgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zgeqrf_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgeqrf_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":456
 *                             size_t A, int lda) except *:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnZgeqrf_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":457
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgeqrf_bufferSize(
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda, &lwork)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":458
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnZgeqrf_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda, &lwork)
 *     check_status(status)
 */
        __pyx_v_status = cusolverDnZgeqrf_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":457
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgeqrf_bufferSize(
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda, &lwork)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":460
 *         status = cusolverDnZgeqrf_bufferSize(
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":461
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef sgeqrf(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":453
 *     return lwork
 * 
 * cpdef int zgeqrf_bufferSize(size_t handle, int m, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda) except *:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_47zgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_46zgeqrf_bufferSize[] = "zgeqrf_bufferSize(size_t handle, int m, int n, size_t A, int lda) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_47zgeqrf_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgeqrf_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf_bufferSize", 1, 5, 5, 1); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf_bufferSize", 1, 5, 5, 2); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf_bufferSize", 1, 5, 5, 3); __PYX_ERR(0, 453, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf_bufferSize", 1, 5, 5, 4); __PYX_ERR(0, 453, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgeqrf_bufferSize") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgeqrf_bufferSize", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 453, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_46zgeqrf_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_46zgeqrf_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("zgeqrf_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_zgeqrf_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgeqrf_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":463
 *     return lwork
 * 
 * cpdef sgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_49sgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgeqrf(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgeqrf", 0);

  /* "cupy/cuda/cusolver.pyx":465
 * cpdef sgeqrf(size_t handle, int m, int n, size_t A, int lda,
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgeqrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":466
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgeqrf(
 *             <Handle>handle, m, n, <float*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":467
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgeqrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <float*>A, lda,
 *             <float*>tau, <float*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnSgeqrf(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_tau), ((float *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":466
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgeqrf(
 *             <Handle>handle, m, n, <float*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":470
 *             <Handle>handle, m, n, <float*>A, lda,
 *             <float*>tau, <float*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dgeqrf(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":463
 *     return lwork
 * 
 * cpdef sgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_49sgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_48sgeqrf[] = "sgeqrf(size_t handle, int m, int n, size_t A, int lda, size_t tau, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_49sgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgeqrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 1); __PYX_ERR(0, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 2); __PYX_ERR(0, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 3); __PYX_ERR(0, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 4); __PYX_ERR(0, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 5); __PYX_ERR(0, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 6); __PYX_ERR(0, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 7); __PYX_ERR(0, 463, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, 8); __PYX_ERR(0, 463, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgeqrf") < 0)) __PYX_ERR(0, 463, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgeqrf", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 463, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_48sgeqrf(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_48sgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgeqrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgeqrf(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":472
 *     check_status(status)
 * 
 * cpdef dgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_51dgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgeqrf(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgeqrf", 0);

  /* "cupy/cuda/cusolver.pyx":474
 * cpdef dgeqrf(size_t handle, int m, int n, size_t A, int lda,
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgeqrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":475
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgeqrf(
 *             <Handle>handle, m, n, <double*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":476
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgeqrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <double*>A, lda,
 *             <double*>tau, <double*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnDgeqrf(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_tau), ((double *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":475
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgeqrf(
 *             <Handle>handle, m, n, <double*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":479
 *             <Handle>handle, m, n, <double*>A, lda,
 *             <double*>tau, <double*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef cgeqrf(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":472
 *     check_status(status)
 * 
 * cpdef dgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_51dgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_50dgeqrf[] = "dgeqrf(size_t handle, int m, int n, size_t A, int lda, size_t tau, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_51dgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgeqrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 1); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 2); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 3); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 4); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 5); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 6); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 7); __PYX_ERR(0, 472, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, 8); __PYX_ERR(0, 472, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgeqrf") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgeqrf", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_50dgeqrf(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_50dgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgeqrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgeqrf(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":481
 *     check_status(status)
 * 
 * cpdef cgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_53cgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cgeqrf(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgeqrf", 0);

  /* "cupy/cuda/cusolver.pyx":483
 * cpdef cgeqrf(size_t handle, int m, int n, size_t A, int lda,
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCgeqrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":484
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgeqrf(
 *             <Handle>handle, m, n, <cuComplex*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":485
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCgeqrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <cuComplex*>A, lda,
 *             <cuComplex*>tau, <cuComplex*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnCgeqrf(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((cuComplex *)__pyx_v_A), __pyx_v_lda, ((cuComplex *)__pyx_v_tau), ((cuComplex *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":484
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgeqrf(
 *             <Handle>handle, m, n, <cuComplex*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":488
 *             <Handle>handle, m, n, <cuComplex*>A, lda,
 *             <cuComplex*>tau, <cuComplex*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef zgeqrf(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":481
 *     check_status(status)
 * 
 * cpdef cgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_53cgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_52cgeqrf[] = "cgeqrf(size_t handle, int m, int n, size_t A, int lda, size_t tau, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_53cgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgeqrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 1); __PYX_ERR(0, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 2); __PYX_ERR(0, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 3); __PYX_ERR(0, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 4); __PYX_ERR(0, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 5); __PYX_ERR(0, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 6); __PYX_ERR(0, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 7); __PYX_ERR(0, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, 8); __PYX_ERR(0, 481, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgeqrf") < 0)) __PYX_ERR(0, 481, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgeqrf", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_52cgeqrf(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_52cgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgeqrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_cgeqrf(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":490
 *     check_status(status)
 * 
 * cpdef zgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_55zgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zgeqrf(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgeqrf", 0);

  /* "cupy/cuda/cusolver.pyx":492
 * cpdef zgeqrf(size_t handle, int m, int n, size_t A, int lda,
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnZgeqrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":493
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgeqrf(
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":494
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnZgeqrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda,
 *             <cuDoubleComplex*>tau, <cuDoubleComplex*>work, lwork,
 */
        __pyx_v_status = cusolverDnZgeqrf(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda, ((cuDoubleComplex *)__pyx_v_tau), ((cuDoubleComplex *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":493
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgeqrf(
 *             <Handle>handle, m, n, <cuDoubleComplex*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":498
 *             <cuDoubleComplex*>tau, <cuDoubleComplex*>work, lwork,
 *             <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef int sorgqr_bufferSize(size_t handle, int m, int n, int k,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":490
 *     check_status(status)
 * 
 * cpdef zgeqrf(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_55zgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_54zgeqrf[] = "zgeqrf(size_t handle, int m, int n, size_t A, int lda, size_t tau, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_55zgeqrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgeqrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 1); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 2); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 3); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 4); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 5); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 6); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 7); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, 8); __PYX_ERR(0, 490, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgeqrf") < 0)) __PYX_ERR(0, 490, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgeqrf", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 490, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_54zgeqrf(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_54zgeqrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgeqrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_zgeqrf(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgeqrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":500
 *     check_status(status)
 * 
 * cpdef int sorgqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_57sorgqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sorgqr_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sorgqr_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":503
 *                             size_t A, int lda, size_t tau) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSorgqr_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":504
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSorgqr_bufferSize(
 *             <Handle>handle, m, n, k, <const float*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":505
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSorgqr_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, k, <const float*>A, lda,
 *             <const float*>tau, &lwork)
 */
        __pyx_v_status = cusolverDnSorgqr_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((float const *)__pyx_v_A), __pyx_v_lda, ((float const *)__pyx_v_tau), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":504
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSorgqr_bufferSize(
 *             <Handle>handle, m, n, k, <const float*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":508
 *             <Handle>handle, m, n, k, <const float*>A, lda,
 *             <const float*>tau, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":509
 *             <const float*>tau, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int dorgqr_bufferSize(size_t handle, int m, int n, int k,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":500
 *     check_status(status)
 * 
 * cpdef int sorgqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sorgqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_57sorgqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_56sorgqr_bufferSize[] = "sorgqr_bufferSize(size_t handle, int m, int n, int k, size_t A, int lda, size_t tau) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_57sorgqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sorgqr_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 500, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 500, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 500, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 500, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 500, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 500, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sorgqr_bufferSize") < 0)) __PYX_ERR(0, 500, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 501, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sorgqr_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 500, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sorgqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_56sorgqr_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_56sorgqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sorgqr_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sorgqr_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sorgqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":511
 *     return lwork
 * 
 * cpdef int dorgqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except? -1:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_59dorgqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dorgqr_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dorgqr_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":514
 *                             size_t A, int lda, size_t tau) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDorgqr_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":515
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDorgqr_bufferSize(
 *             <Handle>handle, m, n, k, <double*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":516
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDorgqr_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, k, <double*>A, lda,
 *             <const double*> tau, &lwork)
 */
        __pyx_v_status = cusolverDnDorgqr_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((double *)__pyx_v_A), __pyx_v_lda, ((double const *)__pyx_v_tau), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":515
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDorgqr_bufferSize(
 *             <Handle>handle, m, n, k, <double*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":519
 *             <Handle>handle, m, n, k, <double*>A, lda,
 *             <const double*> tau, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":520
 *             <const double*> tau, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int cungqr_bufferSize(size_t handle, int m, int n, int k,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":511
 *     return lwork
 * 
 * cpdef int dorgqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except? -1:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dorgqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_59dorgqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_58dorgqr_bufferSize[] = "dorgqr_bufferSize(size_t handle, int m, int n, int k, size_t A, int lda, size_t tau) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_59dorgqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dorgqr_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 511, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 511, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dorgqr_bufferSize") < 0)) __PYX_ERR(0, 511, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dorgqr_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 511, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dorgqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_58dorgqr_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_58dorgqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dorgqr_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dorgqr_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dorgqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":522
 *     return lwork
 * 
 * cpdef int cungqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except *:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_61cungqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cungqr_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cungqr_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":525
 *                             size_t A, int lda, size_t tau) except *:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCungqr_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":526
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCungqr_bufferSize(
 *             <Handle>handle, m, n, k, <const cuComplex*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":527
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCungqr_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, k, <const cuComplex*>A, lda,
 *             <const cuComplex*>tau, &lwork)
 */
        __pyx_v_status = cusolverDnCungqr_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((cuComplex const *)__pyx_v_A), __pyx_v_lda, ((cuComplex const *)__pyx_v_tau), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":526
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCungqr_bufferSize(
 *             <Handle>handle, m, n, k, <const cuComplex*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":530
 *             <Handle>handle, m, n, k, <const cuComplex*>A, lda,
 *             <const cuComplex*>tau, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":531
 *             <const cuComplex*>tau, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int zungqr_bufferSize(size_t handle, int m, int n, int k,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":522
 *     return lwork
 * 
 * cpdef int cungqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except *:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cungqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_61cungqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_60cungqr_bufferSize[] = "cungqr_bufferSize(size_t handle, int m, int n, int k, size_t A, int lda, size_t tau) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_61cungqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cungqr_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cungqr_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cungqr_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cungqr_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cungqr_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cungqr_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cungqr_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 522, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cungqr_bufferSize") < 0)) __PYX_ERR(0, 522, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 523, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cungqr_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 522, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cungqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_60cungqr_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_60cungqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cungqr_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_cungqr_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cungqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":533
 *     return lwork
 * 
 * cpdef int zungqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except *:
 *     cdef int lwork
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_63zungqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zungqr_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zungqr_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":536
 *                             size_t A, int lda, size_t tau) except *:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnZungqr_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":537
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZungqr_bufferSize(
 *             <Handle>handle, m, n, k, <cuDoubleComplex*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":538
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnZungqr_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, k, <cuDoubleComplex*>A, lda,
 *             <const cuDoubleComplex*> tau, &lwork)
 */
        __pyx_v_status = cusolverDnZungqr_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda, ((cuDoubleComplex const *)__pyx_v_tau), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":537
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZungqr_bufferSize(
 *             <Handle>handle, m, n, k, <cuDoubleComplex*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":541
 *             <Handle>handle, m, n, k, <cuDoubleComplex*>A, lda,
 *             <const cuDoubleComplex*> tau, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":542
 *             <const cuDoubleComplex*> tau, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef sorgqr(size_t handle, int m, int n, int k, size_t A, int lda,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":533
 *     return lwork
 * 
 * cpdef int zungqr_bufferSize(size_t handle, int m, int n, int k,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t tau) except *:
 *     cdef int lwork
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zungqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_63zungqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_62zungqr_bufferSize[] = "zungqr_bufferSize(size_t handle, int m, int n, int k, size_t A, int lda, size_t tau) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_63zungqr_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zungqr_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zungqr_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 533, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zungqr_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 533, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zungqr_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 533, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zungqr_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 533, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zungqr_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 533, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zungqr_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 533, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zungqr_bufferSize") < 0)) __PYX_ERR(0, 533, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zungqr_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 533, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zungqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_62zungqr_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_62zungqr_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("zungqr_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_zungqr_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zungqr_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":544
 *     return lwork
 * 
 * cpdef sorgqr(size_t handle, int m, int n, int k, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_65sorgqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sorgqr(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sorgqr", 0);

  /* "cupy/cuda/cusolver.pyx":546
 * cpdef sorgqr(size_t handle, int m, int n, int k, size_t A, int lda,
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSorgqr(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":547
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSorgqr(
 *             <Handle>handle, m, n, k, <float*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":548
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSorgqr(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, k, <float*>A, lda,
 *             <const float*>tau, <float*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnSorgqr(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((float *)__pyx_v_A), __pyx_v_lda, ((float const *)__pyx_v_tau), ((float *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":547
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSorgqr(
 *             <Handle>handle, m, n, k, <float*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":551
 *             <Handle>handle, m, n, k, <float*>A, lda,
 *             <const float*>tau, <float*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dorgqr(size_t handle, int m, int n, int k, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":544
 *     return lwork
 * 
 * cpdef sorgqr(size_t handle, int m, int n, int k, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sorgqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_65sorgqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_64sorgqr[] = "sorgqr(size_t handle, int m, int n, int k, size_t A, int lda, size_t tau, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_65sorgqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sorgqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 1); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 2); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 3); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 4); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 5); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 6); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 7); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 8); __PYX_ERR(0, 544, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, 9); __PYX_ERR(0, 544, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sorgqr") < 0)) __PYX_ERR(0, 544, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 545, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 545, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 545, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 545, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sorgqr", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 544, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sorgqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_64sorgqr(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_64sorgqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sorgqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sorgqr(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sorgqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":553
 *     check_status(status)
 * 
 * cpdef dorgqr(size_t handle, int m, int n, int k, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_67dorgqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dorgqr(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dorgqr", 0);

  /* "cupy/cuda/cusolver.pyx":555
 * cpdef dorgqr(size_t handle, int m, int n, int k, size_t A, int lda,
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDorgqr(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":556
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDorgqr(
 *             <Handle>handle, m, n, k, <double*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":557
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDorgqr(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, k, <double*>A, lda,
 *             <const double*>tau, <double*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnDorgqr(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((double *)__pyx_v_A), __pyx_v_lda, ((double const *)__pyx_v_tau), ((double *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":556
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDorgqr(
 *             <Handle>handle, m, n, k, <double*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":560
 *             <Handle>handle, m, n, k, <double*>A, lda,
 *             <const double*>tau, <double*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef sormqr(size_t handle, int side, int trans,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":553
 *     check_status(status)
 * 
 * cpdef dorgqr(size_t handle, int m, int n, int k, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t tau, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dorgqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_67dorgqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_66dorgqr[] = "dorgqr(size_t handle, int m, int n, int k, size_t A, int lda, size_t tau, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_67dorgqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dorgqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 1); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 2); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 3); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 4); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 5); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 6); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 7); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 8); __PYX_ERR(0, 553, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, 9); __PYX_ERR(0, 553, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dorgqr") < 0)) __PYX_ERR(0, 553, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 553, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 554, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 554, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 554, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 554, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dorgqr", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 553, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dorgqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_66dorgqr(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_66dorgqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dorgqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dorgqr(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dorgqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":562
 *     check_status(status)
 * 
 * cpdef sormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_69sormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sormqr(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sormqr", 0);

  /* "cupy/cuda/cusolver.pyx":565
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSormqr(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":566
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSormqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":567
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSormqr(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 *             <const float*>A, lda, <const float*>tau, <float*>C, ldc,
 */
        __pyx_v_status = cusolverDnSormqr(((cusolverDnHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((float const *)__pyx_v_A), __pyx_v_lda, ((float const *)__pyx_v_tau), ((float *)__pyx_v_C), __pyx_v_ldc, ((float *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":566
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSormqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":571
 *             <const float*>A, lda, <const float*>tau, <float*>C, ldc,
 *             <float*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dormqr(size_t handle, int side, int trans,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":562
 *     check_status(status)
 * 
 * cpdef sormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_69sormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_68sormqr[] = "sormqr(size_t handle, int side, int trans, int m, int n, int k, size_t A, int lda, size_t tau, size_t C, int ldc, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_69sormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sormqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 1); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 2); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 3); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 4); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 5); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 6); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 7); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 8); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 9); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 10); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 11); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 12); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, 13); __PYX_ERR(0, 562, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sormqr") < 0)) __PYX_ERR(0, 562, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[13]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 564, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sormqr", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 562, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_68sormqr(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_68sormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sormqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sormqr(__pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":573
 *     check_status(status)
 * 
 * cpdef dormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_71dormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dormqr(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dormqr", 0);

  /* "cupy/cuda/cusolver.pyx":576
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDormqr(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":577
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDormqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":578
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDormqr(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 *             <const double*>A, lda, <const double*>tau, <double*>C, ldc,
 */
        __pyx_v_status = cusolverDnDormqr(((cusolverDnHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((double const *)__pyx_v_A), __pyx_v_lda, ((double const *)__pyx_v_tau), ((double *)__pyx_v_C), __pyx_v_ldc, ((double *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":577
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDormqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":582
 *             <const double*>A, lda, <const double*>tau, <double*>C, ldc,
 *             <double*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef cormqr(size_t handle, int side, int trans,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":573
 *     check_status(status)
 * 
 * cpdef dormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_71dormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_70dormqr[] = "dormqr(size_t handle, int side, int trans, int m, int n, int k, size_t A, int lda, size_t tau, size_t C, int ldc, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_71dormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dormqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 1); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 2); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 3); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 4); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 5); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 6); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 7); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 8); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 9); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 10); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 11); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 12); __PYX_ERR(0, 573, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, 13); __PYX_ERR(0, 573, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dormqr") < 0)) __PYX_ERR(0, 573, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[13]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 575, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dormqr", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 573, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_70dormqr(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_70dormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dormqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dormqr(__pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":584
 *     check_status(status)
 * 
 * cpdef cormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_73cormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cormqr(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cormqr", 0);

  /* "cupy/cuda/cusolver.pyx":587
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCunmqr(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":588
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCunmqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":589
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCunmqr(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 *             <const cuComplex*>A, lda, <const cuComplex*>tau,
 */
        __pyx_v_status = cusolverDnCunmqr(((cusolverDnHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((cuComplex const *)__pyx_v_A), __pyx_v_lda, ((cuComplex const *)__pyx_v_tau), ((cuComplex *)__pyx_v_C), __pyx_v_ldc, ((cuComplex *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":588
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCunmqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":594
 *             <cuComplex*>C, ldc,
 *             <cuComplex*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef zormqr(size_t handle, int side, int trans,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":584
 *     check_status(status)
 * 
 * cpdef cormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_73cormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_72cormqr[] = "cormqr(size_t handle, int side, int trans, int m, int n, int k, size_t A, int lda, size_t tau, size_t C, int ldc, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_73cormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cormqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 1); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 2); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 3); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 4); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 5); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 6); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 7); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 8); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 9); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 10); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 11); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 12); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, 13); __PYX_ERR(0, 584, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cormqr") < 0)) __PYX_ERR(0, 584, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[13]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cormqr", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 584, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_72cormqr(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_72cormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cormqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_cormqr(__pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":596
 *     check_status(status)
 * 
 * cpdef zormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_75zormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zormqr(size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zormqr", 0);

  /* "cupy/cuda/cusolver.pyx":599
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 * 
 *     with nogil:
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":601
 *     setStream(handle, stream_module.get_current_stream_ptr())
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZunmqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":602
 * 
 *     with nogil:
 *         status = cusolverDnZunmqr(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 *             <const cuDoubleComplex*>A, lda, <const cuDoubleComplex*>tau,
 */
        __pyx_v_status = cusolverDnZunmqr(((cusolverDnHandle_t)__pyx_v_handle), ((cublasSideMode_t)__pyx_v_side), ((cublasOperation_t)__pyx_v_trans), __pyx_v_m, __pyx_v_n, __pyx_v_k, ((cuDoubleComplex const *)__pyx_v_A), __pyx_v_lda, ((cuDoubleComplex const *)__pyx_v_tau), ((cuDoubleComplex *)__pyx_v_C), __pyx_v_ldc, ((cuDoubleComplex *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":601
 *     setStream(handle, stream_module.get_current_stream_ptr())
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZunmqr(
 *             <Handle>handle, <SideMode>side, <Operation>trans, m, n, k,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":607
 *             <cuDoubleComplex*>C, ldc,
 *             <cuDoubleComplex*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef ssytrf(size_t handle, int uplo, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":596
 *     check_status(status)
 * 
 * cpdef zormqr(size_t handle, int side, int trans,             # <<<<<<<<<<<<<<
 *              int m, int n, int k, size_t A, int lda, size_t tau,
 *              size_t C, int ldc, size_t work, int lwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_75zormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_74zormqr[] = "zormqr(size_t handle, int side, int trans, int m, int n, int k, size_t A, int lda, size_t tau, size_t C, int ldc, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_75zormqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_side;
  int __pyx_v_trans;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_k;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_tau;
  size_t __pyx_v_C;
  int __pyx_v_ldc;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zormqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_side,&__pyx_n_s_trans,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_tau,&__pyx_n_s_C,&__pyx_n_s_ldc,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 1); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trans)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 2); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 3); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 4); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 5); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 6); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 7); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tau)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 8); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 9); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 10); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 11); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 12); __PYX_ERR(0, 596, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, 13); __PYX_ERR(0, 596, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zormqr") < 0)) __PYX_ERR(0, 596, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_side = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_trans = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_trans == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
    __pyx_v_k = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
    __pyx_v_tau = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_tau == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
    __pyx_v_C = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_C == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    __pyx_v_ldc = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_ldc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[13]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zormqr", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 596, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_74zormqr(__pyx_self, __pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_74zormqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_side, int __pyx_v_trans, int __pyx_v_m, int __pyx_v_n, int __pyx_v_k, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_tau, size_t __pyx_v_C, int __pyx_v_ldc, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zormqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_zormqr(__pyx_v_handle, __pyx_v_side, __pyx_v_trans, __pyx_v_m, __pyx_v_n, __pyx_v_k, __pyx_v_A, __pyx_v_lda, __pyx_v_tau, __pyx_v_C, __pyx_v_ldc, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zormqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":609
 *     check_status(status)
 * 
 * cpdef ssytrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_77ssytrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_ssytrf(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_ipiv, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ssytrf", 0);

  /* "cupy/cuda/cusolver.pyx":611
 * cpdef ssytrf(size_t handle, int uplo, int n, size_t A, int lda,
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSsytrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":612
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSsytrf(
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":613
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSsytrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, lda,
 *             <int*>ipiv, <float*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnSsytrf(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((int *)__pyx_v_ipiv), ((float *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":612
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSsytrf(
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":616
 *             <Handle>handle, <FillMode>uplo, n, <float*>A, lda,
 *             <int*>ipiv, <float*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dsytrf(size_t handle, int uplo, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":609
 *     check_status(status)
 * 
 * cpdef ssytrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssytrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_77ssytrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_76ssytrf[] = "ssytrf(size_t handle, int uplo, int n, size_t A, int lda, size_t ipiv, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_77ssytrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_ipiv;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ssytrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_ipiv,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 1); __PYX_ERR(0, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 2); __PYX_ERR(0, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 3); __PYX_ERR(0, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 4); __PYX_ERR(0, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ipiv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 5); __PYX_ERR(0, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 6); __PYX_ERR(0, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 7); __PYX_ERR(0, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, 8); __PYX_ERR(0, 609, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ssytrf") < 0)) __PYX_ERR(0, 609, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L3_error)
    __pyx_v_ipiv = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_ipiv == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ssytrf", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 609, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssytrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_76ssytrf(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_ipiv, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_76ssytrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_ipiv, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ssytrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_ssytrf(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_ipiv, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssytrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":618
 *     check_status(status)
 * 
 * cpdef dsytrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_79dsytrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dsytrf(size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_ipiv, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dsytrf", 0);

  /* "cupy/cuda/cusolver.pyx":620
 * cpdef dsytrf(size_t handle, int uplo, int n, size_t A, int lda,
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDsytrf(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":621
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDsytrf(
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":622
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDsytrf(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, lda,
 *             <int*>ipiv, <double*>work, lwork, <int*>devInfo)
 */
        __pyx_v_status = cusolverDnDsytrf(((cusolverDnHandle_t)__pyx_v_handle), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, ((int *)__pyx_v_ipiv), ((double *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":621
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDsytrf(
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":625
 *             <Handle>handle, <FillMode>uplo, n, <double*>A, lda,
 *             <int*>ipiv, <double*>work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef sgebrd(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":618
 *     check_status(status)
 * 
 * cpdef dsytrf(size_t handle, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t ipiv, size_t work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsytrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_79dsytrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_78dsytrf[] = "dsytrf(size_t handle, int uplo, int n, size_t A, int lda, size_t ipiv, size_t work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_79dsytrf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_ipiv;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dsytrf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_ipiv,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 1); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 2); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 3); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 4); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ipiv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 5); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 6); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 7); __PYX_ERR(0, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, 8); __PYX_ERR(0, 618, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dsytrf") < 0)) __PYX_ERR(0, 618, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L3_error)
    __pyx_v_ipiv = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_ipiv == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dsytrf", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 618, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsytrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_78dsytrf(__pyx_self, __pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_ipiv, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_78dsytrf(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_ipiv, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dsytrf", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dsytrf(__pyx_v_handle, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_ipiv, __pyx_v_work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsytrf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":627
 *     check_status(status)
 * 
 * cpdef sgebrd(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t D, size_t E, size_t tauQ, size_t tauP,
 *              size_t Work, int lwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_81sgebrd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgebrd(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_D, size_t __pyx_v_E, size_t __pyx_v_tauQ, size_t __pyx_v_tauP, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgebrd", 0);

  /* "cupy/cuda/cusolver.pyx":630
 *              size_t D, size_t E, size_t tauQ, size_t tauP,
 *              size_t Work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgebrd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":631
 *              size_t Work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgebrd(
 *             <Handle>handle, m, n, <float*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":632
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgebrd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <float*>A, lda,
 *             <float*>D, <float*>E, <float*>tauQ, <float*>tauP,
 */
        __pyx_v_status = cusolverDnSgebrd(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_D), ((float *)__pyx_v_E), ((float *)__pyx_v_tauQ), ((float *)__pyx_v_tauP), ((float *)__pyx_v_Work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":631
 *              size_t Work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgebrd(
 *             <Handle>handle, m, n, <float*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":636
 *             <float*>D, <float*>E, <float*>tauQ, <float*>tauP,
 *             <float*>Work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dgebrd(size_t handle, int m, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":627
 *     check_status(status)
 * 
 * cpdef sgebrd(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t D, size_t E, size_t tauQ, size_t tauP,
 *              size_t Work, int lwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgebrd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_81sgebrd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_80sgebrd[] = "sgebrd(size_t handle, int m, int n, size_t A, int lda, size_t D, size_t E, size_t tauQ, size_t tauP, size_t Work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_81sgebrd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_D;
  size_t __pyx_v_E;
  size_t __pyx_v_tauQ;
  size_t __pyx_v_tauP;
  size_t __pyx_v_Work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgebrd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_D,&__pyx_n_s_E,&__pyx_n_s_tauQ,&__pyx_n_s_tauP,&__pyx_n_s_Work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 1); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 2); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 3); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 4); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_D)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 5); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 6); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tauQ)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 7); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tauP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 8); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 9); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 10); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, 11); __PYX_ERR(0, 627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgebrd") < 0)) __PYX_ERR(0, 627, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L3_error)
    __pyx_v_D = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_D == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_E = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_E == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_tauQ = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_tauQ == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_tauP = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_tauP == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L3_error)
    __pyx_v_Work = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_Work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgebrd", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgebrd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_80sgebrd(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_D, __pyx_v_E, __pyx_v_tauQ, __pyx_v_tauP, __pyx_v_Work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_80sgebrd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_D, size_t __pyx_v_E, size_t __pyx_v_tauQ, size_t __pyx_v_tauP, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgebrd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgebrd(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_D, __pyx_v_E, __pyx_v_tauQ, __pyx_v_tauP, __pyx_v_Work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgebrd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":638
 *     check_status(status)
 * 
 * cpdef dgebrd(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t D, size_t E, size_t tauQ, size_t tauP,
 *              size_t Work, int lwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_83dgebrd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgebrd(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_D, size_t __pyx_v_E, size_t __pyx_v_tauQ, size_t __pyx_v_tauP, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgebrd", 0);

  /* "cupy/cuda/cusolver.pyx":641
 *              size_t D, size_t E, size_t tauQ, size_t tauP,
 *              size_t Work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgebrd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":642
 *              size_t Work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgebrd(
 *             <Handle>handle, m, n, <double*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":643
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgebrd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, m, n, <double*>A, lda,
 *             <double*>D, <double*>E, <double*>tauQ, <double*>tauP,
 */
        __pyx_v_status = cusolverDnDgebrd(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_D), ((double *)__pyx_v_E), ((double *)__pyx_v_tauQ), ((double *)__pyx_v_tauP), ((double *)__pyx_v_Work), __pyx_v_lwork, ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":642
 *              size_t Work, int lwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgebrd(
 *             <Handle>handle, m, n, <double*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":647
 *             <double*>D, <double*>E, <double*>tauQ, <double*>tauP,
 *             <double*>Work, lwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef int sgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":638
 *     check_status(status)
 * 
 * cpdef dgebrd(size_t handle, int m, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t D, size_t E, size_t tauQ, size_t tauP,
 *              size_t Work, int lwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgebrd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_83dgebrd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_82dgebrd[] = "dgebrd(size_t handle, int m, int n, size_t A, int lda, size_t D, size_t E, size_t tauQ, size_t tauP, size_t Work, int lwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_83dgebrd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_D;
  size_t __pyx_v_E;
  size_t __pyx_v_tauQ;
  size_t __pyx_v_tauP;
  size_t __pyx_v_Work;
  int __pyx_v_lwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgebrd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_D,&__pyx_n_s_E,&__pyx_n_s_tauQ,&__pyx_n_s_tauP,&__pyx_n_s_Work,&__pyx_n_s_lwork,&__pyx_n_s_devInfo,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 1); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 2); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 3); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 4); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_D)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 5); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 6); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tauQ)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 7); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tauP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 8); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 9); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 10); __PYX_ERR(0, 638, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, 11); __PYX_ERR(0, 638, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgebrd") < 0)) __PYX_ERR(0, 638, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L3_error)
    __pyx_v_D = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_D == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L3_error)
    __pyx_v_E = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_E == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L3_error)
    __pyx_v_tauQ = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_tauQ == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L3_error)
    __pyx_v_tauP = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_tauP == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L3_error)
    __pyx_v_Work = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_Work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgebrd", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 638, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgebrd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_82dgebrd(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_D, __pyx_v_E, __pyx_v_tauQ, __pyx_v_tauP, __pyx_v_Work, __pyx_v_lwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_82dgebrd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_D, size_t __pyx_v_E, size_t __pyx_v_tauQ, size_t __pyx_v_tauP, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgebrd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgebrd(__pyx_v_handle, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_D, __pyx_v_E, __pyx_v_tauQ, __pyx_v_tauP, __pyx_v_Work, __pyx_v_lwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgebrd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":649
 *     check_status(status)
 * 
 * cpdef int sgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_85sgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_sgesvd_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgesvd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":651
 * cpdef int sgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":652
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":653
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgesvd_bufferSize(<Handle>handle, m, n, &lwork)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return lwork
 */
        __pyx_v_status = cusolverDnSgesvd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":652
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":654
 *     with nogil:
 *         status = cusolverDnSgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":655
 *         status = cusolverDnSgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int dgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":649
 *     check_status(status)
 * 
 * cpdef int sgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_85sgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_84sgesvd_bufferSize[] = "sgesvd_bufferSize(size_t handle, int m, int n) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_85sgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgesvd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd_bufferSize", 1, 3, 3, 1); __PYX_ERR(0, 649, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd_bufferSize", 1, 3, 3, 2); __PYX_ERR(0, 649, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgesvd_bufferSize") < 0)) __PYX_ERR(0, 649, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgesvd_bufferSize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 649, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_84sgesvd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_84sgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sgesvd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgesvd_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":657
 *     return lwork
 * 
 * cpdef int dgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_87dgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dgesvd_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgesvd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":659
 * cpdef int dgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":660
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":661
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgesvd_bufferSize(<Handle>handle, m, n, &lwork)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return lwork
 */
        __pyx_v_status = cusolverDnDgesvd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":660
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":662
 *     with nogil:
 *         status = cusolverDnDgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":663
 *         status = cusolverDnDgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int cgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":657
 *     return lwork
 * 
 * cpdef int dgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_87dgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_86dgesvd_bufferSize[] = "dgesvd_bufferSize(size_t handle, int m, int n) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_87dgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgesvd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd_bufferSize", 1, 3, 3, 1); __PYX_ERR(0, 657, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd_bufferSize", 1, 3, 3, 2); __PYX_ERR(0, 657, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgesvd_bufferSize") < 0)) __PYX_ERR(0, 657, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgesvd_bufferSize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 657, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_86dgesvd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_86dgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dgesvd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgesvd_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":665
 *     return lwork
 * 
 * cpdef int cgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_89cgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cgesvd_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgesvd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":667
 * cpdef int cgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":668
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":669
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCgesvd_bufferSize(<Handle>handle, m, n, &lwork)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return lwork
 */
        __pyx_v_status = cusolverDnCgesvd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":668
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":670
 *     with nogil:
 *         status = cusolverDnCgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":671
 *         status = cusolverDnCgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int zgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":665
 *     return lwork
 * 
 * cpdef int cgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_89cgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_88cgesvd_bufferSize[] = "cgesvd_bufferSize(size_t handle, int m, int n) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_89cgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgesvd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd_bufferSize", 1, 3, 3, 1); __PYX_ERR(0, 665, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd_bufferSize", 1, 3, 3, 2); __PYX_ERR(0, 665, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgesvd_bufferSize") < 0)) __PYX_ERR(0, 665, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgesvd_bufferSize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 665, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_88cgesvd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_88cgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cgesvd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_cgesvd_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 665, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":673
 *     return lwork
 * 
 * cpdef int zgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_91zgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zgesvd_bufferSize(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgesvd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":675
 * cpdef int zgesvd_bufferSize(size_t handle, int m, int n) except? -1:
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnZgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":676
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":677
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnZgesvd_bufferSize(<Handle>handle, m, n, &lwork)             # <<<<<<<<<<<<<<
 *     check_status(status)
 *     return lwork
 */
        __pyx_v_status = cusolverDnZgesvd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_n, (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":676
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":678
 *     with nogil:
 *         status = cusolverDnZgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":679
 *         status = cusolverDnZgesvd_bufferSize(<Handle>handle, m, n, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef sgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":673
 *     return lwork
 * 
 * cpdef int zgesvd_bufferSize(size_t handle, int m, int n) except? -1:             # <<<<<<<<<<<<<<
 *     cdef int lwork
 *     setStream(handle, stream_module.get_current_stream_ptr())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_91zgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_90zgesvd_bufferSize[] = "zgesvd_bufferSize(size_t handle, int m, int n) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_91zgesvd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgesvd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_n,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd_bufferSize", 1, 3, 3, 1); __PYX_ERR(0, 673, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd_bufferSize", 1, 3, 3, 2); __PYX_ERR(0, 673, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgesvd_bufferSize") < 0)) __PYX_ERR(0, 673, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgesvd_bufferSize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 673, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_90zgesvd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_90zgesvd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("zgesvd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_zgesvd_bufferSize(__pyx_v_handle, __pyx_v_m, __pyx_v_n, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgesvd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":681
 *     return lwork
 * 
 * cpdef sgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_93sgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_sgesvd(size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgesvd", 0);

  /* "cupy/cuda/cusolver.pyx":684
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSgesvd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":685
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <float*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":686
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSgesvd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, jobu, jobvt, m, n, <float*>A,
 *             lda, <float*>S, <float*>U, ldu, <float*>VT, ldvt,
 */
        __pyx_v_status = cusolverDnSgesvd(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_S), ((float *)__pyx_v_U), __pyx_v_ldu, ((float *)__pyx_v_VT), __pyx_v_ldvt, ((float *)__pyx_v_Work), __pyx_v_lwork, ((float *)__pyx_v_rwork), ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":685
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <float*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":690
 *             lda, <float*>S, <float*>U, ldu, <float*>VT, ldvt,
 *             <float*>Work, lwork, <float*>rwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":681
 *     return lwork
 * 
 * cpdef sgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_93sgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_92sgesvd[] = "sgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A, int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt, size_t Work, int lwork, size_t rwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_93sgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  char __pyx_v_jobu;
  char __pyx_v_jobvt;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_S;
  size_t __pyx_v_U;
  int __pyx_v_ldu;
  size_t __pyx_v_VT;
  int __pyx_v_ldvt;
  size_t __pyx_v_Work;
  int __pyx_v_lwork;
  size_t __pyx_v_rwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sgesvd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobu,&__pyx_n_s_jobvt,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_S,&__pyx_n_s_U,&__pyx_n_s_ldu,&__pyx_n_s_VT,&__pyx_n_s_ldvt,&__pyx_n_s_Work,&__pyx_n_s_lwork,&__pyx_n_s_rwork,&__pyx_n_s_devInfo,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 1); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 2); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 3); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 4); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 5); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 6); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_S)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 7); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_U)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 8); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 9); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_VT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 10); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 11); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 12); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 13); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 14); __PYX_ERR(0, 681, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, 15); __PYX_ERR(0, 681, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sgesvd") < 0)) __PYX_ERR(0, 681, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 16) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_jobu = __Pyx_PyInt_As_char(values[1]); if (unlikely((__pyx_v_jobu == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_jobvt = __Pyx_PyInt_As_char(values[2]); if (unlikely((__pyx_v_jobvt == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_S = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_S == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_U = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_U == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_ldu = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_ldu == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_VT = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_VT == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_ldvt = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldvt == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 682, __pyx_L3_error)
    __pyx_v_Work = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L3_error)
    __pyx_v_rwork = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_rwork == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[15]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 683, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sgesvd", 1, 16, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 681, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_92sgesvd(__pyx_self, __pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_92sgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sgesvd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_sgesvd(__pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.sgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":692
 *     check_status(status)
 * 
 * cpdef dgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_95dgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dgesvd(size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgesvd", 0);

  /* "cupy/cuda/cusolver.pyx":695
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDgesvd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":696
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <double*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":697
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDgesvd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, jobu, jobvt, m, n, <double*>A,
 *             lda, <double*>S, <double*>U, ldu, <double*>VT, ldvt,
 */
        __pyx_v_status = cusolverDnDgesvd(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_S), ((double *)__pyx_v_U), __pyx_v_ldu, ((double *)__pyx_v_VT), __pyx_v_ldvt, ((double *)__pyx_v_Work), __pyx_v_lwork, ((double *)__pyx_v_rwork), ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":696
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <double*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":701
 *             lda, <double*>S, <double*>U, ldu, <double*>VT, ldvt,
 *             <double*>Work, lwork, <double*>rwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef cgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":692
 *     check_status(status)
 * 
 * cpdef dgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_95dgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_94dgesvd[] = "dgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A, int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt, size_t Work, int lwork, size_t rwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_95dgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  char __pyx_v_jobu;
  char __pyx_v_jobvt;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_S;
  size_t __pyx_v_U;
  int __pyx_v_ldu;
  size_t __pyx_v_VT;
  int __pyx_v_ldvt;
  size_t __pyx_v_Work;
  int __pyx_v_lwork;
  size_t __pyx_v_rwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dgesvd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobu,&__pyx_n_s_jobvt,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_S,&__pyx_n_s_U,&__pyx_n_s_ldu,&__pyx_n_s_VT,&__pyx_n_s_ldvt,&__pyx_n_s_Work,&__pyx_n_s_lwork,&__pyx_n_s_rwork,&__pyx_n_s_devInfo,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 1); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 2); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 3); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 4); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 5); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 6); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_S)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 7); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_U)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 8); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 9); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_VT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 10); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 11); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 12); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 13); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 14); __PYX_ERR(0, 692, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, 15); __PYX_ERR(0, 692, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dgesvd") < 0)) __PYX_ERR(0, 692, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 16) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L3_error)
    __pyx_v_jobu = __Pyx_PyInt_As_char(values[1]); if (unlikely((__pyx_v_jobu == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L3_error)
    __pyx_v_jobvt = __Pyx_PyInt_As_char(values[2]); if (unlikely((__pyx_v_jobvt == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_S = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_S == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_U = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_U == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_ldu = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_ldu == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_VT = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_VT == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_ldvt = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldvt == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L3_error)
    __pyx_v_Work = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L3_error)
    __pyx_v_rwork = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_rwork == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[15]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dgesvd", 1, 16, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 692, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_94dgesvd(__pyx_self, __pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_94dgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgesvd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dgesvd(__pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":703
 *     check_status(status)
 * 
 * cpdef cgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_97cgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cgesvd(size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgesvd", 0);

  /* "cupy/cuda/cusolver.pyx":706
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCgesvd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":707
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <cuComplex*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":708
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCgesvd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, jobu, jobvt, m, n, <cuComplex*>A,
 *             lda, <float*>S, <cuComplex*>U, ldu, <cuComplex*>VT, ldvt,
 */
        __pyx_v_status = cusolverDnCgesvd(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, ((cuComplex *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_S), ((cuComplex *)__pyx_v_U), __pyx_v_ldu, ((cuComplex *)__pyx_v_VT), __pyx_v_ldvt, ((cuComplex *)__pyx_v_Work), __pyx_v_lwork, ((float *)__pyx_v_rwork), ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":707
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <cuComplex*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":712
 *             lda, <float*>S, <cuComplex*>U, ldu, <cuComplex*>VT, ldvt,
 *             <cuComplex*>Work, lwork, <float*>rwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef zgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":703
 *     check_status(status)
 * 
 * cpdef cgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_97cgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_96cgesvd[] = "cgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A, int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt, size_t Work, int lwork, size_t rwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_97cgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  char __pyx_v_jobu;
  char __pyx_v_jobvt;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_S;
  size_t __pyx_v_U;
  int __pyx_v_ldu;
  size_t __pyx_v_VT;
  int __pyx_v_ldvt;
  size_t __pyx_v_Work;
  int __pyx_v_lwork;
  size_t __pyx_v_rwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgesvd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobu,&__pyx_n_s_jobvt,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_S,&__pyx_n_s_U,&__pyx_n_s_ldu,&__pyx_n_s_VT,&__pyx_n_s_ldvt,&__pyx_n_s_Work,&__pyx_n_s_lwork,&__pyx_n_s_rwork,&__pyx_n_s_devInfo,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 1); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 2); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 3); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 4); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 5); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 6); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_S)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 7); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_U)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 8); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 9); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_VT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 10); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 11); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 12); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 13); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 14); __PYX_ERR(0, 703, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, 15); __PYX_ERR(0, 703, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cgesvd") < 0)) __PYX_ERR(0, 703, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 16) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L3_error)
    __pyx_v_jobu = __Pyx_PyInt_As_char(values[1]); if (unlikely((__pyx_v_jobu == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L3_error)
    __pyx_v_jobvt = __Pyx_PyInt_As_char(values[2]); if (unlikely((__pyx_v_jobvt == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L3_error)
    __pyx_v_S = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_S == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L3_error)
    __pyx_v_U = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_U == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L3_error)
    __pyx_v_ldu = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_ldu == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L3_error)
    __pyx_v_VT = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_VT == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L3_error)
    __pyx_v_ldvt = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldvt == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L3_error)
    __pyx_v_Work = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L3_error)
    __pyx_v_rwork = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_rwork == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[15]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgesvd", 1, 16, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 703, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_96cgesvd(__pyx_self, __pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_96cgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cgesvd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_cgesvd(__pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":714
 *     check_status(status)
 * 
 * cpdef zgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_99zgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zgesvd(size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgesvd", 0);

  /* "cupy/cuda/cusolver.pyx":717
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnZgesvd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":718
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <cuDoubleComplex*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":719
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnZgesvd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, jobu, jobvt, m, n, <cuDoubleComplex*>A,
 *             lda, <double*>S, <cuDoubleComplex*>U, ldu,
 */
        __pyx_v_status = cusolverDnZgesvd(((cusolverDnHandle_t)__pyx_v_handle), __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_S), ((cuDoubleComplex *)__pyx_v_U), __pyx_v_ldu, ((cuDoubleComplex *)__pyx_v_VT), __pyx_v_ldvt, ((cuDoubleComplex *)__pyx_v_Work), __pyx_v_lwork, ((double *)__pyx_v_rwork), ((int *)__pyx_v_devInfo));
      }

      /* "cupy/cuda/cusolver.pyx":718
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZgesvd(
 *             <Handle>handle, jobu, jobvt, m, n, <cuDoubleComplex*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":724
 *             <cuDoubleComplex*>VT, ldvt,
 *             <cuDoubleComplex*>Work, lwork, <double*>rwork, <int*>devInfo)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef int ssyevd_bufferSize(size_t handle, int jobz, int uplo, int n,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":714
 *     check_status(status)
 * 
 * cpdef zgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A,             # <<<<<<<<<<<<<<
 *              int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt,
 *              size_t Work, int lwork, size_t rwork, size_t devInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_99zgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_98zgesvd[] = "zgesvd(size_t handle, char jobu, char jobvt, int m, int n, size_t A, int lda, size_t S, size_t U, int ldu, size_t VT, int ldvt, size_t Work, int lwork, size_t rwork, size_t devInfo)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_99zgesvd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  char __pyx_v_jobu;
  char __pyx_v_jobvt;
  int __pyx_v_m;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_S;
  size_t __pyx_v_U;
  int __pyx_v_ldu;
  size_t __pyx_v_VT;
  int __pyx_v_ldvt;
  size_t __pyx_v_Work;
  int __pyx_v_lwork;
  size_t __pyx_v_rwork;
  size_t __pyx_v_devInfo;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zgesvd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobu,&__pyx_n_s_jobvt,&__pyx_n_s_m,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_S,&__pyx_n_s_U,&__pyx_n_s_ldu,&__pyx_n_s_VT,&__pyx_n_s_ldvt,&__pyx_n_s_Work,&__pyx_n_s_lwork,&__pyx_n_s_rwork,&__pyx_n_s_devInfo,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 1); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 2); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 3); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 4); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 5); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 6); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_S)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 7); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_U)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 8); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 9); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_VT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 10); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ldvt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 11); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 12); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 13); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 14); __PYX_ERR(0, 714, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_devInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, 15); __PYX_ERR(0, 714, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zgesvd") < 0)) __PYX_ERR(0, 714, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 16) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_jobu = __Pyx_PyInt_As_char(values[1]); if (unlikely((__pyx_v_jobu == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_jobvt = __Pyx_PyInt_As_char(values[2]); if (unlikely((__pyx_v_jobvt == (char)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_S = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_S == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_U = __Pyx_PyInt_As_size_t(values[8]); if (unlikely((__pyx_v_U == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_ldu = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_ldu == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_VT = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_VT == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_ldvt = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_ldvt == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 715, __pyx_L3_error)
    __pyx_v_Work = __Pyx_PyInt_As_size_t(values[12]); if (unlikely((__pyx_v_Work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L3_error)
    __pyx_v_rwork = __Pyx_PyInt_As_size_t(values[14]); if (unlikely((__pyx_v_rwork == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L3_error)
    __pyx_v_devInfo = __Pyx_PyInt_As_size_t(values[15]); if (unlikely((__pyx_v_devInfo == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zgesvd", 1, 16, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 714, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_98zgesvd(__pyx_self, __pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_98zgesvd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, char __pyx_v_jobu, char __pyx_v_jobvt, int __pyx_v_m, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_S, size_t __pyx_v_U, int __pyx_v_ldu, size_t __pyx_v_VT, int __pyx_v_ldvt, size_t __pyx_v_Work, int __pyx_v_lwork, size_t __pyx_v_rwork, size_t __pyx_v_devInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zgesvd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_zgesvd(__pyx_v_handle, __pyx_v_jobu, __pyx_v_jobvt, __pyx_v_m, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_S, __pyx_v_U, __pyx_v_ldu, __pyx_v_VT, __pyx_v_ldvt, __pyx_v_Work, __pyx_v_lwork, __pyx_v_rwork, __pyx_v_devInfo, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zgesvd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":726
 *     check_status(status)
 * 
 * cpdef int ssyevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_101ssyevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_ssyevd_bufferSize(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ssyevd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":729
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSsyevd_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":730
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSsyevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const float*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":731
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSsyevd_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const float*>A,
 *             lda, <const float*>W, &lwork)
 */
        __pyx_v_status = cusolverDnSsyevd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((float const *)__pyx_v_A), __pyx_v_lda, ((float const *)__pyx_v_W), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":730
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSsyevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const float*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":734
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const float*>A,
 *             lda, <const float*>W, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":735
 *             lda, <const float*>W, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int dsyevd_bufferSize(size_t handle, int jobz, int uplo, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":726
 *     check_status(status)
 * 
 * cpdef int ssyevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cupy.cuda.cusolver.ssyevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_101ssyevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_100ssyevd_bufferSize[] = "ssyevd_bufferSize(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_101ssyevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ssyevd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 726, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ssyevd_bufferSize") < 0)) __PYX_ERR(0, 726, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ssyevd_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 726, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssyevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_100ssyevd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_100ssyevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ssyevd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4cupy_4cuda_8cusolver_ssyevd_bufferSize(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssyevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":737
 *     return lwork
 * 
 * cpdef int dsyevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_103dsyevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_dsyevd_bufferSize(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dsyevd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":740
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDsyevd_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":741
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDsyevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const double*>A,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":742
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDsyevd_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const double*>A,
 *             lda, <const double*>W, &lwork)
 */
        __pyx_v_status = cusolverDnDsyevd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((double const *)__pyx_v_A), __pyx_v_lda, ((double const *)__pyx_v_W), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":741
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDsyevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const double*>A,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":745
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <const double*>A,
 *             lda, <const double*>W, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":746
 *             lda, <const double*>W, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int cheevd_bufferSize(size_t handle, int jobz, int uplo, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":737
 *     return lwork
 * 
 * cpdef int dsyevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cupy.cuda.cusolver.dsyevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_103dsyevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_102dsyevd_bufferSize[] = "dsyevd_bufferSize(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_103dsyevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dsyevd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 737, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 737, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 737, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 737, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 737, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 737, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dsyevd_bufferSize") < 0)) __PYX_ERR(0, 737, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 737, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 737, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 737, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 737, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 738, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 738, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 738, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dsyevd_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 737, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsyevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_102dsyevd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_102dsyevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dsyevd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4cupy_4cuda_8cusolver_dsyevd_bufferSize(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsyevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":748
 *     return lwork
 * 
 * cpdef int cheevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_105cheevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_cheevd_bufferSize(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cheevd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":751
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCheevd_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":752
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCheevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":753
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCheevd_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 *             <const cuComplex*>A,
 */
        __pyx_v_status = cusolverDnCheevd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((cuComplex const *)__pyx_v_A), __pyx_v_lda, ((float const *)__pyx_v_W), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":752
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCheevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":757
 *             <const cuComplex*>A,
 *             lda, <const float*>W, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":758
 *             lda, <const float*>W, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef int zheevd_bufferSize(size_t handle, int jobz, int uplo, int n,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":748
 *     return lwork
 * 
 * cpdef int cheevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cupy.cuda.cusolver.cheevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_105cheevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_104cheevd_bufferSize[] = "cheevd_bufferSize(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_105cheevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cheevd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 748, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 748, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 748, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 748, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 748, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 748, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cheevd_bufferSize") < 0)) __PYX_ERR(0, 748, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cheevd_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 748, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cheevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_104cheevd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_104cheevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cheevd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4cupy_4cuda_8cusolver_cheevd_bufferSize(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cheevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":760
 *     return lwork
 * 
 * cpdef int zheevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_107zheevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4cupy_4cuda_8cusolver_zheevd_bufferSize(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_lwork;
  int __pyx_v_status;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zheevd_bufferSize", 0);

  /* "cupy/cuda/cusolver.pyx":763
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnZheevd_bufferSize(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":764
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZheevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":765
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnZheevd_bufferSize(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 *             <const cuDoubleComplex*>A,
 */
        __pyx_v_status = cusolverDnZheevd_bufferSize(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((cuDoubleComplex const *)__pyx_v_A), __pyx_v_lda, ((double const *)__pyx_v_W), (&__pyx_v_lwork));
      }

      /* "cupy/cuda/cusolver.pyx":764
 *     cdef int lwork, status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZheevd_bufferSize(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":769
 *             <const cuDoubleComplex*>A,
 *             lda, <const double*>W, &lwork)
 *     check_status(status)             # <<<<<<<<<<<<<<
 *     return lwork
 * 
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":770
 *             lda, <const double*>W, &lwork)
 *     check_status(status)
 *     return lwork             # <<<<<<<<<<<<<<
 * 
 * cpdef ssyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,
 */
  __pyx_r = __pyx_v_lwork;
  goto __pyx_L0;

  /* "cupy/cuda/cusolver.pyx":760
 *     return lwork
 * 
 * cpdef int zheevd_bufferSize(size_t handle, int jobz, int uplo, int n,             # <<<<<<<<<<<<<<
 *                             size_t A, int lda, size_t W):
 *     cdef int lwork, status
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("cupy.cuda.cusolver.zheevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_107zheevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_106zheevd_bufferSize[] = "zheevd_bufferSize(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W) -> int";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_107zheevd_bufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zheevd_bufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd_bufferSize", 1, 7, 7, 1); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd_bufferSize", 1, 7, 7, 2); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd_bufferSize", 1, 7, 7, 3); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd_bufferSize", 1, 7, 7, 4); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd_bufferSize", 1, 7, 7, 5); __PYX_ERR(0, 760, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd_bufferSize", 1, 7, 7, 6); __PYX_ERR(0, 760, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zheevd_bufferSize") < 0)) __PYX_ERR(0, 760, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zheevd_bufferSize", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 760, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zheevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_106zheevd_bufferSize(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_106zheevd_bufferSize(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zheevd_bufferSize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4cupy_4cuda_8cusolver_zheevd_bufferSize(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zheevd_bufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":772
 *     return lwork
 * 
 * cpdef ssyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_109ssyevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_ssyevd(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ssyevd", 0);

  /* "cupy/cuda/cusolver.pyx":775
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnSsyevd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":776
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSsyevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <float*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":777
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnSsyevd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <float*>A, lda,
 *             <float*>W, <float*>work, lwork, <int*>info)
 */
        __pyx_v_status = cusolverDnSsyevd(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((float *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_W), ((float *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_info));
      }

      /* "cupy/cuda/cusolver.pyx":776
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnSsyevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <float*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":780
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <float*>A, lda,
 *             <float*>W, <float*>work, lwork, <int*>info)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dsyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":772
 *     return lwork
 * 
 * cpdef ssyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssyevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_109ssyevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_108ssyevd[] = "ssyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W, size_t work, int lwork, size_t info)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_109ssyevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_info;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ssyevd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_info,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 1); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 2); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 3); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 4); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 5); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 6); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 7); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 8); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, 9); __PYX_ERR(0, 772, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ssyevd") < 0)) __PYX_ERR(0, 772, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L3_error)
    __pyx_v_info = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_info == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ssyevd", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 772, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssyevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_108ssyevd(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_108ssyevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ssyevd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_ssyevd(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.ssyevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":782
 *     check_status(status)
 * 
 * cpdef dsyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_111dsyevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dsyevd(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dsyevd", 0);

  /* "cupy/cuda/cusolver.pyx":785
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnDsyevd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":786
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDsyevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <double*>A, lda,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":787
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnDsyevd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <double*>A, lda,
 *             <double*>W, <double*>work, lwork, <int*>info)
 */
        __pyx_v_status = cusolverDnDsyevd(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((double *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_W), ((double *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_info));
      }

      /* "cupy/cuda/cusolver.pyx":786
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnDsyevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <double*>A, lda,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":790
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n, <double*>A, lda,
 *             <double*>W, <double*>work, lwork, <int*>info)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef cheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":782
 *     check_status(status)
 * 
 * cpdef dsyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsyevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_111dsyevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_110dsyevd[] = "dsyevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W, size_t work, int lwork, size_t info)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_111dsyevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_info;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dsyevd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_info,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 1); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 2); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 3); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 4); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 5); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 6); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 7); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 8); __PYX_ERR(0, 782, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, 9); __PYX_ERR(0, 782, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dsyevd") < 0)) __PYX_ERR(0, 782, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
    __pyx_v_info = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_info == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 783, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dsyevd", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 782, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsyevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_110dsyevd(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_110dsyevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dsyevd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dsyevd(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dsyevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":792
 *     check_status(status)
 * 
 * cpdef cheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_113cheevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_cheevd(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cheevd", 0);

  /* "cupy/cuda/cusolver.pyx":795
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnCheevd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":796
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCheevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":797
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnCheevd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 *             <cuComplex*>A, lda,
 */
        __pyx_v_status = cusolverDnCheevd(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((cuComplex *)__pyx_v_A), __pyx_v_lda, ((float *)__pyx_v_W), ((cuComplex *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_info));
      }

      /* "cupy/cuda/cusolver.pyx":796
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnCheevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":801
 *             <cuComplex*>A, lda,
 *             <float*>W, <cuComplex*>work, lwork, <int*>info)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef zheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":792
 *     check_status(status)
 * 
 * cpdef cheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cheevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_113cheevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_112cheevd[] = "cheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W, size_t work, int lwork, size_t info)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_113cheevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_info;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cheevd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_info,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 1); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 2); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 3); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 4); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 5); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 6); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 7); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 8); __PYX_ERR(0, 792, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, 9); __PYX_ERR(0, 792, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cheevd") < 0)) __PYX_ERR(0, 792, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L3_error)
    __pyx_v_info = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_info == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cheevd", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 792, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.cheevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_112cheevd(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_112cheevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cheevd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_cheevd(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.cheevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":803
 *     check_status(status)
 * 
 * cpdef zheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_115zheevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_zheevd(size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zheevd", 0);

  /* "cupy/cuda/cusolver.pyx":806
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverDnZheevd(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_setStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":807
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZheevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":808
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverDnZheevd(             # <<<<<<<<<<<<<<
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 *             <cuDoubleComplex*>A, lda,
 */
        __pyx_v_status = cusolverDnZheevd(((cusolverDnHandle_t)__pyx_v_handle), ((cusolverEigMode_t)__pyx_v_jobz), ((cublasFillMode_t)__pyx_v_uplo), __pyx_v_n, ((cuDoubleComplex *)__pyx_v_A), __pyx_v_lda, ((double *)__pyx_v_W), ((cuDoubleComplex *)__pyx_v_work), __pyx_v_lwork, ((int *)__pyx_v_info));
      }

      /* "cupy/cuda/cusolver.pyx":807
 *     cdef int status
 *     setStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverDnZheevd(
 *             <Handle>handle, <EigMode>jobz, <FillMode>uplo, n,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":812
 *             <cuDoubleComplex*>A, lda,
 *             <double*>W, <cuDoubleComplex*>work, lwork, <int*>info)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * ###############################################################################
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":803
 *     check_status(status)
 * 
 * cpdef zheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda,             # <<<<<<<<<<<<<<
 *              size_t W, size_t work, int lwork, size_t info):
 *     cdef int status
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zheevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_115zheevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_114zheevd[] = "zheevd(size_t handle, int jobz, int uplo, int n, size_t A, int lda, size_t W, size_t work, int lwork, size_t info)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_115zheevd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_jobz;
  int __pyx_v_uplo;
  int __pyx_v_n;
  size_t __pyx_v_A;
  int __pyx_v_lda;
  size_t __pyx_v_W;
  size_t __pyx_v_work;
  int __pyx_v_lwork;
  size_t __pyx_v_info;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zheevd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_jobz,&__pyx_n_s_uplo,&__pyx_n_s_n,&__pyx_n_s_A,&__pyx_n_s_lda,&__pyx_n_s_W,&__pyx_n_s_work,&__pyx_n_s_lwork,&__pyx_n_s_info,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jobz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 1); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uplo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 2); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 3); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 4); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 5); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_W)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 6); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 7); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lwork)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 8); __PYX_ERR(0, 803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_info)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, 9); __PYX_ERR(0, 803, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zheevd") < 0)) __PYX_ERR(0, 803, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
    __pyx_v_jobz = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_jobz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
    __pyx_v_uplo = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_uplo == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_A == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
    __pyx_v_lda = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_lda == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
    __pyx_v_W = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_W == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L3_error)
    __pyx_v_work = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_work == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L3_error)
    __pyx_v_lwork = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_lwork == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L3_error)
    __pyx_v_info = __Pyx_PyInt_As_size_t(values[9]); if (unlikely((__pyx_v_info == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zheevd", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 803, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.zheevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_114zheevd(__pyx_self, __pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_114zheevd(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_jobz, int __pyx_v_uplo, int __pyx_v_n, size_t __pyx_v_A, int __pyx_v_lda, size_t __pyx_v_W, size_t __pyx_v_work, int __pyx_v_lwork, size_t __pyx_v_info) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zheevd", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_zheevd(__pyx_v_handle, __pyx_v_jobz, __pyx_v_uplo, __pyx_v_n, __pyx_v_A, __pyx_v_lda, __pyx_v_W, __pyx_v_work, __pyx_v_lwork, __pyx_v_info, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.zheevd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":817
 * # sparse LAPACK Functions
 * ###############################################################################
 * cpdef scsrlsvchol(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                   size_t csrRowPtrA, size_t csrColIndA, size_t b, float tol,
 *                   int reorder, size_t x, size_t singularity):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_117scsrlsvchol(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_scsrlsvchol(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, float __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("scsrlsvchol", 0);

  /* "cupy/cuda/cusolver.pyx":821
 *                   int reorder, size_t x, size_t singularity):
 *     cdef int status
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpScsrlsvchol(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":822
 *     cdef int status
 *     with nogil:
 *         status = cusolverSpScsrlsvchol(             # <<<<<<<<<<<<<<
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 *             <const float*> csrValA, <const int*> csrRowPtrA,
 */
        __pyx_v_status = cusolverSpScsrlsvchol(((cusolverSpHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_nnz, ((cusparseMatDescr_t const )__pyx_v_descrA), ((float const *)__pyx_v_csrValA), ((int const *)__pyx_v_csrRowPtrA), ((int const *)__pyx_v_csrColIndA), ((float const *)__pyx_v_b), __pyx_v_tol, __pyx_v_reorder, ((float *)__pyx_v_x), ((int *)__pyx_v_singularity));
      }

      /* "cupy/cuda/cusolver.pyx":821
 *                   int reorder, size_t x, size_t singularity):
 *     cdef int status
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpScsrlsvchol(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":827
 *             <const int*> csrColIndA, <const float*> b,
 *             tol, reorder, <float*> x, <int*> singularity)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dcsrlsvchol(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":817
 * # sparse LAPACK Functions
 * ###############################################################################
 * cpdef scsrlsvchol(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                   size_t csrRowPtrA, size_t csrColIndA, size_t b, float tol,
 *                   int reorder, size_t x, size_t singularity):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.scsrlsvchol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_117scsrlsvchol(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_116scsrlsvchol[] = "scsrlsvchol(size_t handle, int m, int nnz, size_t descrA, size_t csrValA, size_t csrRowPtrA, size_t csrColIndA, size_t b, float tol, int reorder, size_t x, size_t singularity)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_117scsrlsvchol(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_nnz;
  size_t __pyx_v_descrA;
  size_t __pyx_v_csrValA;
  size_t __pyx_v_csrRowPtrA;
  size_t __pyx_v_csrColIndA;
  size_t __pyx_v_b;
  float __pyx_v_tol;
  int __pyx_v_reorder;
  size_t __pyx_v_x;
  size_t __pyx_v_singularity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scsrlsvchol (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_nnz,&__pyx_n_s_descrA,&__pyx_n_s_csrValA,&__pyx_n_s_csrRowPtrA,&__pyx_n_s_csrColIndA,&__pyx_n_s_b,&__pyx_n_s_tol,&__pyx_n_s_reorder,&__pyx_n_s_x,&__pyx_n_s_singularity,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 1); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nnz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 2); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_descrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 3); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrValA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 4); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrRowPtrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 5); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrColIndA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 6); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 7); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 8); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reorder)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 9); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 10); __PYX_ERR(0, 817, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_singularity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, 11); __PYX_ERR(0, 817, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scsrlsvchol") < 0)) __PYX_ERR(0, 817, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 817, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 817, __pyx_L3_error)
    __pyx_v_nnz = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nnz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 817, __pyx_L3_error)
    __pyx_v_descrA = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_descrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 817, __pyx_L3_error)
    __pyx_v_csrValA = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_csrValA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 817, __pyx_L3_error)
    __pyx_v_csrRowPtrA = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_csrRowPtrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 818, __pyx_L3_error)
    __pyx_v_csrColIndA = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_csrColIndA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 818, __pyx_L3_error)
    __pyx_v_b = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_b == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 818, __pyx_L3_error)
    __pyx_v_tol = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_tol == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 818, __pyx_L3_error)
    __pyx_v_reorder = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_reorder == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 819, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 819, __pyx_L3_error)
    __pyx_v_singularity = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_singularity == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 819, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scsrlsvchol", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 817, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.scsrlsvchol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_116scsrlsvchol(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_116scsrlsvchol(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, float __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("scsrlsvchol", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_scsrlsvchol(__pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.scsrlsvchol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":829
 *     check_status(status)
 * 
 * cpdef dcsrlsvchol(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                   size_t csrRowPtrA, size_t csrColIndA, size_t b, double tol,
 *                   int reorder, size_t x, size_t singularity):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_119dcsrlsvchol(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dcsrlsvchol(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, double __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dcsrlsvchol", 0);

  /* "cupy/cuda/cusolver.pyx":833
 *                   int reorder, size_t x, size_t singularity):
 *     cdef int status
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpDcsrlsvchol(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":834
 *     cdef int status
 *     with nogil:
 *         status = cusolverSpDcsrlsvchol(             # <<<<<<<<<<<<<<
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 *             <const double*> csrValA, <const int*> csrRowPtrA,
 */
        __pyx_v_status = cusolverSpDcsrlsvchol(((cusolverSpHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_nnz, ((cusparseMatDescr_t const )__pyx_v_descrA), ((double const *)__pyx_v_csrValA), ((int const *)__pyx_v_csrRowPtrA), ((int const *)__pyx_v_csrColIndA), ((double const *)__pyx_v_b), __pyx_v_tol, __pyx_v_reorder, ((double *)__pyx_v_x), ((int *)__pyx_v_singularity));
      }

      /* "cupy/cuda/cusolver.pyx":833
 *                   int reorder, size_t x, size_t singularity):
 *     cdef int status
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpDcsrlsvchol(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":839
 *             <const int*> csrColIndA, <const double*> b,
 *             tol, reorder, <double*> x, <int*> singularity)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef scsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":829
 *     check_status(status)
 * 
 * cpdef dcsrlsvchol(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                   size_t csrRowPtrA, size_t csrColIndA, size_t b, double tol,
 *                   int reorder, size_t x, size_t singularity):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dcsrlsvchol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_119dcsrlsvchol(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_118dcsrlsvchol[] = "dcsrlsvchol(size_t handle, int m, int nnz, size_t descrA, size_t csrValA, size_t csrRowPtrA, size_t csrColIndA, size_t b, double tol, int reorder, size_t x, size_t singularity)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_119dcsrlsvchol(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_nnz;
  size_t __pyx_v_descrA;
  size_t __pyx_v_csrValA;
  size_t __pyx_v_csrRowPtrA;
  size_t __pyx_v_csrColIndA;
  size_t __pyx_v_b;
  double __pyx_v_tol;
  int __pyx_v_reorder;
  size_t __pyx_v_x;
  size_t __pyx_v_singularity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dcsrlsvchol (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_nnz,&__pyx_n_s_descrA,&__pyx_n_s_csrValA,&__pyx_n_s_csrRowPtrA,&__pyx_n_s_csrColIndA,&__pyx_n_s_b,&__pyx_n_s_tol,&__pyx_n_s_reorder,&__pyx_n_s_x,&__pyx_n_s_singularity,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 1); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nnz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 2); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_descrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 3); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrValA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 4); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrRowPtrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 5); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrColIndA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 6); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 7); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 8); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reorder)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 9); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 10); __PYX_ERR(0, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_singularity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, 11); __PYX_ERR(0, 829, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dcsrlsvchol") < 0)) __PYX_ERR(0, 829, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L3_error)
    __pyx_v_nnz = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nnz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L3_error)
    __pyx_v_descrA = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_descrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L3_error)
    __pyx_v_csrValA = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_csrValA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L3_error)
    __pyx_v_csrRowPtrA = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_csrRowPtrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 830, __pyx_L3_error)
    __pyx_v_csrColIndA = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_csrColIndA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 830, __pyx_L3_error)
    __pyx_v_b = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_b == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 830, __pyx_L3_error)
    __pyx_v_tol = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 830, __pyx_L3_error)
    __pyx_v_reorder = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_reorder == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L3_error)
    __pyx_v_singularity = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_singularity == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 831, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dcsrlsvchol", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 829, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dcsrlsvchol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_118dcsrlsvchol(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_118dcsrlsvchol(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, double __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dcsrlsvchol", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dcsrlsvchol(__pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dcsrlsvchol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":841
 *     check_status(status)
 * 
 * cpdef scsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                 size_t csrRowPtrA, size_t csrColIndA, size_t b, float tol,
 *                 int reorder, size_t x, size_t singularity):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_121scsrlsvqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_scsrlsvqr(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, float __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("scsrlsvqr", 0);

  /* "cupy/cuda/cusolver.pyx":845
 *                 int reorder, size_t x, size_t singularity):
 *     cdef int status
 *     spSetStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverSpScsrlsvqr(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spSetStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":846
 *     cdef int status
 *     spSetStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpScsrlsvqr(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":847
 *     spSetStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverSpScsrlsvqr(             # <<<<<<<<<<<<<<
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 *             <const float*> csrValA, <const int*> csrRowPtrA,
 */
        __pyx_v_status = cusolverSpScsrlsvqr(((cusolverSpHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_nnz, ((cusparseMatDescr_t const )__pyx_v_descrA), ((float const *)__pyx_v_csrValA), ((int const *)__pyx_v_csrRowPtrA), ((int const *)__pyx_v_csrColIndA), ((float const *)__pyx_v_b), __pyx_v_tol, __pyx_v_reorder, ((float *)__pyx_v_x), ((int *)__pyx_v_singularity));
      }

      /* "cupy/cuda/cusolver.pyx":846
 *     cdef int status
 *     spSetStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpScsrlsvqr(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":852
 *             <const int*> csrColIndA, <const float*> b,
 *             tol, reorder, <float*> x, <int*> singularity)
 *     check_status(status)             # <<<<<<<<<<<<<<
 * 
 * cpdef dcsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":841
 *     check_status(status)
 * 
 * cpdef scsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                 size_t csrRowPtrA, size_t csrColIndA, size_t b, float tol,
 *                 int reorder, size_t x, size_t singularity):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.scsrlsvqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_121scsrlsvqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_120scsrlsvqr[] = "scsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA, size_t csrRowPtrA, size_t csrColIndA, size_t b, float tol, int reorder, size_t x, size_t singularity)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_121scsrlsvqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_nnz;
  size_t __pyx_v_descrA;
  size_t __pyx_v_csrValA;
  size_t __pyx_v_csrRowPtrA;
  size_t __pyx_v_csrColIndA;
  size_t __pyx_v_b;
  float __pyx_v_tol;
  int __pyx_v_reorder;
  size_t __pyx_v_x;
  size_t __pyx_v_singularity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scsrlsvqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_nnz,&__pyx_n_s_descrA,&__pyx_n_s_csrValA,&__pyx_n_s_csrRowPtrA,&__pyx_n_s_csrColIndA,&__pyx_n_s_b,&__pyx_n_s_tol,&__pyx_n_s_reorder,&__pyx_n_s_x,&__pyx_n_s_singularity,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 1); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nnz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 2); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_descrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 3); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrValA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 4); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrRowPtrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 5); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrColIndA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 6); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 7); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 8); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reorder)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 9); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 10); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_singularity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, 11); __PYX_ERR(0, 841, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scsrlsvqr") < 0)) __PYX_ERR(0, 841, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L3_error)
    __pyx_v_nnz = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nnz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L3_error)
    __pyx_v_descrA = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_descrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L3_error)
    __pyx_v_csrValA = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_csrValA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L3_error)
    __pyx_v_csrRowPtrA = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_csrRowPtrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 842, __pyx_L3_error)
    __pyx_v_csrColIndA = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_csrColIndA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 842, __pyx_L3_error)
    __pyx_v_b = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_b == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 842, __pyx_L3_error)
    __pyx_v_tol = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_tol == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 842, __pyx_L3_error)
    __pyx_v_reorder = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_reorder == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 843, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 843, __pyx_L3_error)
    __pyx_v_singularity = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_singularity == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 843, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scsrlsvqr", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 841, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.scsrlsvqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_120scsrlsvqr(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_120scsrlsvqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, float __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("scsrlsvqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_scsrlsvqr(__pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.scsrlsvqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cupy/cuda/cusolver.pyx":854
 *     check_status(status)
 * 
 * cpdef dcsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                 size_t csrRowPtrA, size_t csrColIndA, size_t b, double tol,
 *                 int reorder, size_t x, size_t singularity):
 */

static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_123dcsrlsvqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4cupy_4cuda_8cusolver_dcsrlsvqr(size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, double __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_status;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dcsrlsvqr", 0);

  /* "cupy/cuda/cusolver.pyx":858
 *                 int reorder, size_t x, size_t singularity):
 *     cdef int status
 *     spSetStream(handle, stream_module.get_current_stream_ptr())             # <<<<<<<<<<<<<<
 *     with nogil:
 *         status = cusolverSpDcsrlsvqr(
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_spSetStream(__pyx_v_handle, __pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr(), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":859
 *     cdef int status
 *     spSetStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpDcsrlsvqr(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "cupy/cuda/cusolver.pyx":860
 *     spSetStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:
 *         status = cusolverSpDcsrlsvqr(             # <<<<<<<<<<<<<<
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 *             <const double*> csrValA, <const int*> csrRowPtrA,
 */
        __pyx_v_status = cusolverSpDcsrlsvqr(((cusolverSpHandle_t)__pyx_v_handle), __pyx_v_m, __pyx_v_nnz, ((cusparseMatDescr_t const )__pyx_v_descrA), ((double const *)__pyx_v_csrValA), ((int const *)__pyx_v_csrRowPtrA), ((int const *)__pyx_v_csrColIndA), ((double const *)__pyx_v_b), __pyx_v_tol, __pyx_v_reorder, ((double *)__pyx_v_x), ((int *)__pyx_v_singularity));
      }

      /* "cupy/cuda/cusolver.pyx":859
 *     cdef int status
 *     spSetStream(handle, stream_module.get_current_stream_ptr())
 *     with nogil:             # <<<<<<<<<<<<<<
 *         status = cusolverSpDcsrlsvqr(
 *             <SpHandle>handle, m, nnz, <const MatDescr> descrA,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cupy/cuda/cusolver.pyx":865
 *             <const int*> csrColIndA, <const double*> b,
 *             tol, reorder, <double*> x, <int*> singularity)
 *     check_status(status)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_check_status(__pyx_v_status, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":854
 *     check_status(status)
 * 
 * cpdef dcsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA,             # <<<<<<<<<<<<<<
 *                 size_t csrRowPtrA, size_t csrColIndA, size_t b, double tol,
 *                 int reorder, size_t x, size_t singularity):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dcsrlsvqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_123dcsrlsvqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cupy_4cuda_8cusolver_122dcsrlsvqr[] = "dcsrlsvqr(size_t handle, int m, int nnz, size_t descrA, size_t csrValA, size_t csrRowPtrA, size_t csrColIndA, size_t b, double tol, int reorder, size_t x, size_t singularity)";
static PyObject *__pyx_pw_4cupy_4cuda_8cusolver_123dcsrlsvqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_handle;
  int __pyx_v_m;
  int __pyx_v_nnz;
  size_t __pyx_v_descrA;
  size_t __pyx_v_csrValA;
  size_t __pyx_v_csrRowPtrA;
  size_t __pyx_v_csrColIndA;
  size_t __pyx_v_b;
  double __pyx_v_tol;
  int __pyx_v_reorder;
  size_t __pyx_v_x;
  size_t __pyx_v_singularity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dcsrlsvqr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_m,&__pyx_n_s_nnz,&__pyx_n_s_descrA,&__pyx_n_s_csrValA,&__pyx_n_s_csrRowPtrA,&__pyx_n_s_csrColIndA,&__pyx_n_s_b,&__pyx_n_s_tol,&__pyx_n_s_reorder,&__pyx_n_s_x,&__pyx_n_s_singularity,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 1); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nnz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 2); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_descrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 3); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrValA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 4); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrRowPtrA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 5); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csrColIndA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 6); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 7); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 8); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reorder)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 9); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 10); __PYX_ERR(0, 854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_singularity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, 11); __PYX_ERR(0, 854, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dcsrlsvqr") < 0)) __PYX_ERR(0, 854, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_handle = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_handle == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 854, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 854, __pyx_L3_error)
    __pyx_v_nnz = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nnz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 854, __pyx_L3_error)
    __pyx_v_descrA = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_descrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 854, __pyx_L3_error)
    __pyx_v_csrValA = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_csrValA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 854, __pyx_L3_error)
    __pyx_v_csrRowPtrA = __Pyx_PyInt_As_size_t(values[5]); if (unlikely((__pyx_v_csrRowPtrA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 855, __pyx_L3_error)
    __pyx_v_csrColIndA = __Pyx_PyInt_As_size_t(values[6]); if (unlikely((__pyx_v_csrColIndA == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 855, __pyx_L3_error)
    __pyx_v_b = __Pyx_PyInt_As_size_t(values[7]); if (unlikely((__pyx_v_b == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 855, __pyx_L3_error)
    __pyx_v_tol = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 855, __pyx_L3_error)
    __pyx_v_reorder = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_reorder == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyInt_As_size_t(values[10]); if (unlikely((__pyx_v_x == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
    __pyx_v_singularity = __Pyx_PyInt_As_size_t(values[11]); if (unlikely((__pyx_v_singularity == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dcsrlsvqr", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 854, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cupy.cuda.cusolver.dcsrlsvqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cupy_4cuda_8cusolver_122dcsrlsvqr(__pyx_self, __pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cupy_4cuda_8cusolver_122dcsrlsvqr(CYTHON_UNUSED PyObject *__pyx_self, size_t __pyx_v_handle, int __pyx_v_m, int __pyx_v_nnz, size_t __pyx_v_descrA, size_t __pyx_v_csrValA, size_t __pyx_v_csrRowPtrA, size_t __pyx_v_csrColIndA, size_t __pyx_v_b, double __pyx_v_tol, int __pyx_v_reorder, size_t __pyx_v_x, size_t __pyx_v_singularity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dcsrlsvqr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cupy_4cuda_8cusolver_dcsrlsvqr(__pyx_v_handle, __pyx_v_m, __pyx_v_nnz, __pyx_v_descrA, __pyx_v_csrValA, __pyx_v_csrRowPtrA, __pyx_v_csrColIndA, __pyx_v_b, __pyx_v_tol, __pyx_v_reorder, __pyx_v_x, __pyx_v_singularity, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cupy.cuda.cusolver.dcsrlsvqr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"check_status", (PyCFunction)__pyx_pw_4cupy_4cuda_8cusolver_1check_status, METH_O, __pyx_doc_4cupy_4cuda_8cusolver_check_status},
  {"create", (PyCFunction)__pyx_pw_4cupy_4cuda_8cusolver_3create, METH_NOARGS, __pyx_doc_4cupy_4cuda_8cusolver_2create},
  {"spCreate", (PyCFunction)__pyx_pw_4cupy_4cuda_8cusolver_5spCreate, METH_NOARGS, __pyx_doc_4cupy_4cuda_8cusolver_4spCreate},
  {"destroy", (PyCFunction)__pyx_pw_4cupy_4cuda_8cusolver_7destroy, METH_O, __pyx_doc_4cupy_4cuda_8cusolver_6destroy},
  {"setStream", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_9setStream, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_8setStream},
  {"getStream", (PyCFunction)__pyx_pw_4cupy_4cuda_8cusolver_11getStream, METH_O, __pyx_doc_4cupy_4cuda_8cusolver_10getStream},
  {"spSetStream", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_13spSetStream, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_12spSetStream},
  {"spGetStream", (PyCFunction)__pyx_pw_4cupy_4cuda_8cusolver_15spGetStream, METH_O, __pyx_doc_4cupy_4cuda_8cusolver_14spGetStream},
  {"spotrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_17spotrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_16spotrf_bufferSize},
  {"dpotrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_19dpotrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_18dpotrf_bufferSize},
  {"spotrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_21spotrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_20spotrf},
  {"dpotrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_23dpotrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_22dpotrf},
  {"spotrs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_25spotrs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_24spotrs},
  {"dpotrs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_27dpotrs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_26dpotrs},
  {"sgetrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_29sgetrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_28sgetrf},
  {"dgetrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_31dgetrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_30dgetrf},
  {"sgetrs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_33sgetrs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_32sgetrs},
  {"dgetrs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_35dgetrs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_34dgetrs},
  {"sgetrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_37sgetrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_36sgetrf_bufferSize},
  {"dgetrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_39dgetrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_38dgetrf_bufferSize},
  {"sgeqrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_41sgeqrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_40sgeqrf_bufferSize},
  {"dgeqrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_43dgeqrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_42dgeqrf_bufferSize},
  {"cgeqrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_45cgeqrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_44cgeqrf_bufferSize},
  {"zgeqrf_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_47zgeqrf_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_46zgeqrf_bufferSize},
  {"sgeqrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_49sgeqrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_48sgeqrf},
  {"dgeqrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_51dgeqrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_50dgeqrf},
  {"cgeqrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_53cgeqrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_52cgeqrf},
  {"zgeqrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_55zgeqrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_54zgeqrf},
  {"sorgqr_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_57sorgqr_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_56sorgqr_bufferSize},
  {"dorgqr_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_59dorgqr_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_58dorgqr_bufferSize},
  {"cungqr_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_61cungqr_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_60cungqr_bufferSize},
  {"zungqr_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_63zungqr_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_62zungqr_bufferSize},
  {"sorgqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_65sorgqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_64sorgqr},
  {"dorgqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_67dorgqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_66dorgqr},
  {"sormqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_69sormqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_68sormqr},
  {"dormqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_71dormqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_70dormqr},
  {"cormqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_73cormqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_72cormqr},
  {"zormqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_75zormqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_74zormqr},
  {"ssytrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_77ssytrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_76ssytrf},
  {"dsytrf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_79dsytrf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_78dsytrf},
  {"sgebrd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_81sgebrd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_80sgebrd},
  {"dgebrd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_83dgebrd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_82dgebrd},
  {"sgesvd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_85sgesvd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_84sgesvd_bufferSize},
  {"dgesvd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_87dgesvd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_86dgesvd_bufferSize},
  {"cgesvd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_89cgesvd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_88cgesvd_bufferSize},
  {"zgesvd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_91zgesvd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_90zgesvd_bufferSize},
  {"sgesvd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_93sgesvd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_92sgesvd},
  {"dgesvd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_95dgesvd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_94dgesvd},
  {"cgesvd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_97cgesvd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_96cgesvd},
  {"zgesvd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_99zgesvd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_98zgesvd},
  {"ssyevd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_101ssyevd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_100ssyevd_bufferSize},
  {"dsyevd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_103dsyevd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_102dsyevd_bufferSize},
  {"cheevd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_105cheevd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_104cheevd_bufferSize},
  {"zheevd_bufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_107zheevd_bufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_106zheevd_bufferSize},
  {"ssyevd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_109ssyevd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_108ssyevd},
  {"dsyevd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_111dsyevd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_110dsyevd},
  {"cheevd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_113cheevd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_112cheevd},
  {"zheevd", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_115zheevd, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_114zheevd},
  {"scsrlsvchol", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_117scsrlsvchol, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_116scsrlsvchol},
  {"dcsrlsvchol", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_119dcsrlsvchol, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_118dcsrlsvchol},
  {"scsrlsvqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_121scsrlsvqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_120scsrlsvqr},
  {"dcsrlsvqr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cupy_4cuda_8cusolver_123dcsrlsvqr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cupy_4cuda_8cusolver_122dcsrlsvqr},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cusolver(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cusolver},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cusolver",
    __pyx_k_Thin_wrapper_of_CUSOLVER, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_CUSOLVERError, __pyx_k_CUSOLVERError, sizeof(__pyx_k_CUSOLVERError), 0, 0, 1, 1},
  {&__pyx_n_s_CUSOLVERError___init, __pyx_k_CUSOLVERError___init, sizeof(__pyx_k_CUSOLVERError___init), 0, 0, 1, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_ALLOC_FAILED, __pyx_k_CUSOLVER_STATUS_ALLOC_FAILED, sizeof(__pyx_k_CUSOLVER_STATUS_ALLOC_FAILED), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_ARCH_MISMATCH, __pyx_k_CUSOLVER_STATUS_ARCH_MISMATCH, sizeof(__pyx_k_CUSOLVER_STATUS_ARCH_MISMATCH), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_EXECUTION_FAILED, __pyx_k_CUSOLVER_STATUS_EXECUTION_FAILED, sizeof(__pyx_k_CUSOLVER_STATUS_EXECUTION_FAILED), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_INTERNAL_ERROR, __pyx_k_CUSOLVER_STATUS_INTERNAL_ERROR, sizeof(__pyx_k_CUSOLVER_STATUS_INTERNAL_ERROR), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_INVALID_LICENSE, __pyx_k_CUSOLVER_STATUS_INVALID_LICENSE, sizeof(__pyx_k_CUSOLVER_STATUS_INVALID_LICENSE), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_INVALID_VALUE, __pyx_k_CUSOLVER_STATUS_INVALID_VALUE, sizeof(__pyx_k_CUSOLVER_STATUS_INVALID_VALUE), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_MAPPING_ERROR, __pyx_k_CUSOLVER_STATUS_MAPPING_ERROR, sizeof(__pyx_k_CUSOLVER_STATUS_MAPPING_ERROR), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_MATRIX_TYPE_NOT, __pyx_k_CUSOLVER_STATUS_MATRIX_TYPE_NOT, sizeof(__pyx_k_CUSOLVER_STATUS_MATRIX_TYPE_NOT), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_NOT_INITIALIZED, __pyx_k_CUSOLVER_STATUS_NOT_INITIALIZED, sizeof(__pyx_k_CUSOLVER_STATUS_NOT_INITIALIZED), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_NOT_SUPPORTED, __pyx_k_CUSOLVER_STATUS_NOT_SUPPORTED, sizeof(__pyx_k_CUSOLVER_STATUS_NOT_SUPPORTED), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_SUCCESS, __pyx_k_CUSOLVER_STATUS_SUCCESS, sizeof(__pyx_k_CUSOLVER_STATUS_SUCCESS), 0, 1, 0, 1},
  {&__pyx_n_u_CUSOLVER_STATUS_ZERO_PIVOT, __pyx_k_CUSOLVER_STATUS_ZERO_PIVOT, sizeof(__pyx_k_CUSOLVER_STATUS_ZERO_PIVOT), 0, 1, 0, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
  {&__pyx_n_s_VT, __pyx_k_VT, sizeof(__pyx_k_VT), 0, 0, 1, 1},
  {&__pyx_n_s_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 0, 1, 1},
  {&__pyx_n_s_Work, __pyx_k_Work, sizeof(__pyx_k_Work), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_csrColIndA, __pyx_k_csrColIndA, sizeof(__pyx_k_csrColIndA), 0, 0, 1, 1},
  {&__pyx_n_s_csrRowPtrA, __pyx_k_csrRowPtrA, sizeof(__pyx_k_csrRowPtrA), 0, 0, 1, 1},
  {&__pyx_n_s_csrValA, __pyx_k_csrValA, sizeof(__pyx_k_csrValA), 0, 0, 1, 1},
  {&__pyx_n_s_cupy_cuda_cusolver, __pyx_k_cupy_cuda_cusolver, sizeof(__pyx_k_cupy_cuda_cusolver), 0, 0, 1, 1},
  {&__pyx_kp_s_cupy_cuda_cusolver_pyx, __pyx_k_cupy_cuda_cusolver_pyx, sizeof(__pyx_k_cupy_cuda_cusolver_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_descrA, __pyx_k_descrA, sizeof(__pyx_k_descrA), 0, 0, 1, 1},
  {&__pyx_n_s_devInfo, __pyx_k_devInfo, sizeof(__pyx_k_devInfo), 0, 0, 1, 1},
  {&__pyx_n_s_devIpiv, __pyx_k_devIpiv, sizeof(__pyx_k_devIpiv), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_ipiv, __pyx_k_ipiv, sizeof(__pyx_k_ipiv), 0, 0, 1, 1},
  {&__pyx_n_s_jobu, __pyx_k_jobu, sizeof(__pyx_k_jobu), 0, 0, 1, 1},
  {&__pyx_n_s_jobvt, __pyx_k_jobvt, sizeof(__pyx_k_jobvt), 0, 0, 1, 1},
  {&__pyx_n_s_jobz, __pyx_k_jobz, sizeof(__pyx_k_jobz), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_lda, __pyx_k_lda, sizeof(__pyx_k_lda), 0, 0, 1, 1},
  {&__pyx_n_s_ldb, __pyx_k_ldb, sizeof(__pyx_k_ldb), 0, 0, 1, 1},
  {&__pyx_n_s_ldc, __pyx_k_ldc, sizeof(__pyx_k_ldc), 0, 0, 1, 1},
  {&__pyx_n_s_ldu, __pyx_k_ldu, sizeof(__pyx_k_ldu), 0, 0, 1, 1},
  {&__pyx_n_s_ldvt, __pyx_k_ldvt, sizeof(__pyx_k_ldvt), 0, 0, 1, 1},
  {&__pyx_n_s_lwork, __pyx_k_lwork, sizeof(__pyx_k_lwork), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nnz, __pyx_k_nnz, sizeof(__pyx_k_nnz), 0, 0, 1, 1},
  {&__pyx_n_s_nrhs, __pyx_k_nrhs, sizeof(__pyx_k_nrhs), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_reorder, __pyx_k_reorder, sizeof(__pyx_k_reorder), 0, 0, 1, 1},
  {&__pyx_n_s_rwork, __pyx_k_rwork, sizeof(__pyx_k_rwork), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_side, __pyx_k_side, sizeof(__pyx_k_side), 0, 0, 1, 1},
  {&__pyx_n_s_singularity, __pyx_k_singularity, sizeof(__pyx_k_singularity), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_tau, __pyx_k_tau, sizeof(__pyx_k_tau), 0, 0, 1, 1},
  {&__pyx_n_s_tauP, __pyx_k_tauP, sizeof(__pyx_k_tauP), 0, 0, 1, 1},
  {&__pyx_n_s_tauQ, __pyx_k_tauQ, sizeof(__pyx_k_tauQ), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
  {&__pyx_n_s_trans, __pyx_k_trans, sizeof(__pyx_k_trans), 0, 0, 1, 1},
  {&__pyx_n_s_uplo, __pyx_k_uplo, sizeof(__pyx_k_uplo), 0, 0, 1, 1},
  {&__pyx_n_s_work, __pyx_k_work, sizeof(__pyx_k_work), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 237, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cupy/cuda/cusolver.pyx":233
 * 
 * 
 * class CUSOLVERError(RuntimeError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, status):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_builtin_RuntimeError); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cupy/cuda/cusolver.pyx":235
 * class CUSOLVERError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUSOLVERError, self).__init__(STATUS[status])
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_status); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cupy_cuda_cusolver_pyx, __pyx_n_s_init, 235, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4cupy_4cuda_8cusolver_STATUS = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("create", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_create, "size_t (int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("spCreate", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_spCreate, "size_t (int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("destroy", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_destroy, "PyObject *(size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("setStream", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_setStream, "PyObject *(size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("getStream", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_getStream, "size_t (size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("spotrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_spotrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dpotrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dpotrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("spotrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_spotrf, "PyObject *(size_t, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dpotrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dpotrf, "PyObject *(size_t, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("spotrs", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_spotrs, "PyObject *(size_t, int, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dpotrs", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dpotrs, "PyObject *(size_t, int, int, int, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgetrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgetrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgetrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgetrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgetrs", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgetrs, "PyObject *(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgetrs", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgetrs, "PyObject *(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgeqrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgeqrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgeqrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgeqrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgeqrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_cgeqrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgeqrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_zgeqrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgetrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgetrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgetrf_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgetrf_bufferSize, "int (size_t, int, int, size_t, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgeqrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgeqrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgeqrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgeqrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgeqrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_cgeqrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgeqrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_zgeqrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sorgqr_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sorgqr_bufferSize, "int (size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dorgqr_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dorgqr_bufferSize, "int (size_t, int, int, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sorgqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sorgqr, "PyObject *(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dorgqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dorgqr, "PyObject *(size_t, int, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sormqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sormqr, "PyObject *(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dormqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dormqr, "PyObject *(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cormqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_cormqr, "PyObject *(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zormqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_zormqr, "PyObject *(size_t, int, int, int, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("ssytrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_ssytrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dsytrf", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dsytrf, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgebrd", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgebrd, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, size_t, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgebrd", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgebrd, "PyObject *(size_t, int, int, size_t, int, size_t, size_t, size_t, size_t, size_t, int, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgesvd_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgesvd_bufferSize, "int (size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgesvd_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgesvd_bufferSize, "int (size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgesvd_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_cgesvd_bufferSize, "int (size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgesvd_bufferSize", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_zgesvd_bufferSize, "int (size_t, int, int, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sgesvd", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_sgesvd, "PyObject *(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dgesvd", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dgesvd, "PyObject *(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cgesvd", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_cgesvd, "PyObject *(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("zgesvd", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_zgesvd, "PyObject *(size_t, char, char, int, int, size_t, int, size_t, size_t, int, size_t, int, size_t, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("scsrlsvchol", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_scsrlsvchol, "PyObject *(size_t, int, int, size_t, size_t, size_t, size_t, size_t, float, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dcsrlsvchol", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dcsrlsvchol, "PyObject *(size_t, int, int, size_t, size_t, size_t, size_t, size_t, double, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("scsrlsvqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_scsrlsvqr, "PyObject *(size_t, int, int, size_t, size_t, size_t, size_t, size_t, float, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dcsrlsvqr", (void (*)(void))__pyx_f_4cupy_4cuda_8cusolver_dcsrlsvqr, "PyObject *(size_t, int, int, size_t, size_t, size_t, size_t, size_t, double, int, size_t, size_t, int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cupy.cuda.stream"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_current_stream_ptr", (void (**)(void))&__pyx_f_4cupy_4cuda_6stream_get_current_stream_ptr, "size_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcusolver(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcusolver(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cusolver(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cusolver(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cusolver(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cusolver' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cusolver(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cusolver", __pyx_methods, __pyx_k_Thin_wrapper_of_CUSOLVER, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cupy__cuda__cusolver) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cupy.cuda.cusolver")) {
      if (unlikely(PyDict_SetItemString(modules, "cupy.cuda.cusolver", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cupy/cuda/cusolver.pyx":218
 * 
 * cdef dict STATUS = {
 *     0: 'CUSOLVER_STATUS_SUCCESS',             # <<<<<<<<<<<<<<
 *     1: 'CUSOLVER_STATUS_NOT_INITIALIZED',
 *     2: 'CUSOLVER_STATUS_ALLOC_FAILED',
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, __pyx_n_u_CUSOLVER_STATUS_SUCCESS) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_1, __pyx_n_u_CUSOLVER_STATUS_NOT_INITIALIZED) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_2, __pyx_n_u_CUSOLVER_STATUS_ALLOC_FAILED) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_3, __pyx_n_u_CUSOLVER_STATUS_INVALID_VALUE) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_4, __pyx_n_u_CUSOLVER_STATUS_ARCH_MISMATCH) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_5, __pyx_n_u_CUSOLVER_STATUS_MAPPING_ERROR) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_6, __pyx_n_u_CUSOLVER_STATUS_EXECUTION_FAILED) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_7, __pyx_n_u_CUSOLVER_STATUS_INTERNAL_ERROR) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_8, __pyx_n_u_CUSOLVER_STATUS_MATRIX_TYPE_NOT) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_9, __pyx_n_u_CUSOLVER_STATUS_NOT_SUPPORTED) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_10, __pyx_n_u_CUSOLVER_STATUS_ZERO_PIVOT) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_11, __pyx_n_u_CUSOLVER_STATUS_INVALID_LICENSE) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_XGOTREF(__pyx_v_4cupy_4cuda_8cusolver_STATUS);
  __Pyx_DECREF_SET(__pyx_v_4cupy_4cuda_8cusolver_STATUS, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":233
 * 
 * 
 * class CUSOLVERError(RuntimeError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, status):
 */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_tuple_, __pyx_n_s_CUSOLVERError, __pyx_n_s_CUSOLVERError, (PyObject *) NULL, __pyx_n_s_cupy_cuda_cusolver, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cupy/cuda/cusolver.pyx":235
 * class CUSOLVERError(RuntimeError):
 * 
 *     def __init__(self, status):             # <<<<<<<<<<<<<<
 *         self.status = status
 *         super(CUSOLVERError, self).__init__(STATUS[status])
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_4cupy_4cuda_8cusolver_13CUSOLVERError_1__init__, 0, __pyx_n_s_CUSOLVERError___init, NULL, __pyx_n_s_cupy_cuda_cusolver, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_3) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cupy/cuda/cusolver.pyx":233
 * 
 * 
 * class CUSOLVERError(RuntimeError):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, status):
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_CUSOLVERError, __pyx_tuple_, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CUSOLVERError, __pyx_t_3) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cupy/cuda/cusolver.pyx":1
 * """Thin wrapper of CUSOLVER."""             # <<<<<<<<<<<<<<
 * 
 * cimport cython  # NOQA
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_MODE_NOVECTOR);
    if (unlikely(!wrapped)) __PYX_ERR(1, 35, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUSOLVER_EIG_MODE_NOVECTOR", wrapped) < 0) __PYX_ERR(1, 35, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_MODE_VECTOR);
    if (unlikely(!wrapped)) __PYX_ERR(1, 36, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUSOLVER_EIG_MODE_VECTOR", wrapped) < 0) __PYX_ERR(1, 36, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_TYPE_1);
    if (unlikely(!wrapped)) __PYX_ERR(1, 31, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUSOLVER_EIG_TYPE_1", wrapped) < 0) __PYX_ERR(1, 31, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_TYPE_2);
    if (unlikely(!wrapped)) __PYX_ERR(1, 32, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUSOLVER_EIG_TYPE_2", wrapped) < 0) __PYX_ERR(1, 32, __pyx_L1_error);
  }
  {
    PyObject* wrapped = __Pyx_PyInt_From_int(__pyx_e_4cupy_4cuda_8cusolver_CUSOLVER_EIG_TYPE_3);
    if (unlikely(!wrapped)) __PYX_ERR(1, 33, __pyx_L1_error)
    if (PyObject_SetAttrString(__pyx_m, "CUSOLVER_EIG_TYPE_3", wrapped) < 0) __PYX_ERR(1, 33, __pyx_L1_error);
  }

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cupy.cuda.cusolver", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cupy.cuda.cusolver");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
